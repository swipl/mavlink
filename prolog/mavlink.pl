/*  File:    mavlink.pl
    Author:  Roy Ratcliffe
    Created: Aug 20 2023
    Purpose: MAVLink
*/

:- module(mavlink,
          []).

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

mavlink_definitions_r(all, A),
    forall((   member(B-C, A),
               mavlink_definitions:mavlink_definition(C, D)),
           assertz(mavlink:D)).

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

:- dynamic enum/2.

enum('ACCELCAL_VEHICLE_POS', []).
enum('HEADING_TYPE', []).
enum('SPEED_TYPE', []).
enum('MAV_CMD', []).
enum('SCRIPTING_CMD', []).
enum('LIMITS_STATE', []).
enum('LIMIT_MODULE', [bitmask(true)]).
enum('RALLY_FLAGS', [bitmask(true)]).
enum('CAMERA_STATUS_TYPES', []).
enum('CAMERA_FEEDBACK_FLAGS', []).
enum('MAV_MODE_GIMBAL', []).
enum('GIMBAL_AXIS', []).
enum('GIMBAL_AXIS_CALIBRATION_STATUS', []).
enum('GIMBAL_AXIS_CALIBRATION_REQUIRED', []).
enum('GOPRO_HEARTBEAT_STATUS', []).
enum('GOPRO_HEARTBEAT_FLAGS', [bitmask(true)]).
enum('GOPRO_REQUEST_STATUS', []).
enum('GOPRO_COMMAND', []).
enum('GOPRO_CAPTURE_MODE', []).
enum('GOPRO_RESOLUTION', []).
enum('GOPRO_FRAME_RATE', []).
enum('GOPRO_FIELD_OF_VIEW', []).
enum('GOPRO_VIDEO_SETTINGS_FLAGS', [bitmask(true)]).
enum('GOPRO_PHOTO_RESOLUTION', []).
enum('GOPRO_PROTUNE_WHITE_BALANCE', []).
enum('GOPRO_PROTUNE_COLOUR', []).
enum('GOPRO_PROTUNE_GAIN', []).
enum('GOPRO_PROTUNE_SHARPNESS', []).
enum('GOPRO_PROTUNE_EXPOSURE', []).
enum('GOPRO_CHARGING', []).
enum('GOPRO_MODEL', []).
enum('GOPRO_BURST_RATE', []).
enum('MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL', []).
enum('LED_CONTROL_PATTERN', []).
enum('EKF_STATUS_FLAGS', [bitmask(true)]).
enum('PID_TUNING_AXIS', []).
enum('MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS', []).
enum('MAV_REMOTE_LOG_DATA_BLOCK_STATUSES', []).
enum('DEVICE_OP_BUSTYPE', []).
enum('DEEPSTALL_STAGE', []).
enum('PLANE_MODE', []).
enum('COPTER_MODE', []).
enum('SUB_MODE', []).
enum('ROVER_MODE', []).
enum('TRACKER_MODE', []).
enum('OSD_PARAM_CONFIG_TYPE', []).
enum('OSD_PARAM_CONFIG_ERROR', []).
enum('MAV_CMD', []).
enum('GSM_LINK_TYPE', []).
enum('GSM_MODEM_TYPE', []).
enum('FIRMWARE_VERSION_TYPE', []).
enum('HL_FAILURE_FLAG', [bitmask(true)]).
enum('MAV_GOTO', []).
enum('MAV_MODE', []).
enum('MAV_SYS_STATUS_SENSOR', [bitmask(true)]).
enum('MAV_SYS_STATUS_SENSOR_EXTENDED', [bitmask(true)]).
enum('MAV_FRAME', []).
enum('MAVLINK_DATA_STREAM_TYPE', []).
enum('FENCE_ACTION', []).
enum('FENCE_BREACH', []).
enum('FENCE_MITIGATE', []).
enum('MAV_MOUNT_MODE', []).
enum('GIMBAL_DEVICE_CAP_FLAGS', [bitmask(true)]).
enum('GIMBAL_MANAGER_CAP_FLAGS', [bitmask(true)]).
enum('GIMBAL_DEVICE_FLAGS', [bitmask(true)]).
enum('GIMBAL_MANAGER_FLAGS', [bitmask(true)]).
enum('GIMBAL_DEVICE_ERROR_FLAGS', [bitmask(true)]).
enum('GRIPPER_ACTIONS', []).
enum('WINCH_ACTIONS', []).
enum('UAVCAN_NODE_HEALTH', []).
enum('UAVCAN_NODE_MODE', []).
enum('ESC_CONNECTION_TYPE', []).
enum('ESC_FAILURE_FLAGS', [bitmask(true)]).
enum('STORAGE_STATUS', []).
enum('STORAGE_TYPE', []).
enum('STORAGE_USAGE_FLAG', []).
enum('ORBIT_YAW_BEHAVIOUR', []).
enum('WIFI_CONFIG_AP_RESPONSE', []).
enum('CELLULAR_CONFIG_RESPONSE', []).
enum('WIFI_CONFIG_AP_MODE', []).
enum('COMP_METADATA_TYPE', []).
enum('ACTUATOR_CONFIGURATION', []).
enum('ACTUATOR_OUTPUT_FUNCTION', []).
enum('AUTOTUNE_AXIS', [bitmask(true)]).
enum('PREFLIGHT_STORAGE_PARAMETER_ACTION', []).
enum('PREFLIGHT_STORAGE_MISSION_ACTION', []).
enum('MAV_CMD', []).
enum('MAV_DATA_STREAM', []).
enum('MAV_ROI', []).
enum('MAV_PARAM_TYPE', []).
enum('MAV_PARAM_EXT_TYPE', []).
enum('MAV_RESULT', []).
enum('MAV_MISSION_RESULT', []).
enum('MAV_SEVERITY', []).
enum('MAV_POWER_STATUS', [bitmask(true)]).
enum('SERIAL_CONTROL_DEV', []).
enum('SERIAL_CONTROL_FLAG', [bitmask(true)]).
enum('MAV_DISTANCE_SENSOR', []).
enum('MAV_SENSOR_ORIENTATION', []).
enum('MAV_PROTOCOL_CAPABILITY', [bitmask(true)]).
enum('MAV_MISSION_TYPE', []).
enum('MAV_ESTIMATOR_TYPE', []).
enum('MAV_BATTERY_TYPE', []).
enum('MAV_BATTERY_FUNCTION', []).
enum('MAV_BATTERY_CHARGE_STATE', []).
enum('MAV_BATTERY_MODE', []).
enum('MAV_BATTERY_FAULT', [bitmask(true)]).
enum('MAV_GENERATOR_STATUS_FLAG', [bitmask(true)]).
enum('MAV_VTOL_STATE', []).
enum('MAV_LANDED_STATE', []).
enum('ADSB_ALTITUDE_TYPE', []).
enum('ADSB_EMITTER_TYPE', []).
enum('ADSB_FLAGS', [bitmask(true)]).
enum('MAV_DO_REPOSITION_FLAGS', [bitmask(true)]).
enum('ESTIMATOR_STATUS_FLAGS', [bitmask(true)]).
enum('MOTOR_TEST_ORDER', []).
enum('MOTOR_TEST_THROTTLE_TYPE', []).
enum('GPS_INPUT_IGNORE_FLAGS', [bitmask(true)]).
enum('MAV_COLLISION_ACTION', []).
enum('MAV_COLLISION_THREAT_LEVEL', []).
enum('MAV_COLLISION_SRC', []).
enum('GPS_FIX_TYPE', []).
enum('RTK_BASELINE_COORDINATE_SYSTEM', []).
enum('LANDING_TARGET_TYPE', []).
enum('VTOL_TRANSITION_HEADING', []).
enum('CAMERA_CAP_FLAGS', [bitmask(true)]).
enum('VIDEO_STREAM_STATUS_FLAGS', [bitmask(true)]).
enum('VIDEO_STREAM_TYPE', []).
enum('CAMERA_TRACKING_STATUS_FLAGS', []).
enum('CAMERA_TRACKING_MODE', []).
enum('CAMERA_TRACKING_TARGET_DATA', [bitmask(true)]).
enum('CAMERA_ZOOM_TYPE', []).
enum('SET_FOCUS_TYPE', []).
enum('PARAM_ACK', []).
enum('CAMERA_MODE', []).
enum('MAV_ARM_AUTH_DENIED_REASON', []).
enum('RC_TYPE', []).
enum('POSITION_TARGET_TYPEMASK', [bitmask(true)]).
enum('ATTITUDE_TARGET_TYPEMASK', [bitmask(true)]).
enum('UTM_FLIGHT_STATE', []).
enum('UTM_DATA_AVAIL_FLAGS', [bitmask(true)]).
enum('CELLULAR_STATUS_FLAG', []).
enum('CELLULAR_NETWORK_FAILED_REASON', []).
enum('CELLULAR_NETWORK_RADIO_TYPE', []).
enum('PRECISION_LAND_MODE', []).
enum('PARACHUTE_ACTION', []).
enum('MAV_TUNNEL_PAYLOAD_TYPE', []).
enum('MAV_ODID_ID_TYPE', []).
enum('MAV_ODID_UA_TYPE', []).
enum('MAV_ODID_STATUS', []).
enum('MAV_ODID_HEIGHT_REF', []).
enum('MAV_ODID_HOR_ACC', []).
enum('MAV_ODID_VER_ACC', []).
enum('MAV_ODID_SPEED_ACC', []).
enum('MAV_ODID_TIME_ACC', []).
enum('MAV_ODID_AUTH_TYPE', []).
enum('MAV_ODID_DESC_TYPE', []).
enum('MAV_ODID_OPERATOR_LOCATION_TYPE', []).
enum('MAV_ODID_CLASSIFICATION_TYPE', []).
enum('MAV_ODID_CATEGORY_EU', []).
enum('MAV_ODID_CLASS_EU', []).
enum('MAV_ODID_OPERATOR_ID_TYPE', []).
enum('MAV_ODID_ARM_STATUS', []).
enum('TUNE_FORMAT', []).
enum('AIS_TYPE', []).
enum('AIS_NAV_STATUS', []).
enum('AIS_FLAGS', [bitmask(true)]).
enum('FAILURE_UNIT', []).
enum('FAILURE_TYPE', []).
enum('NAV_VTOL_LAND_OPTIONS', []).
enum('MAV_WINCH_STATUS_FLAG', [bitmask(true)]).
enum('MAG_CAL_STATUS', []).
enum('MAV_EVENT_ERROR_REASON', []).
enum('MAV_EVENT_CURRENT_SEQUENCE_FLAGS', []).
enum('HIL_SENSOR_UPDATED_FLAGS', [bitmask(true)]).
enum('HIGHRES_IMU_UPDATED_FLAGS', [bitmask(true)]).
enum('CAN_FILTER_OP', []).
enum('MAV_FTP_ERR', []).
enum('MAV_FTP_OPCODE', []).
enum('MISSION_STATE', []).
enum('WIFI_NETWORK_SECURITY', []).
enum('AIRSPEED_SENSOR_FLAGS', [bitmask(true)]).
enum('PARAM_TRANSACTION_TRANSPORT', []).
enum('PARAM_TRANSACTION_ACTION', []).
enum('MAV_STANDARD_MODE', []).
enum('MAV_MODE_PROPERTY', [bitmask(true)]).
enum('MAV_CMD', []).
enum('MAV_BATTERY_STATUS_FLAGS', [bitmask(true)]).
enum('MAV_CMD', []).
enum('TARGET_ABSOLUTE_SENSOR_CAPABILITY_FLAGS', [bitmask(true)]).
enum('TARGET_OBS_FRAME', []).
enum('ICAROUS_TRACK_BAND_TYPES', []).
enum('ICAROUS_FMS_STATE', []).
enum('MAV_AUTOPILOT', []).
enum('MAV_TYPE', []).
enum('MAV_MODE_FLAG', [bitmask(true)]).
enum('MAV_MODE_FLAG_DECODE_POSITION', [bitmask(true)]).
enum('MAV_STATE', []).
enum('MAV_COMPONENT', []).
enum('UALBERTA_AUTOPILOT_MODE', []).
enum('UALBERTA_NAV_MODE', []).
enum('UALBERTA_PILOT_MODE', []).
enum('UAVIONIX_ADSB_OUT_DYNAMIC_STATE', [bitmask(true)]).
enum('UAVIONIX_ADSB_OUT_RF_SELECT', [bitmask(true)]).
enum('UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX', []).
enum('UAVIONIX_ADSB_RF_HEALTH', [bitmask(true)]).
enum('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', []).
enum('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT', []).
enum('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON', []).
enum('UAVIONIX_ADSB_EMERGENCY_STATUS', []).
enum('MAV_STORM32_TUNNEL_PAYLOAD_TYPE', []).
enum('MAV_STORM32_GIMBAL_PREARM_FLAGS', [bitmask(true)]).
enum('MAV_STORM32_CAMERA_PREARM_FLAGS', [bitmask(true)]).
enum('MAV_STORM32_GIMBAL_MANAGER_CAP_FLAGS', [bitmask(true)]).
enum('MAV_STORM32_GIMBAL_MANAGER_FLAGS', [bitmask(true)]).
enum('MAV_STORM32_GIMBAL_MANAGER_CLIENT', []).
enum('MAV_STORM32_GIMBAL_MANAGER_PROFILE', []).
enum('MAV_QSHOT_MODE', []).
enum('MAV_CMD', []).
enum('RADIO_RC_CHANNELS_FLAGS', [bitmask(true)]).
enum('RADIO_LINK_STATS_FLAGS', [bitmask(true)]).
enum('MAV_CMD', []).
enum('MAV_AVSS_COMMAND_FAILURE_REASON', []).
enum('AVSS_M300_OPERATION_MODE', []).
enum('AVSS_HORSEFLY_OPERATION_MODE', []).
enum('AIRLINK_AUTH_RESPONSE_TYPE', []).

:- dynamic enum_entry/4.

enum_entry('ACCELCAL_VEHICLE_POS', 'ACCELCAL_VEHICLE_POS_LEVEL', 1, []).
enum_entry('ACCELCAL_VEHICLE_POS', 'ACCELCAL_VEHICLE_POS_LEFT', 2, []).
enum_entry('ACCELCAL_VEHICLE_POS', 'ACCELCAL_VEHICLE_POS_RIGHT', 3, []).
enum_entry('ACCELCAL_VEHICLE_POS', 'ACCELCAL_VEHICLE_POS_NOSEDOWN', 4, []).
enum_entry('ACCELCAL_VEHICLE_POS', 'ACCELCAL_VEHICLE_POS_NOSEUP', 5, []).
enum_entry('ACCELCAL_VEHICLE_POS', 'ACCELCAL_VEHICLE_POS_BACK', 6, []).
enum_entry('ACCELCAL_VEHICLE_POS', 'ACCELCAL_VEHICLE_POS_SUCCESS', 16777215, []).
enum_entry('ACCELCAL_VEHICLE_POS', 'ACCELCAL_VEHICLE_POS_FAILED', 16777216, []).
enum_entry('HEADING_TYPE', 'HEADING_TYPE_COURSE_OVER_GROUND', 0, []).
enum_entry('HEADING_TYPE', 'HEADING_TYPE_HEADING', 1, []).
enum_entry('SPEED_TYPE', 'SPEED_TYPE_AIRSPEED', 0, []).
enum_entry('SPEED_TYPE', 'SPEED_TYPE_GROUNDSPEED', 1, []).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_RESUME_REPEAT_DIST', 215, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SPRAYER', 216, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SEND_SCRIPT_MESSAGE', 217, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_AUX_FUNCTION', 218, []).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_ALTITUDE_WAIT', 83, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_POWER_OFF_INITIATED', 42000, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SOLO_BTN_FLY_CLICK', 42001, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SOLO_BTN_FLY_HOLD', 42002, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SOLO_BTN_PAUSE_CLICK', 42003, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_FIXED_MAG_CAL', 42004, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_FIXED_MAG_CAL_FIELD', 42005, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_EKF_SOURCE_SET', 42007, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_START_MAG_CAL', 42424, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_ACCEPT_MAG_CAL', 42425, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_CANCEL_MAG_CAL', 42426, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_ACCELCAL_VEHICLE_POS', 42429, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SEND_BANNER', 42428, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_FACTORY_TEST_MODE', 42427, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GIMBAL_RESET', 42501, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS', 42502, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GIMBAL_REQUEST_AXIS_CALIBRATION', 42503, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GIMBAL_FULL_RESET', 42505, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_FLASH_BOOTLOADER', 42650, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_BATTERY_RESET', 42651, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DEBUG_TRAP', 42700, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SCRIPTING', 42701, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_SCRIPT_TIME', 42702, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_ATTITUDE_TIME', 42703, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GUIDED_CHANGE_SPEED', 43000, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GUIDED_CHANGE_ALTITUDE', 43001, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GUIDED_CHANGE_HEADING', 43002, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_EXTERNAL_POSITION_ESTIMATE', 43003, [hasLocation(true), isDestination(false)]).
enum_entry('SCRIPTING_CMD', 'SCRIPTING_CMD_REPL_START', 0, []).
enum_entry('SCRIPTING_CMD', 'SCRIPTING_CMD_REPL_STOP', 1, []).
enum_entry('SCRIPTING_CMD', 'SCRIPTING_CMD_STOP', 2, []).
enum_entry('SCRIPTING_CMD', 'SCRIPTING_CMD_STOP_AND_RESTART', 3, []).
enum_entry('LIMITS_STATE', 'LIMITS_INIT', 0, []).
enum_entry('LIMITS_STATE', 'LIMITS_DISABLED', 1, []).
enum_entry('LIMITS_STATE', 'LIMITS_ENABLED', 2, []).
enum_entry('LIMITS_STATE', 'LIMITS_TRIGGERED', 3, []).
enum_entry('LIMITS_STATE', 'LIMITS_RECOVERING', 4, []).
enum_entry('LIMITS_STATE', 'LIMITS_RECOVERED', 5, []).
enum_entry('LIMIT_MODULE', 'LIMIT_GPSLOCK', 1, []).
enum_entry('LIMIT_MODULE', 'LIMIT_GEOFENCE', 2, []).
enum_entry('LIMIT_MODULE', 'LIMIT_ALTITUDE', 4, []).
enum_entry('RALLY_FLAGS', 'FAVORABLE_WIND', 1, []).
enum_entry('RALLY_FLAGS', 'LAND_IMMEDIATELY', 2, []).
enum_entry('CAMERA_STATUS_TYPES', 'CAMERA_STATUS_TYPE_HEARTBEAT', 0, []).
enum_entry('CAMERA_STATUS_TYPES', 'CAMERA_STATUS_TYPE_TRIGGER', 1, []).
enum_entry('CAMERA_STATUS_TYPES', 'CAMERA_STATUS_TYPE_DISCONNECT', 2, []).
enum_entry('CAMERA_STATUS_TYPES', 'CAMERA_STATUS_TYPE_ERROR', 3, []).
enum_entry('CAMERA_STATUS_TYPES', 'CAMERA_STATUS_TYPE_LOWBATT', 4, []).
enum_entry('CAMERA_STATUS_TYPES', 'CAMERA_STATUS_TYPE_LOWSTORE', 5, []).
enum_entry('CAMERA_STATUS_TYPES', 'CAMERA_STATUS_TYPE_LOWSTOREV', 6, []).
enum_entry('CAMERA_FEEDBACK_FLAGS', 'CAMERA_FEEDBACK_PHOTO', 0, []).
enum_entry('CAMERA_FEEDBACK_FLAGS', 'CAMERA_FEEDBACK_VIDEO', 1, []).
enum_entry('CAMERA_FEEDBACK_FLAGS', 'CAMERA_FEEDBACK_BADEXPOSURE', 2, []).
enum_entry('CAMERA_FEEDBACK_FLAGS', 'CAMERA_FEEDBACK_CLOSEDLOOP', 3, []).
enum_entry('CAMERA_FEEDBACK_FLAGS', 'CAMERA_FEEDBACK_OPENLOOP', 4, []).
enum_entry('MAV_MODE_GIMBAL', 'MAV_MODE_GIMBAL_UNINITIALIZED', 0, []).
enum_entry('MAV_MODE_GIMBAL', 'MAV_MODE_GIMBAL_CALIBRATING_PITCH', 1, []).
enum_entry('MAV_MODE_GIMBAL', 'MAV_MODE_GIMBAL_CALIBRATING_ROLL', 2, []).
enum_entry('MAV_MODE_GIMBAL', 'MAV_MODE_GIMBAL_CALIBRATING_YAW', 3, []).
enum_entry('MAV_MODE_GIMBAL', 'MAV_MODE_GIMBAL_INITIALIZED', 4, []).
enum_entry('MAV_MODE_GIMBAL', 'MAV_MODE_GIMBAL_ACTIVE', 5, []).
enum_entry('MAV_MODE_GIMBAL', 'MAV_MODE_GIMBAL_RATE_CMD_TIMEOUT', 6, []).
enum_entry('GIMBAL_AXIS', 'GIMBAL_AXIS_YAW', 0, []).
enum_entry('GIMBAL_AXIS', 'GIMBAL_AXIS_PITCH', 1, []).
enum_entry('GIMBAL_AXIS', 'GIMBAL_AXIS_ROLL', 2, []).
enum_entry('GIMBAL_AXIS_CALIBRATION_STATUS', 'GIMBAL_AXIS_CALIBRATION_STATUS_IN_PROGRESS', 0, []).
enum_entry('GIMBAL_AXIS_CALIBRATION_STATUS', 'GIMBAL_AXIS_CALIBRATION_STATUS_SUCCEEDED', 1, []).
enum_entry('GIMBAL_AXIS_CALIBRATION_STATUS', 'GIMBAL_AXIS_CALIBRATION_STATUS_FAILED', 2, []).
enum_entry('GIMBAL_AXIS_CALIBRATION_REQUIRED', 'GIMBAL_AXIS_CALIBRATION_REQUIRED_UNKNOWN', 0, []).
enum_entry('GIMBAL_AXIS_CALIBRATION_REQUIRED', 'GIMBAL_AXIS_CALIBRATION_REQUIRED_TRUE', 1, []).
enum_entry('GIMBAL_AXIS_CALIBRATION_REQUIRED', 'GIMBAL_AXIS_CALIBRATION_REQUIRED_FALSE', 2, []).
enum_entry('GOPRO_HEARTBEAT_STATUS', 'GOPRO_HEARTBEAT_STATUS_DISCONNECTED', 0, []).
enum_entry('GOPRO_HEARTBEAT_STATUS', 'GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE', 1, []).
enum_entry('GOPRO_HEARTBEAT_STATUS', 'GOPRO_HEARTBEAT_STATUS_CONNECTED', 2, []).
enum_entry('GOPRO_HEARTBEAT_STATUS', 'GOPRO_HEARTBEAT_STATUS_ERROR', 3, []).
enum_entry('GOPRO_HEARTBEAT_FLAGS', 'GOPRO_FLAG_RECORDING', 1, []).
enum_entry('GOPRO_REQUEST_STATUS', 'GOPRO_REQUEST_SUCCESS', 0, []).
enum_entry('GOPRO_REQUEST_STATUS', 'GOPRO_REQUEST_FAILED', 1, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_POWER', 0, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_CAPTURE_MODE', 1, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_SHUTTER', 2, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_BATTERY', 3, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_MODEL', 4, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_VIDEO_SETTINGS', 5, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_LOW_LIGHT', 6, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_PHOTO_RESOLUTION', 7, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_PHOTO_BURST_RATE', 8, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_PROTUNE', 9, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_PROTUNE_WHITE_BALANCE', 10, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_PROTUNE_COLOUR', 11, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_PROTUNE_GAIN', 12, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_PROTUNE_SHARPNESS', 13, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_PROTUNE_EXPOSURE', 14, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_TIME', 15, []).
enum_entry('GOPRO_COMMAND', 'GOPRO_COMMAND_CHARGING', 16, []).
enum_entry('GOPRO_CAPTURE_MODE', 'GOPRO_CAPTURE_MODE_VIDEO', 0, []).
enum_entry('GOPRO_CAPTURE_MODE', 'GOPRO_CAPTURE_MODE_PHOTO', 1, []).
enum_entry('GOPRO_CAPTURE_MODE', 'GOPRO_CAPTURE_MODE_BURST', 2, []).
enum_entry('GOPRO_CAPTURE_MODE', 'GOPRO_CAPTURE_MODE_TIME_LAPSE', 3, []).
enum_entry('GOPRO_CAPTURE_MODE', 'GOPRO_CAPTURE_MODE_MULTI_SHOT', 4, []).
enum_entry('GOPRO_CAPTURE_MODE', 'GOPRO_CAPTURE_MODE_PLAYBACK', 5, []).
enum_entry('GOPRO_CAPTURE_MODE', 'GOPRO_CAPTURE_MODE_SETUP', 6, []).
enum_entry('GOPRO_CAPTURE_MODE', 'GOPRO_CAPTURE_MODE_UNKNOWN', 255, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_480p', 0, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_720p', 1, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_960p', 2, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_1080p', 3, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_1440p', 4, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_2_7k_17_9', 5, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_2_7k_16_9', 6, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_2_7k_4_3', 7, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_4k_16_9', 8, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_4k_17_9', 9, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_720p_SUPERVIEW', 10, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_1080p_SUPERVIEW', 11, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_2_7k_SUPERVIEW', 12, []).
enum_entry('GOPRO_RESOLUTION', 'GOPRO_RESOLUTION_4k_SUPERVIEW', 13, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_12', 0, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_15', 1, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_24', 2, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_25', 3, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_30', 4, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_48', 5, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_50', 6, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_60', 7, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_80', 8, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_90', 9, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_100', 10, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_120', 11, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_240', 12, []).
enum_entry('GOPRO_FRAME_RATE', 'GOPRO_FRAME_RATE_12_5', 13, []).
enum_entry('GOPRO_FIELD_OF_VIEW', 'GOPRO_FIELD_OF_VIEW_WIDE', 0, []).
enum_entry('GOPRO_FIELD_OF_VIEW', 'GOPRO_FIELD_OF_VIEW_MEDIUM', 1, []).
enum_entry('GOPRO_FIELD_OF_VIEW', 'GOPRO_FIELD_OF_VIEW_NARROW', 2, []).
enum_entry('GOPRO_VIDEO_SETTINGS_FLAGS', 'GOPRO_VIDEO_SETTINGS_TV_MODE', 1, []).
enum_entry('GOPRO_PHOTO_RESOLUTION', 'GOPRO_PHOTO_RESOLUTION_5MP_MEDIUM', 0, []).
enum_entry('GOPRO_PHOTO_RESOLUTION', 'GOPRO_PHOTO_RESOLUTION_7MP_MEDIUM', 1, []).
enum_entry('GOPRO_PHOTO_RESOLUTION', 'GOPRO_PHOTO_RESOLUTION_7MP_WIDE', 2, []).
enum_entry('GOPRO_PHOTO_RESOLUTION', 'GOPRO_PHOTO_RESOLUTION_10MP_WIDE', 3, []).
enum_entry('GOPRO_PHOTO_RESOLUTION', 'GOPRO_PHOTO_RESOLUTION_12MP_WIDE', 4, []).
enum_entry('GOPRO_PROTUNE_WHITE_BALANCE', 'GOPRO_PROTUNE_WHITE_BALANCE_AUTO', 0, []).
enum_entry('GOPRO_PROTUNE_WHITE_BALANCE', 'GOPRO_PROTUNE_WHITE_BALANCE_3000K', 1, []).
enum_entry('GOPRO_PROTUNE_WHITE_BALANCE', 'GOPRO_PROTUNE_WHITE_BALANCE_5500K', 2, []).
enum_entry('GOPRO_PROTUNE_WHITE_BALANCE', 'GOPRO_PROTUNE_WHITE_BALANCE_6500K', 3, []).
enum_entry('GOPRO_PROTUNE_WHITE_BALANCE', 'GOPRO_PROTUNE_WHITE_BALANCE_RAW', 4, []).
enum_entry('GOPRO_PROTUNE_COLOUR', 'GOPRO_PROTUNE_COLOUR_STANDARD', 0, []).
enum_entry('GOPRO_PROTUNE_COLOUR', 'GOPRO_PROTUNE_COLOUR_NEUTRAL', 1, []).
enum_entry('GOPRO_PROTUNE_GAIN', 'GOPRO_PROTUNE_GAIN_400', 0, []).
enum_entry('GOPRO_PROTUNE_GAIN', 'GOPRO_PROTUNE_GAIN_800', 1, []).
enum_entry('GOPRO_PROTUNE_GAIN', 'GOPRO_PROTUNE_GAIN_1600', 2, []).
enum_entry('GOPRO_PROTUNE_GAIN', 'GOPRO_PROTUNE_GAIN_3200', 3, []).
enum_entry('GOPRO_PROTUNE_GAIN', 'GOPRO_PROTUNE_GAIN_6400', 4, []).
enum_entry('GOPRO_PROTUNE_SHARPNESS', 'GOPRO_PROTUNE_SHARPNESS_LOW', 0, []).
enum_entry('GOPRO_PROTUNE_SHARPNESS', 'GOPRO_PROTUNE_SHARPNESS_MEDIUM', 1, []).
enum_entry('GOPRO_PROTUNE_SHARPNESS', 'GOPRO_PROTUNE_SHARPNESS_HIGH', 2, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_NEG_5_0', 0, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_NEG_4_5', 1, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_NEG_4_0', 2, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_NEG_3_5', 3, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_NEG_3_0', 4, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_NEG_2_5', 5, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_NEG_2_0', 6, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_NEG_1_5', 7, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_NEG_1_0', 8, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_NEG_0_5', 9, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_ZERO', 10, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_POS_0_5', 11, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_POS_1_0', 12, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_POS_1_5', 13, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_POS_2_0', 14, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_POS_2_5', 15, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_POS_3_0', 16, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_POS_3_5', 17, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_POS_4_0', 18, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_POS_4_5', 19, []).
enum_entry('GOPRO_PROTUNE_EXPOSURE', 'GOPRO_PROTUNE_EXPOSURE_POS_5_0', 20, []).
enum_entry('GOPRO_CHARGING', 'GOPRO_CHARGING_DISABLED', 0, []).
enum_entry('GOPRO_CHARGING', 'GOPRO_CHARGING_ENABLED', 1, []).
enum_entry('GOPRO_MODEL', 'GOPRO_MODEL_UNKNOWN', 0, []).
enum_entry('GOPRO_MODEL', 'GOPRO_MODEL_HERO_3_PLUS_SILVER', 1, []).
enum_entry('GOPRO_MODEL', 'GOPRO_MODEL_HERO_3_PLUS_BLACK', 2, []).
enum_entry('GOPRO_MODEL', 'GOPRO_MODEL_HERO_4_SILVER', 3, []).
enum_entry('GOPRO_MODEL', 'GOPRO_MODEL_HERO_4_BLACK', 4, []).
enum_entry('GOPRO_BURST_RATE', 'GOPRO_BURST_RATE_3_IN_1_SECOND', 0, []).
enum_entry('GOPRO_BURST_RATE', 'GOPRO_BURST_RATE_5_IN_1_SECOND', 1, []).
enum_entry('GOPRO_BURST_RATE', 'GOPRO_BURST_RATE_10_IN_1_SECOND', 2, []).
enum_entry('GOPRO_BURST_RATE', 'GOPRO_BURST_RATE_10_IN_2_SECOND', 3, []).
enum_entry('GOPRO_BURST_RATE', 'GOPRO_BURST_RATE_10_IN_3_SECOND', 4, []).
enum_entry('GOPRO_BURST_RATE', 'GOPRO_BURST_RATE_30_IN_1_SECOND', 5, []).
enum_entry('GOPRO_BURST_RATE', 'GOPRO_BURST_RATE_30_IN_2_SECOND', 6, []).
enum_entry('GOPRO_BURST_RATE', 'GOPRO_BURST_RATE_30_IN_3_SECOND', 7, []).
enum_entry('GOPRO_BURST_RATE', 'GOPRO_BURST_RATE_30_IN_6_SECOND', 8, []).
enum_entry('MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL', 'MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL_LOW', 0, []).
enum_entry('MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL', 'MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL_MIDDLE', 1, []).
enum_entry('MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL', 'MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL_HIGH', 2, []).
enum_entry('LED_CONTROL_PATTERN', 'LED_CONTROL_PATTERN_OFF', 0, []).
enum_entry('LED_CONTROL_PATTERN', 'LED_CONTROL_PATTERN_FIRMWAREUPDATE', 1, []).
enum_entry('LED_CONTROL_PATTERN', 'LED_CONTROL_PATTERN_CUSTOM', 255, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_ATTITUDE', 1, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_VELOCITY_HORIZ', 2, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_VELOCITY_VERT', 4, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_POS_HORIZ_REL', 8, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_POS_HORIZ_ABS', 16, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_POS_VERT_ABS', 32, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_POS_VERT_AGL', 64, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_CONST_POS_MODE', 128, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_PRED_POS_HORIZ_REL', 256, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_PRED_POS_HORIZ_ABS', 512, []).
enum_entry('EKF_STATUS_FLAGS', 'EKF_UNINITIALIZED', 1024, []).
enum_entry('PID_TUNING_AXIS', 'PID_TUNING_ROLL', 1, []).
enum_entry('PID_TUNING_AXIS', 'PID_TUNING_PITCH', 2, []).
enum_entry('PID_TUNING_AXIS', 'PID_TUNING_YAW', 3, []).
enum_entry('PID_TUNING_AXIS', 'PID_TUNING_ACCZ', 4, []).
enum_entry('PID_TUNING_AXIS', 'PID_TUNING_STEER', 5, []).
enum_entry('PID_TUNING_AXIS', 'PID_TUNING_LANDING', 6, []).
enum_entry('MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS', 'MAV_REMOTE_LOG_DATA_BLOCK_STOP', 2147483645, []).
enum_entry('MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS', 'MAV_REMOTE_LOG_DATA_BLOCK_START', 2147483646, []).
enum_entry('MAV_REMOTE_LOG_DATA_BLOCK_STATUSES', 'MAV_REMOTE_LOG_DATA_BLOCK_NACK', 0, []).
enum_entry('MAV_REMOTE_LOG_DATA_BLOCK_STATUSES', 'MAV_REMOTE_LOG_DATA_BLOCK_ACK', 1, []).
enum_entry('DEVICE_OP_BUSTYPE', 'DEVICE_OP_BUSTYPE_I2C', 0, []).
enum_entry('DEVICE_OP_BUSTYPE', 'DEVICE_OP_BUSTYPE_SPI', 1, []).
enum_entry('DEEPSTALL_STAGE', 'DEEPSTALL_STAGE_FLY_TO_LANDING', 0, []).
enum_entry('DEEPSTALL_STAGE', 'DEEPSTALL_STAGE_ESTIMATE_WIND', 1, []).
enum_entry('DEEPSTALL_STAGE', 'DEEPSTALL_STAGE_WAIT_FOR_BREAKOUT', 2, []).
enum_entry('DEEPSTALL_STAGE', 'DEEPSTALL_STAGE_FLY_TO_ARC', 3, []).
enum_entry('DEEPSTALL_STAGE', 'DEEPSTALL_STAGE_ARC', 4, []).
enum_entry('DEEPSTALL_STAGE', 'DEEPSTALL_STAGE_APPROACH', 5, []).
enum_entry('DEEPSTALL_STAGE', 'DEEPSTALL_STAGE_LAND', 6, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_MANUAL', 0, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_CIRCLE', 1, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_STABILIZE', 2, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_TRAINING', 3, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_ACRO', 4, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_FLY_BY_WIRE_A', 5, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_FLY_BY_WIRE_B', 6, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_CRUISE', 7, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_AUTOTUNE', 8, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_AUTO', 10, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_RTL', 11, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_LOITER', 12, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_TAKEOFF', 13, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_AVOID_ADSB', 14, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_GUIDED', 15, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_INITIALIZING', 16, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_QSTABILIZE', 17, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_QHOVER', 18, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_QLOITER', 19, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_QLAND', 20, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_QRTL', 21, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_QAUTOTUNE', 22, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_QACRO', 23, []).
enum_entry('PLANE_MODE', 'PLANE_MODE_THERMAL', 24, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_STABILIZE', 0, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_ACRO', 1, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_ALT_HOLD', 2, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_AUTO', 3, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_GUIDED', 4, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_LOITER', 5, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_RTL', 6, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_CIRCLE', 7, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_LAND', 9, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_DRIFT', 11, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_SPORT', 13, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_FLIP', 14, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_AUTOTUNE', 15, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_POSHOLD', 16, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_BRAKE', 17, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_THROW', 18, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_AVOID_ADSB', 19, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_GUIDED_NOGPS', 20, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_SMART_RTL', 21, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_FLOWHOLD', 22, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_FOLLOW', 23, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_ZIGZAG', 24, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_SYSTEMID', 25, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_AUTOROTATE', 26, []).
enum_entry('COPTER_MODE', 'COPTER_MODE_AUTO_RTL', 27, []).
enum_entry('SUB_MODE', 'SUB_MODE_STABILIZE', 0, []).
enum_entry('SUB_MODE', 'SUB_MODE_ACRO', 1, []).
enum_entry('SUB_MODE', 'SUB_MODE_ALT_HOLD', 2, []).
enum_entry('SUB_MODE', 'SUB_MODE_AUTO', 3, []).
enum_entry('SUB_MODE', 'SUB_MODE_GUIDED', 4, []).
enum_entry('SUB_MODE', 'SUB_MODE_CIRCLE', 7, []).
enum_entry('SUB_MODE', 'SUB_MODE_SURFACE', 9, []).
enum_entry('SUB_MODE', 'SUB_MODE_POSHOLD', 16, []).
enum_entry('SUB_MODE', 'SUB_MODE_MANUAL', 19, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_MANUAL', 0, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_ACRO', 1, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_STEERING', 3, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_HOLD', 4, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_LOITER', 5, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_FOLLOW', 6, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_SIMPLE', 7, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_AUTO', 10, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_RTL', 11, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_SMART_RTL', 12, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_GUIDED', 15, []).
enum_entry('ROVER_MODE', 'ROVER_MODE_INITIALIZING', 16, []).
enum_entry('TRACKER_MODE', 'TRACKER_MODE_MANUAL', 0, []).
enum_entry('TRACKER_MODE', 'TRACKER_MODE_STOP', 1, []).
enum_entry('TRACKER_MODE', 'TRACKER_MODE_SCAN', 2, []).
enum_entry('TRACKER_MODE', 'TRACKER_MODE_SERVO_TEST', 3, []).
enum_entry('TRACKER_MODE', 'TRACKER_MODE_AUTO', 10, []).
enum_entry('TRACKER_MODE', 'TRACKER_MODE_INITIALIZING', 16, []).
enum_entry('OSD_PARAM_CONFIG_TYPE', 'OSD_PARAM_NONE', 0, []).
enum_entry('OSD_PARAM_CONFIG_TYPE', 'OSD_PARAM_SERIAL_PROTOCOL', 1, []).
enum_entry('OSD_PARAM_CONFIG_TYPE', 'OSD_PARAM_SERVO_FUNCTION', 2, []).
enum_entry('OSD_PARAM_CONFIG_TYPE', 'OSD_PARAM_AUX_FUNCTION', 3, []).
enum_entry('OSD_PARAM_CONFIG_TYPE', 'OSD_PARAM_FLIGHT_MODE', 4, []).
enum_entry('OSD_PARAM_CONFIG_TYPE', 'OSD_PARAM_FAILSAFE_ACTION', 5, []).
enum_entry('OSD_PARAM_CONFIG_TYPE', 'OSD_PARAM_FAILSAFE_ACTION_1', 6, []).
enum_entry('OSD_PARAM_CONFIG_TYPE', 'OSD_PARAM_FAILSAFE_ACTION_2', 7, []).
enum_entry('OSD_PARAM_CONFIG_TYPE', 'OSD_PARAM_NUM_TYPES', 8, []).
enum_entry('OSD_PARAM_CONFIG_ERROR', 'OSD_PARAM_SUCCESS', 0, []).
enum_entry('OSD_PARAM_CONFIG_ERROR', 'OSD_PARAM_INVALID_SCREEN', 1, []).
enum_entry('OSD_PARAM_CONFIG_ERROR', 'OSD_PARAM_INVALID_PARAMETER_INDEX', 2, []).
enum_entry('OSD_PARAM_CONFIG_ERROR', 'OSD_PARAM_INVALID_PARAMETER', 3, []).
enum_entry('MAV_CMD', 'MAV_CMD_RESET_MPPT', 40001, []).
enum_entry('MAV_CMD', 'MAV_CMD_PAYLOAD_CONTROL', 40002, []).
enum_entry('GSM_LINK_TYPE', 'GSM_LINK_TYPE_NONE', 0, []).
enum_entry('GSM_LINK_TYPE', 'GSM_LINK_TYPE_UNKNOWN', 1, []).
enum_entry('GSM_LINK_TYPE', 'GSM_LINK_TYPE_2G', 2, []).
enum_entry('GSM_LINK_TYPE', 'GSM_LINK_TYPE_3G', 3, []).
enum_entry('GSM_LINK_TYPE', 'GSM_LINK_TYPE_4G', 4, []).
enum_entry('GSM_MODEM_TYPE', 'GSM_MODEM_TYPE_UNKNOWN', 0, []).
enum_entry('GSM_MODEM_TYPE', 'GSM_MODEM_TYPE_HUAWEI_E3372', 1, []).
enum_entry('FIRMWARE_VERSION_TYPE', 'FIRMWARE_VERSION_TYPE_DEV', 0, []).
enum_entry('FIRMWARE_VERSION_TYPE', 'FIRMWARE_VERSION_TYPE_ALPHA', 64, []).
enum_entry('FIRMWARE_VERSION_TYPE', 'FIRMWARE_VERSION_TYPE_BETA', 128, []).
enum_entry('FIRMWARE_VERSION_TYPE', 'FIRMWARE_VERSION_TYPE_RC', 192, []).
enum_entry('FIRMWARE_VERSION_TYPE', 'FIRMWARE_VERSION_TYPE_OFFICIAL', 255, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_GPS', 1, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE', 2, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_ABSOLUTE_PRESSURE', 4, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_3D_ACCEL', 8, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_3D_GYRO', 16, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_3D_MAG', 32, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_TERRAIN', 64, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_BATTERY', 128, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_RC_RECEIVER', 256, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_OFFBOARD_LINK', 512, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_ENGINE', 1024, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_GEOFENCE', 2048, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_ESTIMATOR', 4096, []).
enum_entry('HL_FAILURE_FLAG', 'HL_FAILURE_FLAG_MISSION', 8192, []).
enum_entry('MAV_GOTO', 'MAV_GOTO_DO_HOLD', 0, []).
enum_entry('MAV_GOTO', 'MAV_GOTO_DO_CONTINUE', 1, []).
enum_entry('MAV_GOTO', 'MAV_GOTO_HOLD_AT_CURRENT_POSITION', 2, []).
enum_entry('MAV_GOTO', 'MAV_GOTO_HOLD_AT_SPECIFIED_POSITION', 3, []).
enum_entry('MAV_MODE', 'MAV_MODE_PREFLIGHT', 0, []).
enum_entry('MAV_MODE', 'MAV_MODE_STABILIZE_DISARMED', 80, []).
enum_entry('MAV_MODE', 'MAV_MODE_STABILIZE_ARMED', 208, []).
enum_entry('MAV_MODE', 'MAV_MODE_MANUAL_DISARMED', 64, []).
enum_entry('MAV_MODE', 'MAV_MODE_MANUAL_ARMED', 192, []).
enum_entry('MAV_MODE', 'MAV_MODE_GUIDED_DISARMED', 88, []).
enum_entry('MAV_MODE', 'MAV_MODE_GUIDED_ARMED', 216, []).
enum_entry('MAV_MODE', 'MAV_MODE_AUTO_DISARMED', 92, []).
enum_entry('MAV_MODE', 'MAV_MODE_AUTO_ARMED', 220, []).
enum_entry('MAV_MODE', 'MAV_MODE_TEST_DISARMED', 66, []).
enum_entry('MAV_MODE', 'MAV_MODE_TEST_ARMED', 194, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_3D_GYRO', 1, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_3D_ACCEL', 2, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_3D_MAG', 4, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE', 8, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE', 16, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_GPS', 32, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW', 64, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_VISION_POSITION', 128, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_LASER_POSITION', 256, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH', 512, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL', 1024, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION', 2048, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_YAW_POSITION', 4096, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL', 8192, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL', 16384, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS', 32768, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_RC_RECEIVER', 65536, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_3D_GYRO2', 131072, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_3D_ACCEL2', 262144, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_3D_MAG2', 524288, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_GEOFENCE', 1048576, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_AHRS', 2097152, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_TERRAIN', 4194304, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_REVERSE_MOTOR', 8388608, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_LOGGING', 16777216, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_BATTERY', 33554432, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_PROXIMITY', 67108864, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_SATCOM', 134217728, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_PREARM_CHECK', 268435456, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_OBSTACLE_AVOIDANCE', 536870912, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_SENSOR_PROPULSION', 1073741824, []).
enum_entry('MAV_SYS_STATUS_SENSOR', 'MAV_SYS_STATUS_EXTENSION_USED', 2147483648, []).
enum_entry('MAV_SYS_STATUS_SENSOR_EXTENDED', 'MAV_SYS_STATUS_RECOVERY_SYSTEM', 1, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_GLOBAL', 0, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_LOCAL_NED', 1, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_MISSION', 2, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_GLOBAL_RELATIVE_ALT', 3, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_LOCAL_ENU', 4, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_GLOBAL_INT', 5, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_GLOBAL_RELATIVE_ALT_INT', 6, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_LOCAL_OFFSET_NED', 7, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_BODY_NED', 8, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_BODY_OFFSET_NED', 9, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_GLOBAL_TERRAIN_ALT', 10, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_GLOBAL_TERRAIN_ALT_INT', 11, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_BODY_FRD', 12, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_RESERVED_13', 13, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_RESERVED_14', 14, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_RESERVED_15', 15, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_RESERVED_16', 16, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_RESERVED_17', 17, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_RESERVED_18', 18, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_RESERVED_19', 19, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_LOCAL_FRD', 20, []).
enum_entry('MAV_FRAME', 'MAV_FRAME_LOCAL_FLU', 21, []).
enum_entry('MAVLINK_DATA_STREAM_TYPE', 'MAVLINK_DATA_STREAM_IMG_JPEG', 0, []).
enum_entry('MAVLINK_DATA_STREAM_TYPE', 'MAVLINK_DATA_STREAM_IMG_BMP', 1, []).
enum_entry('MAVLINK_DATA_STREAM_TYPE', 'MAVLINK_DATA_STREAM_IMG_RAW8U', 2, []).
enum_entry('MAVLINK_DATA_STREAM_TYPE', 'MAVLINK_DATA_STREAM_IMG_RAW32U', 3, []).
enum_entry('MAVLINK_DATA_STREAM_TYPE', 'MAVLINK_DATA_STREAM_IMG_PGM', 4, []).
enum_entry('MAVLINK_DATA_STREAM_TYPE', 'MAVLINK_DATA_STREAM_IMG_PNG', 5, []).
enum_entry('FENCE_ACTION', 'FENCE_ACTION_NONE', 0, []).
enum_entry('FENCE_ACTION', 'FENCE_ACTION_GUIDED', 1, []).
enum_entry('FENCE_ACTION', 'FENCE_ACTION_REPORT', 2, []).
enum_entry('FENCE_ACTION', 'FENCE_ACTION_GUIDED_THR_PASS', 3, []).
enum_entry('FENCE_ACTION', 'FENCE_ACTION_RTL', 4, []).
enum_entry('FENCE_ACTION', 'FENCE_ACTION_HOLD', 5, []).
enum_entry('FENCE_ACTION', 'FENCE_ACTION_TERMINATE', 6, []).
enum_entry('FENCE_ACTION', 'FENCE_ACTION_LAND', 7, []).
enum_entry('FENCE_BREACH', 'FENCE_BREACH_NONE', 0, []).
enum_entry('FENCE_BREACH', 'FENCE_BREACH_MINALT', 1, []).
enum_entry('FENCE_BREACH', 'FENCE_BREACH_MAXALT', 2, []).
enum_entry('FENCE_BREACH', 'FENCE_BREACH_BOUNDARY', 3, []).
enum_entry('FENCE_MITIGATE', 'FENCE_MITIGATE_UNKNOWN', 0, []).
enum_entry('FENCE_MITIGATE', 'FENCE_MITIGATE_NONE', 1, []).
enum_entry('FENCE_MITIGATE', 'FENCE_MITIGATE_VEL_LIMIT', 2, []).
enum_entry('MAV_MOUNT_MODE', 'MAV_MOUNT_MODE_RETRACT', 0, []).
enum_entry('MAV_MOUNT_MODE', 'MAV_MOUNT_MODE_NEUTRAL', 1, []).
enum_entry('MAV_MOUNT_MODE', 'MAV_MOUNT_MODE_MAVLINK_TARGETING', 2, []).
enum_entry('MAV_MOUNT_MODE', 'MAV_MOUNT_MODE_RC_TARGETING', 3, []).
enum_entry('MAV_MOUNT_MODE', 'MAV_MOUNT_MODE_GPS_POINT', 4, []).
enum_entry('MAV_MOUNT_MODE', 'MAV_MOUNT_MODE_SYSID_TARGET', 5, []).
enum_entry('MAV_MOUNT_MODE', 'MAV_MOUNT_MODE_HOME_LOCATION', 6, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT', 1, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL', 2, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS', 4, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW', 8, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK', 16, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS', 32, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW', 64, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK', 128, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS', 256, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW', 512, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK', 1024, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW', 2048, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME', 4096, []).
enum_entry('GIMBAL_DEVICE_CAP_FLAGS', 'GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS', 8192, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT', 1, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL', 2, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS', 4, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW', 8, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK', 16, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS', 32, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW', 64, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK', 128, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS', 256, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW', 512, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK', 1024, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW', 2048, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME', 4096, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS', 8192, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL', 65536, []).
enum_entry('GIMBAL_MANAGER_CAP_FLAGS', 'GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL', 131072, []).
enum_entry('GIMBAL_DEVICE_FLAGS', 'GIMBAL_DEVICE_FLAGS_RETRACT', 1, []).
enum_entry('GIMBAL_DEVICE_FLAGS', 'GIMBAL_DEVICE_FLAGS_NEUTRAL', 2, []).
enum_entry('GIMBAL_DEVICE_FLAGS', 'GIMBAL_DEVICE_FLAGS_ROLL_LOCK', 4, []).
enum_entry('GIMBAL_DEVICE_FLAGS', 'GIMBAL_DEVICE_FLAGS_PITCH_LOCK', 8, []).
enum_entry('GIMBAL_DEVICE_FLAGS', 'GIMBAL_DEVICE_FLAGS_YAW_LOCK', 16, []).
enum_entry('GIMBAL_DEVICE_FLAGS', 'GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME', 32, []).
enum_entry('GIMBAL_DEVICE_FLAGS', 'GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME', 64, []).
enum_entry('GIMBAL_DEVICE_FLAGS', 'GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME', 128, []).
enum_entry('GIMBAL_DEVICE_FLAGS', 'GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE', 256, []).
enum_entry('GIMBAL_DEVICE_FLAGS', 'GIMBAL_DEVICE_FLAGS_RC_MIXED', 512, []).
enum_entry('GIMBAL_MANAGER_FLAGS', 'GIMBAL_MANAGER_FLAGS_RETRACT', 1, []).
enum_entry('GIMBAL_MANAGER_FLAGS', 'GIMBAL_MANAGER_FLAGS_NEUTRAL', 2, []).
enum_entry('GIMBAL_MANAGER_FLAGS', 'GIMBAL_MANAGER_FLAGS_ROLL_LOCK', 4, []).
enum_entry('GIMBAL_MANAGER_FLAGS', 'GIMBAL_MANAGER_FLAGS_PITCH_LOCK', 8, []).
enum_entry('GIMBAL_MANAGER_FLAGS', 'GIMBAL_MANAGER_FLAGS_YAW_LOCK', 16, []).
enum_entry('GIMBAL_MANAGER_FLAGS', 'GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME', 32, []).
enum_entry('GIMBAL_MANAGER_FLAGS', 'GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME', 64, []).
enum_entry('GIMBAL_MANAGER_FLAGS', 'GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME', 128, []).
enum_entry('GIMBAL_MANAGER_FLAGS', 'GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE', 256, []).
enum_entry('GIMBAL_MANAGER_FLAGS', 'GIMBAL_MANAGER_FLAGS_RC_MIXED', 512, []).
enum_entry('GIMBAL_DEVICE_ERROR_FLAGS', 'GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT', 1, []).
enum_entry('GIMBAL_DEVICE_ERROR_FLAGS', 'GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT', 2, []).
enum_entry('GIMBAL_DEVICE_ERROR_FLAGS', 'GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT', 4, []).
enum_entry('GIMBAL_DEVICE_ERROR_FLAGS', 'GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR', 8, []).
enum_entry('GIMBAL_DEVICE_ERROR_FLAGS', 'GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR', 16, []).
enum_entry('GIMBAL_DEVICE_ERROR_FLAGS', 'GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR', 32, []).
enum_entry('GIMBAL_DEVICE_ERROR_FLAGS', 'GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR', 64, []).
enum_entry('GIMBAL_DEVICE_ERROR_FLAGS', 'GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR', 128, []).
enum_entry('GIMBAL_DEVICE_ERROR_FLAGS', 'GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING', 256, []).
enum_entry('GIMBAL_DEVICE_ERROR_FLAGS', 'GIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER', 512, []).
enum_entry('GRIPPER_ACTIONS', 'GRIPPER_ACTION_RELEASE', 0, []).
enum_entry('GRIPPER_ACTIONS', 'GRIPPER_ACTION_GRAB', 1, []).
enum_entry('WINCH_ACTIONS', 'WINCH_RELAXED', 0, []).
enum_entry('WINCH_ACTIONS', 'WINCH_RELATIVE_LENGTH_CONTROL', 1, []).
enum_entry('WINCH_ACTIONS', 'WINCH_RATE_CONTROL', 2, []).
enum_entry('WINCH_ACTIONS', 'WINCH_LOCK', 3, []).
enum_entry('WINCH_ACTIONS', 'WINCH_DELIVER', 4, []).
enum_entry('WINCH_ACTIONS', 'WINCH_HOLD', 5, []).
enum_entry('WINCH_ACTIONS', 'WINCH_RETRACT', 6, []).
enum_entry('WINCH_ACTIONS', 'WINCH_LOAD_LINE', 7, []).
enum_entry('WINCH_ACTIONS', 'WINCH_ABANDON_LINE', 8, []).
enum_entry('WINCH_ACTIONS', 'WINCH_LOAD_PAYLOAD', 9, []).
enum_entry('UAVCAN_NODE_HEALTH', 'UAVCAN_NODE_HEALTH_OK', 0, []).
enum_entry('UAVCAN_NODE_HEALTH', 'UAVCAN_NODE_HEALTH_WARNING', 1, []).
enum_entry('UAVCAN_NODE_HEALTH', 'UAVCAN_NODE_HEALTH_ERROR', 2, []).
enum_entry('UAVCAN_NODE_HEALTH', 'UAVCAN_NODE_HEALTH_CRITICAL', 3, []).
enum_entry('UAVCAN_NODE_MODE', 'UAVCAN_NODE_MODE_OPERATIONAL', 0, []).
enum_entry('UAVCAN_NODE_MODE', 'UAVCAN_NODE_MODE_INITIALIZATION', 1, []).
enum_entry('UAVCAN_NODE_MODE', 'UAVCAN_NODE_MODE_MAINTENANCE', 2, []).
enum_entry('UAVCAN_NODE_MODE', 'UAVCAN_NODE_MODE_SOFTWARE_UPDATE', 3, []).
enum_entry('UAVCAN_NODE_MODE', 'UAVCAN_NODE_MODE_OFFLINE', 7, []).
enum_entry('ESC_CONNECTION_TYPE', 'ESC_CONNECTION_TYPE_PPM', 0, []).
enum_entry('ESC_CONNECTION_TYPE', 'ESC_CONNECTION_TYPE_SERIAL', 1, []).
enum_entry('ESC_CONNECTION_TYPE', 'ESC_CONNECTION_TYPE_ONESHOT', 2, []).
enum_entry('ESC_CONNECTION_TYPE', 'ESC_CONNECTION_TYPE_I2C', 3, []).
enum_entry('ESC_CONNECTION_TYPE', 'ESC_CONNECTION_TYPE_CAN', 4, []).
enum_entry('ESC_CONNECTION_TYPE', 'ESC_CONNECTION_TYPE_DSHOT', 5, []).
enum_entry('ESC_FAILURE_FLAGS', 'ESC_FAILURE_NONE', 0, []).
enum_entry('ESC_FAILURE_FLAGS', 'ESC_FAILURE_OVER_CURRENT', 1, []).
enum_entry('ESC_FAILURE_FLAGS', 'ESC_FAILURE_OVER_VOLTAGE', 2, []).
enum_entry('ESC_FAILURE_FLAGS', 'ESC_FAILURE_OVER_TEMPERATURE', 4, []).
enum_entry('ESC_FAILURE_FLAGS', 'ESC_FAILURE_OVER_RPM', 8, []).
enum_entry('ESC_FAILURE_FLAGS', 'ESC_FAILURE_INCONSISTENT_CMD', 16, []).
enum_entry('ESC_FAILURE_FLAGS', 'ESC_FAILURE_MOTOR_STUCK', 32, []).
enum_entry('ESC_FAILURE_FLAGS', 'ESC_FAILURE_GENERIC', 64, []).
enum_entry('STORAGE_STATUS', 'STORAGE_STATUS_EMPTY', 0, []).
enum_entry('STORAGE_STATUS', 'STORAGE_STATUS_UNFORMATTED', 1, []).
enum_entry('STORAGE_STATUS', 'STORAGE_STATUS_READY', 2, []).
enum_entry('STORAGE_STATUS', 'STORAGE_STATUS_NOT_SUPPORTED', 3, []).
enum_entry('STORAGE_TYPE', 'STORAGE_TYPE_UNKNOWN', 0, []).
enum_entry('STORAGE_TYPE', 'STORAGE_TYPE_USB_STICK', 1, []).
enum_entry('STORAGE_TYPE', 'STORAGE_TYPE_SD', 2, []).
enum_entry('STORAGE_TYPE', 'STORAGE_TYPE_MICROSD', 3, []).
enum_entry('STORAGE_TYPE', 'STORAGE_TYPE_CF', 4, []).
enum_entry('STORAGE_TYPE', 'STORAGE_TYPE_CFE', 5, []).
enum_entry('STORAGE_TYPE', 'STORAGE_TYPE_XQD', 6, []).
enum_entry('STORAGE_TYPE', 'STORAGE_TYPE_HD', 7, []).
enum_entry('STORAGE_TYPE', 'STORAGE_TYPE_OTHER', 254, []).
enum_entry('STORAGE_USAGE_FLAG', 'STORAGE_USAGE_FLAG_SET', 1, []).
enum_entry('STORAGE_USAGE_FLAG', 'STORAGE_USAGE_FLAG_PHOTO', 2, []).
enum_entry('STORAGE_USAGE_FLAG', 'STORAGE_USAGE_FLAG_VIDEO', 4, []).
enum_entry('STORAGE_USAGE_FLAG', 'STORAGE_USAGE_FLAG_LOGS', 8, []).
enum_entry('ORBIT_YAW_BEHAVIOUR', 'ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER', 0, []).
enum_entry('ORBIT_YAW_BEHAVIOUR', 'ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING', 1, []).
enum_entry('ORBIT_YAW_BEHAVIOUR', 'ORBIT_YAW_BEHAVIOUR_UNCONTROLLED', 2, []).
enum_entry('ORBIT_YAW_BEHAVIOUR', 'ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE', 3, []).
enum_entry('ORBIT_YAW_BEHAVIOUR', 'ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED', 4, []).
enum_entry('WIFI_CONFIG_AP_RESPONSE', 'WIFI_CONFIG_AP_RESPONSE_UNDEFINED', 0, []).
enum_entry('WIFI_CONFIG_AP_RESPONSE', 'WIFI_CONFIG_AP_RESPONSE_ACCEPTED', 1, []).
enum_entry('WIFI_CONFIG_AP_RESPONSE', 'WIFI_CONFIG_AP_RESPONSE_REJECTED', 2, []).
enum_entry('WIFI_CONFIG_AP_RESPONSE', 'WIFI_CONFIG_AP_RESPONSE_MODE_ERROR', 3, []).
enum_entry('WIFI_CONFIG_AP_RESPONSE', 'WIFI_CONFIG_AP_RESPONSE_SSID_ERROR', 4, []).
enum_entry('WIFI_CONFIG_AP_RESPONSE', 'WIFI_CONFIG_AP_RESPONSE_PASSWORD_ERROR', 5, []).
enum_entry('CELLULAR_CONFIG_RESPONSE', 'CELLULAR_CONFIG_RESPONSE_ACCEPTED', 0, []).
enum_entry('CELLULAR_CONFIG_RESPONSE', 'CELLULAR_CONFIG_RESPONSE_APN_ERROR', 1, []).
enum_entry('CELLULAR_CONFIG_RESPONSE', 'CELLULAR_CONFIG_RESPONSE_PIN_ERROR', 2, []).
enum_entry('CELLULAR_CONFIG_RESPONSE', 'CELLULAR_CONFIG_RESPONSE_REJECTED', 3, []).
enum_entry('CELLULAR_CONFIG_RESPONSE', 'CELLULAR_CONFIG_BLOCKED_PUK_REQUIRED', 4, []).
enum_entry('WIFI_CONFIG_AP_MODE', 'WIFI_CONFIG_AP_MODE_UNDEFINED', 0, []).
enum_entry('WIFI_CONFIG_AP_MODE', 'WIFI_CONFIG_AP_MODE_AP', 1, []).
enum_entry('WIFI_CONFIG_AP_MODE', 'WIFI_CONFIG_AP_MODE_STATION', 2, []).
enum_entry('WIFI_CONFIG_AP_MODE', 'WIFI_CONFIG_AP_MODE_DISABLED', 3, []).
enum_entry('COMP_METADATA_TYPE', 'COMP_METADATA_TYPE_GENERAL', 0, []).
enum_entry('COMP_METADATA_TYPE', 'COMP_METADATA_TYPE_PARAMETER', 1, []).
enum_entry('COMP_METADATA_TYPE', 'COMP_METADATA_TYPE_COMMANDS', 2, []).
enum_entry('COMP_METADATA_TYPE', 'COMP_METADATA_TYPE_PERIPHERALS', 3, []).
enum_entry('COMP_METADATA_TYPE', 'COMP_METADATA_TYPE_EVENTS', 4, []).
enum_entry('COMP_METADATA_TYPE', 'COMP_METADATA_TYPE_ACTUATORS', 5, []).
enum_entry('ACTUATOR_CONFIGURATION', 'ACTUATOR_CONFIGURATION_NONE', 0, []).
enum_entry('ACTUATOR_CONFIGURATION', 'ACTUATOR_CONFIGURATION_BEEP', 1, []).
enum_entry('ACTUATOR_CONFIGURATION', 'ACTUATOR_CONFIGURATION_3D_MODE_ON', 2, []).
enum_entry('ACTUATOR_CONFIGURATION', 'ACTUATOR_CONFIGURATION_3D_MODE_OFF', 3, []).
enum_entry('ACTUATOR_CONFIGURATION', 'ACTUATOR_CONFIGURATION_SPIN_DIRECTION1', 4, []).
enum_entry('ACTUATOR_CONFIGURATION', 'ACTUATOR_CONFIGURATION_SPIN_DIRECTION2', 5, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_NONE', 0, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR1', 1, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR2', 2, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR3', 3, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR4', 4, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR5', 5, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR6', 6, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR7', 7, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR8', 8, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR9', 9, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR10', 10, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR11', 11, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR12', 12, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR13', 13, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR14', 14, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR15', 15, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_MOTOR16', 16, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO1', 33, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO2', 34, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO3', 35, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO4', 36, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO5', 37, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO6', 38, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO7', 39, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO8', 40, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO9', 41, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO10', 42, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO11', 43, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO12', 44, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO13', 45, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO14', 46, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO15', 47, []).
enum_entry('ACTUATOR_OUTPUT_FUNCTION', 'ACTUATOR_OUTPUT_FUNCTION_SERVO16', 48, []).
enum_entry('AUTOTUNE_AXIS', 'AUTOTUNE_AXIS_DEFAULT', 0, []).
enum_entry('AUTOTUNE_AXIS', 'AUTOTUNE_AXIS_ROLL', 1, []).
enum_entry('AUTOTUNE_AXIS', 'AUTOTUNE_AXIS_PITCH', 2, []).
enum_entry('AUTOTUNE_AXIS', 'AUTOTUNE_AXIS_YAW', 4, []).
enum_entry('PREFLIGHT_STORAGE_PARAMETER_ACTION', 'PARAM_READ_PERSISTENT', 0, []).
enum_entry('PREFLIGHT_STORAGE_PARAMETER_ACTION', 'PARAM_WRITE_PERSISTENT', 1, []).
enum_entry('PREFLIGHT_STORAGE_PARAMETER_ACTION', 'PARAM_RESET_CONFIG_DEFAULT', 2, []).
enum_entry('PREFLIGHT_STORAGE_PARAMETER_ACTION', 'PARAM_RESET_SENSOR_DEFAULT', 3, []).
enum_entry('PREFLIGHT_STORAGE_PARAMETER_ACTION', 'PARAM_RESET_ALL_DEFAULT', 4, []).
enum_entry('PREFLIGHT_STORAGE_MISSION_ACTION', 'MISSION_READ_PERSISTENT', 0, []).
enum_entry('PREFLIGHT_STORAGE_MISSION_ACTION', 'MISSION_WRITE_PERSISTENT', 1, []).
enum_entry('PREFLIGHT_STORAGE_MISSION_ACTION', 'MISSION_RESET_DEFAULT', 2, []).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_WAYPOINT', 16, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_LOITER_UNLIM', 17, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_LOITER_TURNS', 18, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_LOITER_TIME', 19, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_RETURN_TO_LAUNCH', 20, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_LAND', 21, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_TAKEOFF', 22, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_LAND_LOCAL', 23, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_TAKEOFF_LOCAL', 24, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_FOLLOW', 25, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT', 30, [hasLocation(false), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_LOITER_TO_ALT', 31, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_FOLLOW', 32, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_FOLLOW_REPOSITION', 33, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_ORBIT', 34, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_ROI', 80, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_PATHPLANNING', 81, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_SPLINE_WAYPOINT', 82, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_VTOL_TAKEOFF', 84, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_VTOL_LAND', 85, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_GUIDED_ENABLE', 92, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_DELAY', 93, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_PAYLOAD_PLACE', 94, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_LAST', 95, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CONDITION_DELAY', 112, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CONDITION_CHANGE_ALT', 113, [hasLocation(false), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_CONDITION_DISTANCE', 114, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CONDITION_YAW', 115, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CONDITION_LAST', 159, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_MODE', 176, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_JUMP', 177, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_CHANGE_SPEED', 178, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_HOME', 179, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_PARAMETER', 180, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_RELAY', 181, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_REPEAT_RELAY', 182, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_SERVO', 183, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_REPEAT_SERVO', 184, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_FLIGHTTERMINATION', 185, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_CHANGE_ALTITUDE', 186, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_ACTUATOR', 187, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_LAND_START', 189, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_RALLY_LAND', 190, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_GO_AROUND', 191, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_REPOSITION', 192, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_PAUSE_CONTINUE', 193, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_REVERSE', 194, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_ROI_LOCATION', 195, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET', 196, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_ROI_NONE', 197, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_ROI_SYSID', 198, []).
enum_entry('MAV_CMD', 'MAV_CMD_DO_CONTROL_VIDEO', 200, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_ROI', 201, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_DIGICAM_CONFIGURE', 202, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_DIGICAM_CONTROL', 203, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_MOUNT_CONFIGURE', 204, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_MOUNT_CONTROL', 205, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_CAM_TRIGG_DIST', 206, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_FENCE_ENABLE', 207, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_PARACHUTE', 208, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_MOTOR_TEST', 209, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_INVERTED_FLIGHT', 210, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_GRIPPER', 211, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_AUTOTUNE_ENABLE', 212, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_SET_YAW_SPEED', 213, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL', 214, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_MOUNT_CONTROL_QUAT', 220, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_GUIDED_MASTER', 221, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_GUIDED_LIMITS', 222, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_ENGINE_CONTROL', 223, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_MISSION_CURRENT', 224, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_LAST', 240, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PREFLIGHT_CALIBRATION', 241, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS', 242, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PREFLIGHT_UAVCAN', 243, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PREFLIGHT_STORAGE', 245, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN', 246, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_OVERRIDE_GOTO', 252, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_OBLIQUE_SURVEY', 260, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_MISSION_START', 300, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_ACTUATOR_TEST', 310, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CONFIGURE_ACTUATOR', 311, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_COMPONENT_ARM_DISARM', 400, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_RUN_PREARM_CHECKS', 401, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_ILLUMINATOR_ON_OFF', 405, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GET_HOME_POSITION', 410, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_INJECT_FAILURE', 420, []).
enum_entry('MAV_CMD', 'MAV_CMD_START_RX_PAIR', 500, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GET_MESSAGE_INTERVAL', 510, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_MESSAGE_INTERVAL', 511, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_MESSAGE', 512, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_PROTOCOL_VERSION', 519, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES', 520, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_CAMERA_INFORMATION', 521, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_CAMERA_SETTINGS', 522, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_STORAGE_INFORMATION', 525, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_STORAGE_FORMAT', 526, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS', 527, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_FLIGHT_INFORMATION', 528, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_RESET_CAMERA_SETTINGS', 529, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_CAMERA_MODE', 530, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_CAMERA_ZOOM', 531, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_CAMERA_FOCUS', 532, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_STORAGE_USAGE', 533, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_JUMP_TAG', 600, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_JUMP_TAG', 601, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW', 1000, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE', 1001, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_IMAGE_START_CAPTURE', 2000, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_IMAGE_STOP_CAPTURE', 2001, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE', 2002, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_TRIGGER_CONTROL', 2003, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CAMERA_TRACK_POINT', 2004, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CAMERA_TRACK_RECTANGLE', 2005, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CAMERA_STOP_TRACKING', 2010, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_VIDEO_START_CAPTURE', 2500, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_VIDEO_STOP_CAPTURE', 2501, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_VIDEO_START_STREAMING', 2502, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_VIDEO_STOP_STREAMING', 2503, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION', 2504, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_REQUEST_VIDEO_STREAM_STATUS', 2505, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_LOGGING_START', 2510, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_LOGGING_STOP', 2511, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_AIRFRAME_CONFIGURATION', 2520, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CONTROL_HIGH_LATENCY', 2600, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PANORAMA_CREATE', 2800, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_VTOL_TRANSITION', 3000, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_ARM_AUTHORIZATION_REQUEST', 3001, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_GUIDED_SUBMODE_STANDARD', 4000, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE', 4001, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CONDITION_GATE', 4501, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_FENCE_RETURN_POINT', 5000, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION', 5001, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION', 5002, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION', 5003, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION', 5004, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_NAV_RALLY_POINT', 5100, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_UAVCAN_GET_NODE_INFO', 5200, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_ADSB_OUT_IDENT', 10001, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PAYLOAD_PREPARE_DEPLOY', 30001, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_PAYLOAD_CONTROL_DEPLOY', 30002, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_FIXED_MAG_CAL_YAW', 42006, []).
enum_entry('MAV_CMD', 'MAV_CMD_DO_WINCH', 42600, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_WAYPOINT_USER_1', 31000, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_WAYPOINT_USER_2', 31001, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_WAYPOINT_USER_3', 31002, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_WAYPOINT_USER_4', 31003, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_WAYPOINT_USER_5', 31004, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_SPATIAL_USER_1', 31005, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SPATIAL_USER_2', 31006, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SPATIAL_USER_3', 31007, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SPATIAL_USER_4', 31008, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SPATIAL_USER_5', 31009, [hasLocation(true), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_USER_1', 31010, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_USER_2', 31011, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_USER_3', 31012, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_USER_4', 31013, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_USER_5', 31014, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_CAN_FORWARD', 32000, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_DATA_STREAM', 'MAV_DATA_STREAM_ALL', 0, []).
enum_entry('MAV_DATA_STREAM', 'MAV_DATA_STREAM_RAW_SENSORS', 1, []).
enum_entry('MAV_DATA_STREAM', 'MAV_DATA_STREAM_EXTENDED_STATUS', 2, []).
enum_entry('MAV_DATA_STREAM', 'MAV_DATA_STREAM_RC_CHANNELS', 3, []).
enum_entry('MAV_DATA_STREAM', 'MAV_DATA_STREAM_RAW_CONTROLLER', 4, []).
enum_entry('MAV_DATA_STREAM', 'MAV_DATA_STREAM_POSITION', 6, []).
enum_entry('MAV_DATA_STREAM', 'MAV_DATA_STREAM_EXTRA1', 10, []).
enum_entry('MAV_DATA_STREAM', 'MAV_DATA_STREAM_EXTRA2', 11, []).
enum_entry('MAV_DATA_STREAM', 'MAV_DATA_STREAM_EXTRA3', 12, []).
enum_entry('MAV_ROI', 'MAV_ROI_NONE', 0, []).
enum_entry('MAV_ROI', 'MAV_ROI_WPNEXT', 1, []).
enum_entry('MAV_ROI', 'MAV_ROI_WPINDEX', 2, []).
enum_entry('MAV_ROI', 'MAV_ROI_LOCATION', 3, []).
enum_entry('MAV_ROI', 'MAV_ROI_TARGET', 4, []).
enum_entry('MAV_PARAM_TYPE', 'MAV_PARAM_TYPE_UINT8', 1, []).
enum_entry('MAV_PARAM_TYPE', 'MAV_PARAM_TYPE_INT8', 2, []).
enum_entry('MAV_PARAM_TYPE', 'MAV_PARAM_TYPE_UINT16', 3, []).
enum_entry('MAV_PARAM_TYPE', 'MAV_PARAM_TYPE_INT16', 4, []).
enum_entry('MAV_PARAM_TYPE', 'MAV_PARAM_TYPE_UINT32', 5, []).
enum_entry('MAV_PARAM_TYPE', 'MAV_PARAM_TYPE_INT32', 6, []).
enum_entry('MAV_PARAM_TYPE', 'MAV_PARAM_TYPE_UINT64', 7, []).
enum_entry('MAV_PARAM_TYPE', 'MAV_PARAM_TYPE_INT64', 8, []).
enum_entry('MAV_PARAM_TYPE', 'MAV_PARAM_TYPE_REAL32', 9, []).
enum_entry('MAV_PARAM_TYPE', 'MAV_PARAM_TYPE_REAL64', 10, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_UINT8', 1, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_INT8', 2, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_UINT16', 3, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_INT16', 4, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_UINT32', 5, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_INT32', 6, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_UINT64', 7, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_INT64', 8, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_REAL32', 9, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_REAL64', 10, []).
enum_entry('MAV_PARAM_EXT_TYPE', 'MAV_PARAM_EXT_TYPE_CUSTOM', 11, []).
enum_entry('MAV_RESULT', 'MAV_RESULT_ACCEPTED', 0, []).
enum_entry('MAV_RESULT', 'MAV_RESULT_TEMPORARILY_REJECTED', 1, []).
enum_entry('MAV_RESULT', 'MAV_RESULT_DENIED', 2, []).
enum_entry('MAV_RESULT', 'MAV_RESULT_UNSUPPORTED', 3, []).
enum_entry('MAV_RESULT', 'MAV_RESULT_FAILED', 4, []).
enum_entry('MAV_RESULT', 'MAV_RESULT_IN_PROGRESS', 5, []).
enum_entry('MAV_RESULT', 'MAV_RESULT_CANCELLED', 6, []).
enum_entry('MAV_RESULT', 'MAV_RESULT_COMMAND_LONG_ONLY', 7, []).
enum_entry('MAV_RESULT', 'MAV_RESULT_COMMAND_INT_ONLY', 8, []).
enum_entry('MAV_RESULT', 'MAV_RESULT_COMMAND_UNSUPPORTED_MAV_FRAME', 9, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_ACCEPTED', 0, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_ERROR', 1, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_UNSUPPORTED_FRAME', 2, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_UNSUPPORTED', 3, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_NO_SPACE', 4, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_INVALID', 5, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_INVALID_PARAM1', 6, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_INVALID_PARAM2', 7, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_INVALID_PARAM3', 8, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_INVALID_PARAM4', 9, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_INVALID_PARAM5_X', 10, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_INVALID_PARAM6_Y', 11, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_INVALID_PARAM7', 12, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_INVALID_SEQUENCE', 13, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_DENIED', 14, []).
enum_entry('MAV_MISSION_RESULT', 'MAV_MISSION_OPERATION_CANCELLED', 15, []).
enum_entry('MAV_SEVERITY', 'MAV_SEVERITY_EMERGENCY', 0, []).
enum_entry('MAV_SEVERITY', 'MAV_SEVERITY_ALERT', 1, []).
enum_entry('MAV_SEVERITY', 'MAV_SEVERITY_CRITICAL', 2, []).
enum_entry('MAV_SEVERITY', 'MAV_SEVERITY_ERROR', 3, []).
enum_entry('MAV_SEVERITY', 'MAV_SEVERITY_WARNING', 4, []).
enum_entry('MAV_SEVERITY', 'MAV_SEVERITY_NOTICE', 5, []).
enum_entry('MAV_SEVERITY', 'MAV_SEVERITY_INFO', 6, []).
enum_entry('MAV_SEVERITY', 'MAV_SEVERITY_DEBUG', 7, []).
enum_entry('MAV_POWER_STATUS', 'MAV_POWER_STATUS_BRICK_VALID', 1, []).
enum_entry('MAV_POWER_STATUS', 'MAV_POWER_STATUS_SERVO_VALID', 2, []).
enum_entry('MAV_POWER_STATUS', 'MAV_POWER_STATUS_USB_CONNECTED', 4, []).
enum_entry('MAV_POWER_STATUS', 'MAV_POWER_STATUS_PERIPH_OVERCURRENT', 8, []).
enum_entry('MAV_POWER_STATUS', 'MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT', 16, []).
enum_entry('MAV_POWER_STATUS', 'MAV_POWER_STATUS_CHANGED', 32, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_DEV_TELEM1', 0, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_DEV_TELEM2', 1, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_DEV_GPS1', 2, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_DEV_GPS2', 3, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_DEV_SHELL', 10, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_SERIAL0', 100, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_SERIAL1', 101, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_SERIAL2', 102, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_SERIAL3', 103, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_SERIAL4', 104, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_SERIAL5', 105, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_SERIAL6', 106, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_SERIAL7', 107, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_SERIAL8', 108, []).
enum_entry('SERIAL_CONTROL_DEV', 'SERIAL_CONTROL_SERIAL9', 109, []).
enum_entry('SERIAL_CONTROL_FLAG', 'SERIAL_CONTROL_FLAG_REPLY', 1, []).
enum_entry('SERIAL_CONTROL_FLAG', 'SERIAL_CONTROL_FLAG_RESPOND', 2, []).
enum_entry('SERIAL_CONTROL_FLAG', 'SERIAL_CONTROL_FLAG_EXCLUSIVE', 4, []).
enum_entry('SERIAL_CONTROL_FLAG', 'SERIAL_CONTROL_FLAG_BLOCKING', 8, []).
enum_entry('SERIAL_CONTROL_FLAG', 'SERIAL_CONTROL_FLAG_MULTI', 16, []).
enum_entry('MAV_DISTANCE_SENSOR', 'MAV_DISTANCE_SENSOR_LASER', 0, []).
enum_entry('MAV_DISTANCE_SENSOR', 'MAV_DISTANCE_SENSOR_ULTRASOUND', 1, []).
enum_entry('MAV_DISTANCE_SENSOR', 'MAV_DISTANCE_SENSOR_INFRARED', 2, []).
enum_entry('MAV_DISTANCE_SENSOR', 'MAV_DISTANCE_SENSOR_RADAR', 3, []).
enum_entry('MAV_DISTANCE_SENSOR', 'MAV_DISTANCE_SENSOR_UNKNOWN', 4, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_NONE', 0, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_YAW_45', 1, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_YAW_90', 2, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_YAW_135', 3, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_YAW_180', 4, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_YAW_225', 5, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_YAW_270', 6, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_YAW_315', 7, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_180', 8, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_180_YAW_45', 9, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_180_YAW_90', 10, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_180_YAW_135', 11, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_PITCH_180', 12, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_180_YAW_225', 13, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_180_YAW_270', 14, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_180_YAW_315', 15, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90', 16, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90_YAW_45', 17, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90_YAW_90', 18, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90_YAW_135', 19, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_270', 20, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_270_YAW_45', 21, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_270_YAW_90', 22, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_270_YAW_135', 23, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_PITCH_90', 24, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_PITCH_270', 25, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_PITCH_180_YAW_90', 26, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_PITCH_180_YAW_270', 27, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90_PITCH_90', 28, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_180_PITCH_90', 29, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_270_PITCH_90', 30, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90_PITCH_180', 31, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_270_PITCH_180', 32, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90_PITCH_270', 33, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_180_PITCH_270', 34, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_270_PITCH_270', 35, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90', 36, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90_YAW_270', 37, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293', 38, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_PITCH_315', 39, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_ROLL_90_PITCH_315', 40, []).
enum_entry('MAV_SENSOR_ORIENTATION', 'MAV_SENSOR_ROTATION_CUSTOM', 100, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT', 1, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT', 2, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_MISSION_INT', 4, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_COMMAND_INT', 8, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_BYTEWISE', 16, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_FTP', 32, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET', 64, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED', 128, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT', 256, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_TERRAIN', 512, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_RESERVED3', 1024, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION', 2048, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION', 4096, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_MAVLINK2', 8192, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_MISSION_FENCE', 16384, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_MISSION_RALLY', 32768, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_RESERVED2', 65536, []).
enum_entry('MAV_PROTOCOL_CAPABILITY', 'MAV_PROTOCOL_CAPABILITY_PARAM_ENCODE_C_CAST', 131072, []).
enum_entry('MAV_MISSION_TYPE', 'MAV_MISSION_TYPE_MISSION', 0, []).
enum_entry('MAV_MISSION_TYPE', 'MAV_MISSION_TYPE_FENCE', 1, []).
enum_entry('MAV_MISSION_TYPE', 'MAV_MISSION_TYPE_RALLY', 2, []).
enum_entry('MAV_MISSION_TYPE', 'MAV_MISSION_TYPE_ALL', 255, []).
enum_entry('MAV_ESTIMATOR_TYPE', 'MAV_ESTIMATOR_TYPE_UNKNOWN', 0, []).
enum_entry('MAV_ESTIMATOR_TYPE', 'MAV_ESTIMATOR_TYPE_NAIVE', 1, []).
enum_entry('MAV_ESTIMATOR_TYPE', 'MAV_ESTIMATOR_TYPE_VISION', 2, []).
enum_entry('MAV_ESTIMATOR_TYPE', 'MAV_ESTIMATOR_TYPE_VIO', 3, []).
enum_entry('MAV_ESTIMATOR_TYPE', 'MAV_ESTIMATOR_TYPE_GPS', 4, []).
enum_entry('MAV_ESTIMATOR_TYPE', 'MAV_ESTIMATOR_TYPE_GPS_INS', 5, []).
enum_entry('MAV_ESTIMATOR_TYPE', 'MAV_ESTIMATOR_TYPE_MOCAP', 6, []).
enum_entry('MAV_ESTIMATOR_TYPE', 'MAV_ESTIMATOR_TYPE_LIDAR', 7, []).
enum_entry('MAV_ESTIMATOR_TYPE', 'MAV_ESTIMATOR_TYPE_AUTOPILOT', 8, []).
enum_entry('MAV_BATTERY_TYPE', 'MAV_BATTERY_TYPE_UNKNOWN', 0, []).
enum_entry('MAV_BATTERY_TYPE', 'MAV_BATTERY_TYPE_LIPO', 1, []).
enum_entry('MAV_BATTERY_TYPE', 'MAV_BATTERY_TYPE_LIFE', 2, []).
enum_entry('MAV_BATTERY_TYPE', 'MAV_BATTERY_TYPE_LION', 3, []).
enum_entry('MAV_BATTERY_TYPE', 'MAV_BATTERY_TYPE_NIMH', 4, []).
enum_entry('MAV_BATTERY_FUNCTION', 'MAV_BATTERY_FUNCTION_UNKNOWN', 0, []).
enum_entry('MAV_BATTERY_FUNCTION', 'MAV_BATTERY_FUNCTION_ALL', 1, []).
enum_entry('MAV_BATTERY_FUNCTION', 'MAV_BATTERY_FUNCTION_PROPULSION', 2, []).
enum_entry('MAV_BATTERY_FUNCTION', 'MAV_BATTERY_FUNCTION_AVIONICS', 3, []).
enum_entry('MAV_BATTERY_FUNCTION', 'MAV_BATTERY_FUNCTION_PAYLOAD', 4, []).
enum_entry('MAV_BATTERY_CHARGE_STATE', 'MAV_BATTERY_CHARGE_STATE_UNDEFINED', 0, []).
enum_entry('MAV_BATTERY_CHARGE_STATE', 'MAV_BATTERY_CHARGE_STATE_OK', 1, []).
enum_entry('MAV_BATTERY_CHARGE_STATE', 'MAV_BATTERY_CHARGE_STATE_LOW', 2, []).
enum_entry('MAV_BATTERY_CHARGE_STATE', 'MAV_BATTERY_CHARGE_STATE_CRITICAL', 3, []).
enum_entry('MAV_BATTERY_CHARGE_STATE', 'MAV_BATTERY_CHARGE_STATE_EMERGENCY', 4, []).
enum_entry('MAV_BATTERY_CHARGE_STATE', 'MAV_BATTERY_CHARGE_STATE_FAILED', 5, []).
enum_entry('MAV_BATTERY_CHARGE_STATE', 'MAV_BATTERY_CHARGE_STATE_UNHEALTHY', 6, []).
enum_entry('MAV_BATTERY_CHARGE_STATE', 'MAV_BATTERY_CHARGE_STATE_CHARGING', 7, []).
enum_entry('MAV_BATTERY_MODE', 'MAV_BATTERY_MODE_UNKNOWN', 0, []).
enum_entry('MAV_BATTERY_MODE', 'MAV_BATTERY_MODE_AUTO_DISCHARGING', 1, []).
enum_entry('MAV_BATTERY_MODE', 'MAV_BATTERY_MODE_HOT_SWAP', 2, []).
enum_entry('MAV_BATTERY_FAULT', 'MAV_BATTERY_FAULT_DEEP_DISCHARGE', 1, []).
enum_entry('MAV_BATTERY_FAULT', 'MAV_BATTERY_FAULT_SPIKES', 2, []).
enum_entry('MAV_BATTERY_FAULT', 'MAV_BATTERY_FAULT_CELL_FAIL', 4, []).
enum_entry('MAV_BATTERY_FAULT', 'MAV_BATTERY_FAULT_OVER_CURRENT', 8, []).
enum_entry('MAV_BATTERY_FAULT', 'MAV_BATTERY_FAULT_OVER_TEMPERATURE', 16, []).
enum_entry('MAV_BATTERY_FAULT', 'MAV_BATTERY_FAULT_UNDER_TEMPERATURE', 32, []).
enum_entry('MAV_BATTERY_FAULT', 'MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE', 64, []).
enum_entry('MAV_BATTERY_FAULT', 'MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE', 128, []).
enum_entry('MAV_BATTERY_FAULT', 'BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION', 256, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_OFF', 1, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_READY', 2, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_GENERATING', 4, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_CHARGING', 8, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER', 16, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_MAXPOWER', 32, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING', 64, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT', 128, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING', 256, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT', 512, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT', 1024, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT', 2048, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING', 4096, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING', 8192, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT', 16384, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT', 32768, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT', 65536, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT', 131072, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT', 262144, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_START_INHIBITED', 524288, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED', 1048576, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_WARMING_UP', 2097152, []).
enum_entry('MAV_GENERATOR_STATUS_FLAG', 'MAV_GENERATOR_STATUS_FLAG_IDLE', 4194304, []).
enum_entry('MAV_VTOL_STATE', 'MAV_VTOL_STATE_UNDEFINED', 0, []).
enum_entry('MAV_VTOL_STATE', 'MAV_VTOL_STATE_TRANSITION_TO_FW', 1, []).
enum_entry('MAV_VTOL_STATE', 'MAV_VTOL_STATE_TRANSITION_TO_MC', 2, []).
enum_entry('MAV_VTOL_STATE', 'MAV_VTOL_STATE_MC', 3, []).
enum_entry('MAV_VTOL_STATE', 'MAV_VTOL_STATE_FW', 4, []).
enum_entry('MAV_LANDED_STATE', 'MAV_LANDED_STATE_UNDEFINED', 0, []).
enum_entry('MAV_LANDED_STATE', 'MAV_LANDED_STATE_ON_GROUND', 1, []).
enum_entry('MAV_LANDED_STATE', 'MAV_LANDED_STATE_IN_AIR', 2, []).
enum_entry('MAV_LANDED_STATE', 'MAV_LANDED_STATE_TAKEOFF', 3, []).
enum_entry('MAV_LANDED_STATE', 'MAV_LANDED_STATE_LANDING', 4, []).
enum_entry('ADSB_ALTITUDE_TYPE', 'ADSB_ALTITUDE_TYPE_PRESSURE_QNH', 0, []).
enum_entry('ADSB_ALTITUDE_TYPE', 'ADSB_ALTITUDE_TYPE_GEOMETRIC', 1, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_NO_INFO', 0, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_LIGHT', 1, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_SMALL', 2, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_LARGE', 3, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE', 4, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_HEAVY', 5, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_HIGHLY_MANUV', 6, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_ROTOCRAFT', 7, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_UNASSIGNED', 8, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_GLIDER', 9, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_LIGHTER_AIR', 10, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_PARACHUTE', 11, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_ULTRA_LIGHT', 12, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_UNASSIGNED2', 13, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_UAV', 14, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_SPACE', 15, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_UNASSGINED3', 16, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_EMERGENCY_SURFACE', 17, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_SERVICE_SURFACE', 18, []).
enum_entry('ADSB_EMITTER_TYPE', 'ADSB_EMITTER_TYPE_POINT_OBSTACLE', 19, []).
enum_entry('ADSB_FLAGS', 'ADSB_FLAGS_VALID_COORDS', 1, []).
enum_entry('ADSB_FLAGS', 'ADSB_FLAGS_VALID_ALTITUDE', 2, []).
enum_entry('ADSB_FLAGS', 'ADSB_FLAGS_VALID_HEADING', 4, []).
enum_entry('ADSB_FLAGS', 'ADSB_FLAGS_VALID_VELOCITY', 8, []).
enum_entry('ADSB_FLAGS', 'ADSB_FLAGS_VALID_CALLSIGN', 16, []).
enum_entry('ADSB_FLAGS', 'ADSB_FLAGS_VALID_SQUAWK', 32, []).
enum_entry('ADSB_FLAGS', 'ADSB_FLAGS_SIMULATED', 64, []).
enum_entry('ADSB_FLAGS', 'ADSB_FLAGS_VERTICAL_VELOCITY_VALID', 128, []).
enum_entry('ADSB_FLAGS', 'ADSB_FLAGS_BARO_VALID', 256, []).
enum_entry('ADSB_FLAGS', 'ADSB_FLAGS_SOURCE_UAT', 32768, []).
enum_entry('MAV_DO_REPOSITION_FLAGS', 'MAV_DO_REPOSITION_FLAGS_CHANGE_MODE', 1, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_ATTITUDE', 1, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_VELOCITY_HORIZ', 2, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_VELOCITY_VERT', 4, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_POS_HORIZ_REL', 8, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_POS_HORIZ_ABS', 16, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_POS_VERT_ABS', 32, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_POS_VERT_AGL', 64, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_CONST_POS_MODE', 128, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_PRED_POS_HORIZ_REL', 256, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_PRED_POS_HORIZ_ABS', 512, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_GPS_GLITCH', 1024, []).
enum_entry('ESTIMATOR_STATUS_FLAGS', 'ESTIMATOR_ACCEL_ERROR', 2048, []).
enum_entry('MOTOR_TEST_ORDER', 'MOTOR_TEST_ORDER_DEFAULT', 0, []).
enum_entry('MOTOR_TEST_ORDER', 'MOTOR_TEST_ORDER_SEQUENCE', 1, []).
enum_entry('MOTOR_TEST_ORDER', 'MOTOR_TEST_ORDER_BOARD', 2, []).
enum_entry('MOTOR_TEST_THROTTLE_TYPE', 'MOTOR_TEST_THROTTLE_PERCENT', 0, []).
enum_entry('MOTOR_TEST_THROTTLE_TYPE', 'MOTOR_TEST_THROTTLE_PWM', 1, []).
enum_entry('MOTOR_TEST_THROTTLE_TYPE', 'MOTOR_TEST_THROTTLE_PILOT', 2, []).
enum_entry('MOTOR_TEST_THROTTLE_TYPE', 'MOTOR_TEST_COMPASS_CAL', 3, []).
enum_entry('GPS_INPUT_IGNORE_FLAGS', 'GPS_INPUT_IGNORE_FLAG_ALT', 1, []).
enum_entry('GPS_INPUT_IGNORE_FLAGS', 'GPS_INPUT_IGNORE_FLAG_HDOP', 2, []).
enum_entry('GPS_INPUT_IGNORE_FLAGS', 'GPS_INPUT_IGNORE_FLAG_VDOP', 4, []).
enum_entry('GPS_INPUT_IGNORE_FLAGS', 'GPS_INPUT_IGNORE_FLAG_VEL_HORIZ', 8, []).
enum_entry('GPS_INPUT_IGNORE_FLAGS', 'GPS_INPUT_IGNORE_FLAG_VEL_VERT', 16, []).
enum_entry('GPS_INPUT_IGNORE_FLAGS', 'GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY', 32, []).
enum_entry('GPS_INPUT_IGNORE_FLAGS', 'GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY', 64, []).
enum_entry('GPS_INPUT_IGNORE_FLAGS', 'GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY', 128, []).
enum_entry('MAV_COLLISION_ACTION', 'MAV_COLLISION_ACTION_NONE', 0, []).
enum_entry('MAV_COLLISION_ACTION', 'MAV_COLLISION_ACTION_REPORT', 1, []).
enum_entry('MAV_COLLISION_ACTION', 'MAV_COLLISION_ACTION_ASCEND_OR_DESCEND', 2, []).
enum_entry('MAV_COLLISION_ACTION', 'MAV_COLLISION_ACTION_MOVE_HORIZONTALLY', 3, []).
enum_entry('MAV_COLLISION_ACTION', 'MAV_COLLISION_ACTION_MOVE_PERPENDICULAR', 4, []).
enum_entry('MAV_COLLISION_ACTION', 'MAV_COLLISION_ACTION_RTL', 5, []).
enum_entry('MAV_COLLISION_ACTION', 'MAV_COLLISION_ACTION_HOVER', 6, []).
enum_entry('MAV_COLLISION_THREAT_LEVEL', 'MAV_COLLISION_THREAT_LEVEL_NONE', 0, []).
enum_entry('MAV_COLLISION_THREAT_LEVEL', 'MAV_COLLISION_THREAT_LEVEL_LOW', 1, []).
enum_entry('MAV_COLLISION_THREAT_LEVEL', 'MAV_COLLISION_THREAT_LEVEL_HIGH', 2, []).
enum_entry('MAV_COLLISION_SRC', 'MAV_COLLISION_SRC_ADSB', 0, []).
enum_entry('MAV_COLLISION_SRC', 'MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT', 1, []).
enum_entry('GPS_FIX_TYPE', 'GPS_FIX_TYPE_NO_GPS', 0, []).
enum_entry('GPS_FIX_TYPE', 'GPS_FIX_TYPE_NO_FIX', 1, []).
enum_entry('GPS_FIX_TYPE', 'GPS_FIX_TYPE_2D_FIX', 2, []).
enum_entry('GPS_FIX_TYPE', 'GPS_FIX_TYPE_3D_FIX', 3, []).
enum_entry('GPS_FIX_TYPE', 'GPS_FIX_TYPE_DGPS', 4, []).
enum_entry('GPS_FIX_TYPE', 'GPS_FIX_TYPE_RTK_FLOAT', 5, []).
enum_entry('GPS_FIX_TYPE', 'GPS_FIX_TYPE_RTK_FIXED', 6, []).
enum_entry('GPS_FIX_TYPE', 'GPS_FIX_TYPE_STATIC', 7, []).
enum_entry('GPS_FIX_TYPE', 'GPS_FIX_TYPE_PPP', 8, []).
enum_entry('RTK_BASELINE_COORDINATE_SYSTEM', 'RTK_BASELINE_COORDINATE_SYSTEM_ECEF', 0, []).
enum_entry('RTK_BASELINE_COORDINATE_SYSTEM', 'RTK_BASELINE_COORDINATE_SYSTEM_NED', 1, []).
enum_entry('LANDING_TARGET_TYPE', 'LANDING_TARGET_TYPE_LIGHT_BEACON', 0, []).
enum_entry('LANDING_TARGET_TYPE', 'LANDING_TARGET_TYPE_RADIO_BEACON', 1, []).
enum_entry('LANDING_TARGET_TYPE', 'LANDING_TARGET_TYPE_VISION_FIDUCIAL', 2, []).
enum_entry('LANDING_TARGET_TYPE', 'LANDING_TARGET_TYPE_VISION_OTHER', 3, []).
enum_entry('VTOL_TRANSITION_HEADING', 'VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT', 0, []).
enum_entry('VTOL_TRANSITION_HEADING', 'VTOL_TRANSITION_HEADING_NEXT_WAYPOINT', 1, []).
enum_entry('VTOL_TRANSITION_HEADING', 'VTOL_TRANSITION_HEADING_TAKEOFF', 2, []).
enum_entry('VTOL_TRANSITION_HEADING', 'VTOL_TRANSITION_HEADING_SPECIFIED', 3, []).
enum_entry('VTOL_TRANSITION_HEADING', 'VTOL_TRANSITION_HEADING_ANY', 4, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_CAPTURE_VIDEO', 1, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_CAPTURE_IMAGE', 2, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_HAS_MODES', 4, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE', 8, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE', 16, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE', 32, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM', 64, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS', 128, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM', 256, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_HAS_TRACKING_POINT', 512, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE', 1024, []).
enum_entry('CAMERA_CAP_FLAGS', 'CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS', 2048, []).
enum_entry('VIDEO_STREAM_STATUS_FLAGS', 'VIDEO_STREAM_STATUS_FLAGS_RUNNING', 1, []).
enum_entry('VIDEO_STREAM_STATUS_FLAGS', 'VIDEO_STREAM_STATUS_FLAGS_THERMAL', 2, []).
enum_entry('VIDEO_STREAM_TYPE', 'VIDEO_STREAM_TYPE_RTSP', 0, []).
enum_entry('VIDEO_STREAM_TYPE', 'VIDEO_STREAM_TYPE_RTPUDP', 1, []).
enum_entry('VIDEO_STREAM_TYPE', 'VIDEO_STREAM_TYPE_TCP_MPEG', 2, []).
enum_entry('VIDEO_STREAM_TYPE', 'VIDEO_STREAM_TYPE_MPEG_TS_H264', 3, []).
enum_entry('CAMERA_TRACKING_STATUS_FLAGS', 'CAMERA_TRACKING_STATUS_FLAGS_IDLE', 0, []).
enum_entry('CAMERA_TRACKING_STATUS_FLAGS', 'CAMERA_TRACKING_STATUS_FLAGS_ACTIVE', 1, []).
enum_entry('CAMERA_TRACKING_STATUS_FLAGS', 'CAMERA_TRACKING_STATUS_FLAGS_ERROR', 2, []).
enum_entry('CAMERA_TRACKING_MODE', 'CAMERA_TRACKING_MODE_NONE', 0, []).
enum_entry('CAMERA_TRACKING_MODE', 'CAMERA_TRACKING_MODE_POINT', 1, []).
enum_entry('CAMERA_TRACKING_MODE', 'CAMERA_TRACKING_MODE_RECTANGLE', 2, []).
enum_entry('CAMERA_TRACKING_TARGET_DATA', 'CAMERA_TRACKING_TARGET_DATA_NONE', 0, []).
enum_entry('CAMERA_TRACKING_TARGET_DATA', 'CAMERA_TRACKING_TARGET_DATA_EMBEDDED', 1, []).
enum_entry('CAMERA_TRACKING_TARGET_DATA', 'CAMERA_TRACKING_TARGET_DATA_RENDERED', 2, []).
enum_entry('CAMERA_TRACKING_TARGET_DATA', 'CAMERA_TRACKING_TARGET_DATA_IN_STATUS', 4, []).
enum_entry('CAMERA_ZOOM_TYPE', 'ZOOM_TYPE_STEP', 0, []).
enum_entry('CAMERA_ZOOM_TYPE', 'ZOOM_TYPE_CONTINUOUS', 1, []).
enum_entry('CAMERA_ZOOM_TYPE', 'ZOOM_TYPE_RANGE', 2, []).
enum_entry('CAMERA_ZOOM_TYPE', 'ZOOM_TYPE_FOCAL_LENGTH', 3, []).
enum_entry('CAMERA_ZOOM_TYPE', 'ZOOM_TYPE_HORIZONTAL_FOV', 4, []).
enum_entry('SET_FOCUS_TYPE', 'FOCUS_TYPE_STEP', 0, []).
enum_entry('SET_FOCUS_TYPE', 'FOCUS_TYPE_CONTINUOUS', 1, []).
enum_entry('SET_FOCUS_TYPE', 'FOCUS_TYPE_RANGE', 2, []).
enum_entry('SET_FOCUS_TYPE', 'FOCUS_TYPE_METERS', 3, []).
enum_entry('SET_FOCUS_TYPE', 'FOCUS_TYPE_AUTO', 4, []).
enum_entry('SET_FOCUS_TYPE', 'FOCUS_TYPE_AUTO_SINGLE', 5, []).
enum_entry('SET_FOCUS_TYPE', 'FOCUS_TYPE_AUTO_CONTINUOUS', 6, []).
enum_entry('PARAM_ACK', 'PARAM_ACK_ACCEPTED', 0, []).
enum_entry('PARAM_ACK', 'PARAM_ACK_VALUE_UNSUPPORTED', 1, []).
enum_entry('PARAM_ACK', 'PARAM_ACK_FAILED', 2, []).
enum_entry('PARAM_ACK', 'PARAM_ACK_IN_PROGRESS', 3, []).
enum_entry('CAMERA_MODE', 'CAMERA_MODE_IMAGE', 0, []).
enum_entry('CAMERA_MODE', 'CAMERA_MODE_VIDEO', 1, []).
enum_entry('CAMERA_MODE', 'CAMERA_MODE_IMAGE_SURVEY', 2, []).
enum_entry('MAV_ARM_AUTH_DENIED_REASON', 'MAV_ARM_AUTH_DENIED_REASON_GENERIC', 0, []).
enum_entry('MAV_ARM_AUTH_DENIED_REASON', 'MAV_ARM_AUTH_DENIED_REASON_NONE', 1, []).
enum_entry('MAV_ARM_AUTH_DENIED_REASON', 'MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT', 2, []).
enum_entry('MAV_ARM_AUTH_DENIED_REASON', 'MAV_ARM_AUTH_DENIED_REASON_TIMEOUT', 3, []).
enum_entry('MAV_ARM_AUTH_DENIED_REASON', 'MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE', 4, []).
enum_entry('MAV_ARM_AUTH_DENIED_REASON', 'MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER', 5, []).
enum_entry('RC_TYPE', 'RC_TYPE_SPEKTRUM_DSM2', 0, []).
enum_entry('RC_TYPE', 'RC_TYPE_SPEKTRUM_DSMX', 1, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_X_IGNORE', 1, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_Y_IGNORE', 2, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_Z_IGNORE', 4, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_VX_IGNORE', 8, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_VY_IGNORE', 16, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_VZ_IGNORE', 32, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_AX_IGNORE', 64, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_AY_IGNORE', 128, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_AZ_IGNORE', 256, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_FORCE_SET', 512, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_YAW_IGNORE', 1024, []).
enum_entry('POSITION_TARGET_TYPEMASK', 'POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE', 2048, []).
enum_entry('ATTITUDE_TARGET_TYPEMASK', 'ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE', 1, []).
enum_entry('ATTITUDE_TARGET_TYPEMASK', 'ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE', 2, []).
enum_entry('ATTITUDE_TARGET_TYPEMASK', 'ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE', 4, []).
enum_entry('ATTITUDE_TARGET_TYPEMASK', 'ATTITUDE_TARGET_TYPEMASK_THRUST_BODY_SET', 32, []).
enum_entry('ATTITUDE_TARGET_TYPEMASK', 'ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE', 64, []).
enum_entry('ATTITUDE_TARGET_TYPEMASK', 'ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE', 128, []).
enum_entry('UTM_FLIGHT_STATE', 'UTM_FLIGHT_STATE_UNKNOWN', 1, []).
enum_entry('UTM_FLIGHT_STATE', 'UTM_FLIGHT_STATE_GROUND', 2, []).
enum_entry('UTM_FLIGHT_STATE', 'UTM_FLIGHT_STATE_AIRBORNE', 3, []).
enum_entry('UTM_FLIGHT_STATE', 'UTM_FLIGHT_STATE_EMERGENCY', 16, []).
enum_entry('UTM_FLIGHT_STATE', 'UTM_FLIGHT_STATE_NOCTRL', 32, []).
enum_entry('UTM_DATA_AVAIL_FLAGS', 'UTM_DATA_AVAIL_FLAGS_TIME_VALID', 1, []).
enum_entry('UTM_DATA_AVAIL_FLAGS', 'UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE', 2, []).
enum_entry('UTM_DATA_AVAIL_FLAGS', 'UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE', 4, []).
enum_entry('UTM_DATA_AVAIL_FLAGS', 'UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE', 8, []).
enum_entry('UTM_DATA_AVAIL_FLAGS', 'UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE', 16, []).
enum_entry('UTM_DATA_AVAIL_FLAGS', 'UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE', 32, []).
enum_entry('UTM_DATA_AVAIL_FLAGS', 'UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE', 64, []).
enum_entry('UTM_DATA_AVAIL_FLAGS', 'UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE', 128, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_UNKNOWN', 0, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_FAILED', 1, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_INITIALIZING', 2, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_LOCKED', 3, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_DISABLED', 4, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_DISABLING', 5, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_ENABLING', 6, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_ENABLED', 7, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_SEARCHING', 8, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_REGISTERED', 9, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_DISCONNECTING', 10, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_CONNECTING', 11, []).
enum_entry('CELLULAR_STATUS_FLAG', 'CELLULAR_STATUS_FLAG_CONNECTED', 12, []).
enum_entry('CELLULAR_NETWORK_FAILED_REASON', 'CELLULAR_NETWORK_FAILED_REASON_NONE', 0, []).
enum_entry('CELLULAR_NETWORK_FAILED_REASON', 'CELLULAR_NETWORK_FAILED_REASON_UNKNOWN', 1, []).
enum_entry('CELLULAR_NETWORK_FAILED_REASON', 'CELLULAR_NETWORK_FAILED_REASON_SIM_MISSING', 2, []).
enum_entry('CELLULAR_NETWORK_FAILED_REASON', 'CELLULAR_NETWORK_FAILED_REASON_SIM_ERROR', 3, []).
enum_entry('CELLULAR_NETWORK_RADIO_TYPE', 'CELLULAR_NETWORK_RADIO_TYPE_NONE', 0, []).
enum_entry('CELLULAR_NETWORK_RADIO_TYPE', 'CELLULAR_NETWORK_RADIO_TYPE_GSM', 1, []).
enum_entry('CELLULAR_NETWORK_RADIO_TYPE', 'CELLULAR_NETWORK_RADIO_TYPE_CDMA', 2, []).
enum_entry('CELLULAR_NETWORK_RADIO_TYPE', 'CELLULAR_NETWORK_RADIO_TYPE_WCDMA', 3, []).
enum_entry('CELLULAR_NETWORK_RADIO_TYPE', 'CELLULAR_NETWORK_RADIO_TYPE_LTE', 4, []).
enum_entry('PRECISION_LAND_MODE', 'PRECISION_LAND_MODE_DISABLED', 0, []).
enum_entry('PRECISION_LAND_MODE', 'PRECISION_LAND_MODE_OPPORTUNISTIC', 1, []).
enum_entry('PRECISION_LAND_MODE', 'PRECISION_LAND_MODE_REQUIRED', 2, []).
enum_entry('PARACHUTE_ACTION', 'PARACHUTE_DISABLE', 0, []).
enum_entry('PARACHUTE_ACTION', 'PARACHUTE_ENABLE', 1, []).
enum_entry('PARACHUTE_ACTION', 'PARACHUTE_RELEASE', 2, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN', 0, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0', 200, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1', 201, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2', 202, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3', 203, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4', 204, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5', 205, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6', 206, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7', 207, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8', 208, []).
enum_entry('MAV_TUNNEL_PAYLOAD_TYPE', 'MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9', 209, []).
enum_entry('MAV_ODID_ID_TYPE', 'MAV_ODID_ID_TYPE_NONE', 0, []).
enum_entry('MAV_ODID_ID_TYPE', 'MAV_ODID_ID_TYPE_SERIAL_NUMBER', 1, []).
enum_entry('MAV_ODID_ID_TYPE', 'MAV_ODID_ID_TYPE_CAA_REGISTRATION_ID', 2, []).
enum_entry('MAV_ODID_ID_TYPE', 'MAV_ODID_ID_TYPE_UTM_ASSIGNED_UUID', 3, []).
enum_entry('MAV_ODID_ID_TYPE', 'MAV_ODID_ID_TYPE_SPECIFIC_SESSION_ID', 4, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_NONE', 0, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_AEROPLANE', 1, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_HELICOPTER_OR_MULTIROTOR', 2, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_GYROPLANE', 3, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_HYBRID_LIFT', 4, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_ORNITHOPTER', 5, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_GLIDER', 6, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_KITE', 7, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_FREE_BALLOON', 8, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_CAPTIVE_BALLOON', 9, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_AIRSHIP', 10, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_FREE_FALL_PARACHUTE', 11, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_ROCKET', 12, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_TETHERED_POWERED_AIRCRAFT', 13, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_GROUND_OBSTACLE', 14, []).
enum_entry('MAV_ODID_UA_TYPE', 'MAV_ODID_UA_TYPE_OTHER', 15, []).
enum_entry('MAV_ODID_STATUS', 'MAV_ODID_STATUS_UNDECLARED', 0, []).
enum_entry('MAV_ODID_STATUS', 'MAV_ODID_STATUS_GROUND', 1, []).
enum_entry('MAV_ODID_STATUS', 'MAV_ODID_STATUS_AIRBORNE', 2, []).
enum_entry('MAV_ODID_STATUS', 'MAV_ODID_STATUS_EMERGENCY', 3, []).
enum_entry('MAV_ODID_STATUS', 'MAV_ODID_STATUS_REMOTE_ID_SYSTEM_FAILURE', 4, []).
enum_entry('MAV_ODID_HEIGHT_REF', 'MAV_ODID_HEIGHT_REF_OVER_TAKEOFF', 0, []).
enum_entry('MAV_ODID_HEIGHT_REF', 'MAV_ODID_HEIGHT_REF_OVER_GROUND', 1, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_UNKNOWN', 0, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_10NM', 1, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_4NM', 2, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_2NM', 3, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_1NM', 4, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_0_5NM', 5, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_0_3NM', 6, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_0_1NM', 7, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_0_05NM', 8, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_30_METER', 9, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_10_METER', 10, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_3_METER', 11, []).
enum_entry('MAV_ODID_HOR_ACC', 'MAV_ODID_HOR_ACC_1_METER', 12, []).
enum_entry('MAV_ODID_VER_ACC', 'MAV_ODID_VER_ACC_UNKNOWN', 0, []).
enum_entry('MAV_ODID_VER_ACC', 'MAV_ODID_VER_ACC_150_METER', 1, []).
enum_entry('MAV_ODID_VER_ACC', 'MAV_ODID_VER_ACC_45_METER', 2, []).
enum_entry('MAV_ODID_VER_ACC', 'MAV_ODID_VER_ACC_25_METER', 3, []).
enum_entry('MAV_ODID_VER_ACC', 'MAV_ODID_VER_ACC_10_METER', 4, []).
enum_entry('MAV_ODID_VER_ACC', 'MAV_ODID_VER_ACC_3_METER', 5, []).
enum_entry('MAV_ODID_VER_ACC', 'MAV_ODID_VER_ACC_1_METER', 6, []).
enum_entry('MAV_ODID_SPEED_ACC', 'MAV_ODID_SPEED_ACC_UNKNOWN', 0, []).
enum_entry('MAV_ODID_SPEED_ACC', 'MAV_ODID_SPEED_ACC_10_METERS_PER_SECOND', 1, []).
enum_entry('MAV_ODID_SPEED_ACC', 'MAV_ODID_SPEED_ACC_3_METERS_PER_SECOND', 2, []).
enum_entry('MAV_ODID_SPEED_ACC', 'MAV_ODID_SPEED_ACC_1_METERS_PER_SECOND', 3, []).
enum_entry('MAV_ODID_SPEED_ACC', 'MAV_ODID_SPEED_ACC_0_3_METERS_PER_SECOND', 4, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_UNKNOWN', 0, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_0_1_SECOND', 1, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_0_2_SECOND', 2, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_0_3_SECOND', 3, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_0_4_SECOND', 4, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_0_5_SECOND', 5, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_0_6_SECOND', 6, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_0_7_SECOND', 7, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_0_8_SECOND', 8, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_0_9_SECOND', 9, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_1_0_SECOND', 10, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_1_1_SECOND', 11, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_1_2_SECOND', 12, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_1_3_SECOND', 13, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_1_4_SECOND', 14, []).
enum_entry('MAV_ODID_TIME_ACC', 'MAV_ODID_TIME_ACC_1_5_SECOND', 15, []).
enum_entry('MAV_ODID_AUTH_TYPE', 'MAV_ODID_AUTH_TYPE_NONE', 0, []).
enum_entry('MAV_ODID_AUTH_TYPE', 'MAV_ODID_AUTH_TYPE_UAS_ID_SIGNATURE', 1, []).
enum_entry('MAV_ODID_AUTH_TYPE', 'MAV_ODID_AUTH_TYPE_OPERATOR_ID_SIGNATURE', 2, []).
enum_entry('MAV_ODID_AUTH_TYPE', 'MAV_ODID_AUTH_TYPE_MESSAGE_SET_SIGNATURE', 3, []).
enum_entry('MAV_ODID_AUTH_TYPE', 'MAV_ODID_AUTH_TYPE_NETWORK_REMOTE_ID', 4, []).
enum_entry('MAV_ODID_AUTH_TYPE', 'MAV_ODID_AUTH_TYPE_SPECIFIC_AUTHENTICATION', 5, []).
enum_entry('MAV_ODID_DESC_TYPE', 'MAV_ODID_DESC_TYPE_TEXT', 0, []).
enum_entry('MAV_ODID_DESC_TYPE', 'MAV_ODID_DESC_TYPE_EMERGENCY', 1, []).
enum_entry('MAV_ODID_DESC_TYPE', 'MAV_ODID_DESC_TYPE_EXTENDED_STATUS', 2, []).
enum_entry('MAV_ODID_OPERATOR_LOCATION_TYPE', 'MAV_ODID_OPERATOR_LOCATION_TYPE_TAKEOFF', 0, []).
enum_entry('MAV_ODID_OPERATOR_LOCATION_TYPE', 'MAV_ODID_OPERATOR_LOCATION_TYPE_LIVE_GNSS', 1, []).
enum_entry('MAV_ODID_OPERATOR_LOCATION_TYPE', 'MAV_ODID_OPERATOR_LOCATION_TYPE_FIXED', 2, []).
enum_entry('MAV_ODID_CLASSIFICATION_TYPE', 'MAV_ODID_CLASSIFICATION_TYPE_UNDECLARED', 0, []).
enum_entry('MAV_ODID_CLASSIFICATION_TYPE', 'MAV_ODID_CLASSIFICATION_TYPE_EU', 1, []).
enum_entry('MAV_ODID_CATEGORY_EU', 'MAV_ODID_CATEGORY_EU_UNDECLARED', 0, []).
enum_entry('MAV_ODID_CATEGORY_EU', 'MAV_ODID_CATEGORY_EU_OPEN', 1, []).
enum_entry('MAV_ODID_CATEGORY_EU', 'MAV_ODID_CATEGORY_EU_SPECIFIC', 2, []).
enum_entry('MAV_ODID_CATEGORY_EU', 'MAV_ODID_CATEGORY_EU_CERTIFIED', 3, []).
enum_entry('MAV_ODID_CLASS_EU', 'MAV_ODID_CLASS_EU_UNDECLARED', 0, []).
enum_entry('MAV_ODID_CLASS_EU', 'MAV_ODID_CLASS_EU_CLASS_0', 1, []).
enum_entry('MAV_ODID_CLASS_EU', 'MAV_ODID_CLASS_EU_CLASS_1', 2, []).
enum_entry('MAV_ODID_CLASS_EU', 'MAV_ODID_CLASS_EU_CLASS_2', 3, []).
enum_entry('MAV_ODID_CLASS_EU', 'MAV_ODID_CLASS_EU_CLASS_3', 4, []).
enum_entry('MAV_ODID_CLASS_EU', 'MAV_ODID_CLASS_EU_CLASS_4', 5, []).
enum_entry('MAV_ODID_CLASS_EU', 'MAV_ODID_CLASS_EU_CLASS_5', 6, []).
enum_entry('MAV_ODID_CLASS_EU', 'MAV_ODID_CLASS_EU_CLASS_6', 7, []).
enum_entry('MAV_ODID_OPERATOR_ID_TYPE', 'MAV_ODID_OPERATOR_ID_TYPE_CAA', 0, []).
enum_entry('MAV_ODID_ARM_STATUS', 'MAV_ODID_ARM_STATUS_GOOD_TO_ARM', 0, []).
enum_entry('MAV_ODID_ARM_STATUS', 'MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC', 1, []).
enum_entry('TUNE_FORMAT', 'TUNE_FORMAT_QBASIC1_1', 1, []).
enum_entry('TUNE_FORMAT', 'TUNE_FORMAT_MML_MODERN', 2, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_UNKNOWN', 0, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_1', 1, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_2', 2, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_3', 3, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_4', 4, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_5', 5, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_6', 6, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_7', 7, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_8', 8, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_9', 9, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_10', 10, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_11', 11, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_12', 12, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_13', 13, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_14', 14, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_15', 15, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_16', 16, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_17', 17, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_18', 18, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_19', 19, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_WIG', 20, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_WIG_HAZARDOUS_A', 21, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_WIG_HAZARDOUS_B', 22, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_WIG_HAZARDOUS_C', 23, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_WIG_HAZARDOUS_D', 24, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_WIG_RESERVED_1', 25, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_WIG_RESERVED_2', 26, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_WIG_RESERVED_3', 27, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_WIG_RESERVED_4', 28, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_WIG_RESERVED_5', 29, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_FISHING', 30, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TOWING', 31, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TOWING_LARGE', 32, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_DREDGING', 33, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_DIVING', 34, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_MILITARY', 35, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_SAILING', 36, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PLEASURE', 37, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_20', 38, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_RESERVED_21', 39, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_HSC', 40, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_HSC_HAZARDOUS_A', 41, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_HSC_HAZARDOUS_B', 42, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_HSC_HAZARDOUS_C', 43, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_HSC_HAZARDOUS_D', 44, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_HSC_RESERVED_1', 45, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_HSC_RESERVED_2', 46, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_HSC_RESERVED_3', 47, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_HSC_RESERVED_4', 48, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_HSC_UNKNOWN', 49, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PILOT', 50, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_SAR', 51, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TUG', 52, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PORT_TENDER', 53, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_ANTI_POLLUTION', 54, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_LAW_ENFORCEMENT', 55, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_SPARE_LOCAL_1', 56, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_SPARE_LOCAL_2', 57, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_MEDICAL_TRANSPORT', 58, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_NONECOMBATANT', 59, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PASSENGER', 60, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PASSENGER_HAZARDOUS_A', 61, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PASSENGER_HAZARDOUS_B', 62, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PASSENGER_HAZARDOUS_C', 63, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PASSENGER_HAZARDOUS_D', 64, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PASSENGER_RESERVED_1', 65, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PASSENGER_RESERVED_2', 66, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PASSENGER_RESERVED_3', 67, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PASSENGER_RESERVED_4', 68, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_PASSENGER_UNKNOWN', 69, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_CARGO', 70, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_CARGO_HAZARDOUS_A', 71, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_CARGO_HAZARDOUS_B', 72, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_CARGO_HAZARDOUS_C', 73, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_CARGO_HAZARDOUS_D', 74, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_CARGO_RESERVED_1', 75, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_CARGO_RESERVED_2', 76, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_CARGO_RESERVED_3', 77, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_CARGO_RESERVED_4', 78, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_CARGO_UNKNOWN', 79, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TANKER', 80, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TANKER_HAZARDOUS_A', 81, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TANKER_HAZARDOUS_B', 82, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TANKER_HAZARDOUS_C', 83, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TANKER_HAZARDOUS_D', 84, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TANKER_RESERVED_1', 85, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TANKER_RESERVED_2', 86, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TANKER_RESERVED_3', 87, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TANKER_RESERVED_4', 88, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_TANKER_UNKNOWN', 89, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_OTHER', 90, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_OTHER_HAZARDOUS_A', 91, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_OTHER_HAZARDOUS_B', 92, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_OTHER_HAZARDOUS_C', 93, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_OTHER_HAZARDOUS_D', 94, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_OTHER_RESERVED_1', 95, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_OTHER_RESERVED_2', 96, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_OTHER_RESERVED_3', 97, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_OTHER_RESERVED_4', 98, []).
enum_entry('AIS_TYPE', 'AIS_TYPE_OTHER_UNKNOWN', 99, []).
enum_entry('AIS_NAV_STATUS', 'UNDER_WAY', 0, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_ANCHORED', 1, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_UN_COMMANDED', 2, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_RESTRICTED_MANOEUVERABILITY', 3, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_DRAUGHT_CONSTRAINED', 4, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_MOORED', 5, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_AGROUND', 6, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_FISHING', 7, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_SAILING', 8, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_RESERVED_HSC', 9, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_RESERVED_WIG', 10, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_RESERVED_1', 11, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_RESERVED_2', 12, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_RESERVED_3', 13, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_AIS_SART', 14, []).
enum_entry('AIS_NAV_STATUS', 'AIS_NAV_UNKNOWN', 15, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_POSITION_ACCURACY', 1, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_VALID_COG', 2, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_VALID_VELOCITY', 4, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_HIGH_VELOCITY', 8, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_VALID_TURN_RATE', 16, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_TURN_RATE_SIGN_ONLY', 32, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_VALID_DIMENSIONS', 64, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_LARGE_BOW_DIMENSION', 128, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_LARGE_STERN_DIMENSION', 256, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_LARGE_PORT_DIMENSION', 512, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_LARGE_STARBOARD_DIMENSION', 1024, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_VALID_CALLSIGN', 2048, []).
enum_entry('AIS_FLAGS', 'AIS_FLAGS_VALID_NAME', 4096, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SENSOR_GYRO', 0, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SENSOR_ACCEL', 1, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SENSOR_MAG', 2, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SENSOR_BARO', 3, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SENSOR_GPS', 4, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SENSOR_OPTICAL_FLOW', 5, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SENSOR_VIO', 6, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SENSOR_DISTANCE_SENSOR', 7, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SENSOR_AIRSPEED', 8, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SYSTEM_BATTERY', 100, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SYSTEM_MOTOR', 101, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SYSTEM_SERVO', 102, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SYSTEM_AVOIDANCE', 103, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SYSTEM_RC_SIGNAL', 104, []).
enum_entry('FAILURE_UNIT', 'FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL', 105, []).
enum_entry('FAILURE_TYPE', 'FAILURE_TYPE_OK', 0, []).
enum_entry('FAILURE_TYPE', 'FAILURE_TYPE_OFF', 1, []).
enum_entry('FAILURE_TYPE', 'FAILURE_TYPE_STUCK', 2, []).
enum_entry('FAILURE_TYPE', 'FAILURE_TYPE_GARBAGE', 3, []).
enum_entry('FAILURE_TYPE', 'FAILURE_TYPE_WRONG', 4, []).
enum_entry('FAILURE_TYPE', 'FAILURE_TYPE_SLOW', 5, []).
enum_entry('FAILURE_TYPE', 'FAILURE_TYPE_DELAYED', 6, []).
enum_entry('FAILURE_TYPE', 'FAILURE_TYPE_INTERMITTENT', 7, []).
enum_entry('NAV_VTOL_LAND_OPTIONS', 'NAV_VTOL_LAND_OPTIONS_DEFAULT', 0, []).
enum_entry('NAV_VTOL_LAND_OPTIONS', 'NAV_VTOL_LAND_OPTIONS_FW_DESCENT', 1, []).
enum_entry('NAV_VTOL_LAND_OPTIONS', 'NAV_VTOL_LAND_OPTIONS_HOVER_DESCENT', 2, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_HEALTHY', 1, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_FULLY_RETRACTED', 2, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_MOVING', 4, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_CLUTCH_ENGAGED', 8, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_LOCKED', 16, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_DROPPING', 32, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_ARRESTING', 64, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_GROUND_SENSE', 128, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_RETRACTING', 256, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_REDELIVER', 512, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_ABANDON_LINE', 1024, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_LOCKING', 2048, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_LOAD_LINE', 4096, []).
enum_entry('MAV_WINCH_STATUS_FLAG', 'MAV_WINCH_STATUS_LOAD_PAYLOAD', 8192, []).
enum_entry('MAG_CAL_STATUS', 'MAG_CAL_NOT_STARTED', 0, []).
enum_entry('MAG_CAL_STATUS', 'MAG_CAL_WAITING_TO_START', 1, []).
enum_entry('MAG_CAL_STATUS', 'MAG_CAL_RUNNING_STEP_ONE', 2, []).
enum_entry('MAG_CAL_STATUS', 'MAG_CAL_RUNNING_STEP_TWO', 3, []).
enum_entry('MAG_CAL_STATUS', 'MAG_CAL_SUCCESS', 4, []).
enum_entry('MAG_CAL_STATUS', 'MAG_CAL_FAILED', 5, []).
enum_entry('MAG_CAL_STATUS', 'MAG_CAL_BAD_ORIENTATION', 6, []).
enum_entry('MAG_CAL_STATUS', 'MAG_CAL_BAD_RADIUS', 7, []).
enum_entry('MAV_EVENT_ERROR_REASON', 'MAV_EVENT_ERROR_REASON_UNAVAILABLE', 0, []).
enum_entry('MAV_EVENT_CURRENT_SEQUENCE_FLAGS', 'MAV_EVENT_CURRENT_SEQUENCE_FLAGS_RESET', 1, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_NONE', 0, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_XACC', 1, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_YACC', 2, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_ZACC', 4, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_XGYRO', 8, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_YGYRO', 16, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_ZGYRO', 32, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_XMAG', 64, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_YMAG', 128, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_ZMAG', 256, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_ABS_PRESSURE', 512, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_DIFF_PRESSURE', 1024, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_PRESSURE_ALT', 2048, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_TEMPERATURE', 4096, []).
enum_entry('HIL_SENSOR_UPDATED_FLAGS', 'HIL_SENSOR_UPDATED_RESET', 2147483648, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_NONE', 0, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_XACC', 1, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_YACC', 2, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_ZACC', 4, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_XGYRO', 8, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_YGYRO', 16, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_ZGYRO', 32, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_XMAG', 64, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_YMAG', 128, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_ZMAG', 256, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_ABS_PRESSURE', 512, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_DIFF_PRESSURE', 1024, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_PRESSURE_ALT', 2048, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_TEMPERATURE', 4096, []).
enum_entry('HIGHRES_IMU_UPDATED_FLAGS', 'HIGHRES_IMU_UPDATED_ALL', 65535, []).
enum_entry('CAN_FILTER_OP', 'CAN_FILTER_REPLACE', 0, []).
enum_entry('CAN_FILTER_OP', 'CAN_FILTER_ADD', 1, []).
enum_entry('CAN_FILTER_OP', 'CAN_FILTER_REMOVE', 2, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_NONE', 0, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_FAIL', 1, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_FAILERRNO', 2, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_INVALIDDATASIZE', 3, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_INVALIDSESSION', 4, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_NOSESSIONSAVAILABLE', 5, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_EOF', 6, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_UNKNOWNCOMMAND', 7, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_FILEEXISTS', 8, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_FILEPROTECTED', 9, []).
enum_entry('MAV_FTP_ERR', 'MAV_FTP_ERR_FILENOTFOUND', 10, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_NONE', 0, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_TERMINATESESSION', 1, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_RESETSESSION', 2, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_LISTDIRECTORY', 3, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_OPENFILERO', 4, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_READFILE', 5, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_CREATEFILE', 6, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_WRITEFILE', 7, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_REMOVEFILE', 8, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_CREATEDIRECTORY', 9, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_REMOVEDIRECTORY', 10, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_OPENFILEWO', 11, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_TRUNCATEFILE', 12, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_RENAME', 13, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_CALCFILECRC', 14, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_BURSTREADFILE', 15, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_ACK', 128, []).
enum_entry('MAV_FTP_OPCODE', 'MAV_FTP_OPCODE_NAK', 129, []).
enum_entry('MISSION_STATE', 'MISSION_STATE_UNKNOWN', 0, []).
enum_entry('MISSION_STATE', 'MISSION_STATE_NO_MISSION', 1, []).
enum_entry('MISSION_STATE', 'MISSION_STATE_NOT_STARTED', 2, []).
enum_entry('MISSION_STATE', 'MISSION_STATE_ACTIVE', 3, []).
enum_entry('MISSION_STATE', 'MISSION_STATE_PAUSED', 4, []).
enum_entry('MISSION_STATE', 'MISSION_STATE_COMPLETE', 5, []).
enum_entry('WIFI_NETWORK_SECURITY', 'WIFI_NETWORK_SECURITY_UNDEFINED', 0, []).
enum_entry('WIFI_NETWORK_SECURITY', 'WIFI_NETWORK_SECURITY_OPEN', 1, []).
enum_entry('WIFI_NETWORK_SECURITY', 'WIFI_NETWORK_SECURITY_WEP', 2, []).
enum_entry('WIFI_NETWORK_SECURITY', 'WIFI_NETWORK_SECURITY_WPA1', 3, []).
enum_entry('WIFI_NETWORK_SECURITY', 'WIFI_NETWORK_SECURITY_WPA2', 4, []).
enum_entry('WIFI_NETWORK_SECURITY', 'WIFI_NETWORK_SECURITY_WPA3', 5, []).
enum_entry('AIRSPEED_SENSOR_FLAGS', 'AIRSPEED_SENSOR_UNHEALTHY', 0, []).
enum_entry('AIRSPEED_SENSOR_FLAGS', 'AIRSPEED_SENSOR_USING', 1, []).
enum_entry('PARAM_TRANSACTION_TRANSPORT', 'PARAM_TRANSACTION_TRANSPORT_PARAM', 0, []).
enum_entry('PARAM_TRANSACTION_TRANSPORT', 'PARAM_TRANSACTION_TRANSPORT_PARAM_EXT', 1, []).
enum_entry('PARAM_TRANSACTION_ACTION', 'PARAM_TRANSACTION_ACTION_START', 0, []).
enum_entry('PARAM_TRANSACTION_ACTION', 'PARAM_TRANSACTION_ACTION_COMMIT', 1, []).
enum_entry('PARAM_TRANSACTION_ACTION', 'PARAM_TRANSACTION_ACTION_CANCEL', 2, []).
enum_entry('MAV_STANDARD_MODE', 'MAV_STANDARD_MODE_NON_STANDARD', 0, []).
enum_entry('MAV_STANDARD_MODE', 'MAV_STANDARD_MODE_POSITION_HOLD', 1, []).
enum_entry('MAV_STANDARD_MODE', 'MAV_STANDARD_MODE_ORBIT', 2, []).
enum_entry('MAV_STANDARD_MODE', 'MAV_STANDARD_MODE_CRUISE', 3, []).
enum_entry('MAV_STANDARD_MODE', 'MAV_STANDARD_MODE_ALTITUDE_HOLD', 4, []).
enum_entry('MAV_STANDARD_MODE', 'MAV_STANDARD_MODE_RETURN_HOME', 5, []).
enum_entry('MAV_STANDARD_MODE', 'MAV_STANDARD_MODE_SAFE_RECOVERY', 6, []).
enum_entry('MAV_STANDARD_MODE', 'MAV_STANDARD_MODE_MISSION', 7, []).
enum_entry('MAV_STANDARD_MODE', 'MAV_STANDARD_MODE_LAND', 8, []).
enum_entry('MAV_STANDARD_MODE', 'MAV_STANDARD_MODE_TAKEOFF', 9, []).
enum_entry('MAV_MODE_PROPERTY', 'MAV_MODE_PROPERTY_ADVANCED', 1, []).
enum_entry('MAV_MODE_PROPERTY', 'MAV_MODE_PROPERTY_NOT_USER_SELECTABLE', 2, []).
enum_entry('MAV_CMD', 'MAV_CMD_DO_FIGURE_EIGHT', 35, [hasLocation(true), isDestination(true)]).
enum_entry('MAV_CMD', 'MAV_CMD_PARAM_TRANSACTION', 900, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_FENCE_BREACH_ACTION', 5010, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_NOT_READY_TO_USE', 1, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_CHARGING', 2, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_CELL_BALANCING', 4, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_CELL_IMBALANCE', 8, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_AUTO_DISCHARGING', 16, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_REQUIRES_SERVICE', 32, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_BAD_BATTERY', 64, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_PROTECTIONS_ENABLED', 128, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_PROTECTION_SYSTEM', 256, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_OVER_VOLT', 512, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_UNDER_VOLT', 1024, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_OVER_TEMPERATURE', 2048, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_UNDER_TEMPERATURE', 4096, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_OVER_CURRENT', 8192, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_SHORT_CIRCUIT', 16384, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_INCOMPATIBLE_VOLTAGE', 32768, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_INCOMPATIBLE_FIRMWARE', 65536, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION', 131072, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_CAPACITY_RELATIVE_TO_FULL', 262144, []).
enum_entry('MAV_BATTERY_STATUS_FLAGS', 'MAV_BATTERY_STATUS_FLAGS_EXTENDED', 4294967295, []).
enum_entry('MAV_CMD', 'MAV_CMD_DO_UPGRADE', 247, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GROUP_START', 301, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_GROUP_END', 302, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_DO_SET_STANDARD_MODE', 262, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_SET_AT_S_PARAM', 550, [hasLocation(false), isDestination(false)]).
enum_entry('TARGET_ABSOLUTE_SENSOR_CAPABILITY_FLAGS', 'TARGET_ABSOLUTE_SENSOR_CAPABILITY_POSITION', 1, []).
enum_entry('TARGET_ABSOLUTE_SENSOR_CAPABILITY_FLAGS', 'TARGET_ABSOLUTE_SENSOR_CAPABILITY_VELOCITY', 2, []).
enum_entry('TARGET_ABSOLUTE_SENSOR_CAPABILITY_FLAGS', 'TARGET_ABSOLUTE_SENSOR_CAPABILITY_ACCELERATION', 4, []).
enum_entry('TARGET_ABSOLUTE_SENSOR_CAPABILITY_FLAGS', 'TARGET_ABSOLUTE_SENSOR_CAPABILITY_ATTITUDE', 8, []).
enum_entry('TARGET_ABSOLUTE_SENSOR_CAPABILITY_FLAGS', 'TARGET_ABSOLUTE_SENSOR_CAPABILITY_RATES', 16, []).
enum_entry('TARGET_OBS_FRAME', 'TARGET_OBS_FRAME_LOCAL_NED', 0, []).
enum_entry('TARGET_OBS_FRAME', 'TARGET_OBS_FRAME_BODY_FRD', 1, []).
enum_entry('TARGET_OBS_FRAME', 'TARGET_OBS_FRAME_LOCAL_OFFSET_NED', 2, []).
enum_entry('TARGET_OBS_FRAME', 'TARGET_OBS_FRAME_OTHER', 3, []).
enum_entry('ICAROUS_TRACK_BAND_TYPES', 'ICAROUS_TRACK_BAND_TYPE_NONE', 0, []).
enum_entry('ICAROUS_TRACK_BAND_TYPES', 'ICAROUS_TRACK_BAND_TYPE_NEAR', 1, []).
enum_entry('ICAROUS_TRACK_BAND_TYPES', 'ICAROUS_TRACK_BAND_TYPE_RECOVERY', 2, []).
enum_entry('ICAROUS_FMS_STATE', 'ICAROUS_FMS_STATE_IDLE', 0, []).
enum_entry('ICAROUS_FMS_STATE', 'ICAROUS_FMS_STATE_TAKEOFF', 1, []).
enum_entry('ICAROUS_FMS_STATE', 'ICAROUS_FMS_STATE_CLIMB', 2, []).
enum_entry('ICAROUS_FMS_STATE', 'ICAROUS_FMS_STATE_CRUISE', 3, []).
enum_entry('ICAROUS_FMS_STATE', 'ICAROUS_FMS_STATE_APPROACH', 4, []).
enum_entry('ICAROUS_FMS_STATE', 'ICAROUS_FMS_STATE_LAND', 5, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_GENERIC', 0, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_RESERVED', 1, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_SLUGS', 2, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_ARDUPILOTMEGA', 3, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_OPENPILOT', 4, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY', 5, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY', 6, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_GENERIC_MISSION_FULL', 7, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_INVALID', 8, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_PPZ', 9, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_UDB', 10, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_FP', 11, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_PX4', 12, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_SMACCMPILOT', 13, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_AUTOQUAD', 14, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_ARMAZILA', 15, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_AEROB', 16, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_ASLUAV', 17, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_SMARTAP', 18, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_AIRRAILS', 19, []).
enum_entry('MAV_AUTOPILOT', 'MAV_AUTOPILOT_REFLEX', 20, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_GENERIC', 0, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_FIXED_WING', 1, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_QUADROTOR', 2, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_COAXIAL', 3, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_HELICOPTER', 4, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_ANTENNA_TRACKER', 5, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_GCS', 6, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_AIRSHIP', 7, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_FREE_BALLOON', 8, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_ROCKET', 9, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_GROUND_ROVER', 10, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_SURFACE_BOAT', 11, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_SUBMARINE', 12, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_HEXAROTOR', 13, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_OCTOROTOR', 14, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_TRICOPTER', 15, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_FLAPPING_WING', 16, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_KITE', 17, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_ONBOARD_CONTROLLER', 18, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_VTOL_TAILSITTER_DUOROTOR', 19, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_VTOL_TAILSITTER_QUADROTOR', 20, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_VTOL_TILTROTOR', 21, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_VTOL_FIXEDROTOR', 22, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_VTOL_TAILSITTER', 23, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_VTOL_TILTWING', 24, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_VTOL_RESERVED5', 25, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_GIMBAL', 26, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_ADSB', 27, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_PARAFOIL', 28, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_DODECAROTOR', 29, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_CAMERA', 30, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_CHARGING_STATION', 31, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_FLARM', 32, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_SERVO', 33, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_ODID', 34, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_DECAROTOR', 35, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_BATTERY', 36, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_PARACHUTE', 37, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_LOG', 38, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_OSD', 39, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_IMU', 40, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_GPS', 41, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_WINCH', 42, []).
enum_entry('MAV_TYPE', 'MAV_TYPE_GENERIC_MULTIROTOR', 43, []).
enum_entry('MAV_MODE_FLAG', 'MAV_MODE_FLAG_SAFETY_ARMED', 128, []).
enum_entry('MAV_MODE_FLAG', 'MAV_MODE_FLAG_MANUAL_INPUT_ENABLED', 64, []).
enum_entry('MAV_MODE_FLAG', 'MAV_MODE_FLAG_HIL_ENABLED', 32, []).
enum_entry('MAV_MODE_FLAG', 'MAV_MODE_FLAG_STABILIZE_ENABLED', 16, []).
enum_entry('MAV_MODE_FLAG', 'MAV_MODE_FLAG_GUIDED_ENABLED', 8, []).
enum_entry('MAV_MODE_FLAG', 'MAV_MODE_FLAG_AUTO_ENABLED', 4, []).
enum_entry('MAV_MODE_FLAG', 'MAV_MODE_FLAG_TEST_ENABLED', 2, []).
enum_entry('MAV_MODE_FLAG', 'MAV_MODE_FLAG_CUSTOM_MODE_ENABLED', 1, []).
enum_entry('MAV_MODE_FLAG_DECODE_POSITION', 'MAV_MODE_FLAG_DECODE_POSITION_SAFETY', 128, []).
enum_entry('MAV_MODE_FLAG_DECODE_POSITION', 'MAV_MODE_FLAG_DECODE_POSITION_MANUAL', 64, []).
enum_entry('MAV_MODE_FLAG_DECODE_POSITION', 'MAV_MODE_FLAG_DECODE_POSITION_HIL', 32, []).
enum_entry('MAV_MODE_FLAG_DECODE_POSITION', 'MAV_MODE_FLAG_DECODE_POSITION_STABILIZE', 16, []).
enum_entry('MAV_MODE_FLAG_DECODE_POSITION', 'MAV_MODE_FLAG_DECODE_POSITION_GUIDED', 8, []).
enum_entry('MAV_MODE_FLAG_DECODE_POSITION', 'MAV_MODE_FLAG_DECODE_POSITION_AUTO', 4, []).
enum_entry('MAV_MODE_FLAG_DECODE_POSITION', 'MAV_MODE_FLAG_DECODE_POSITION_TEST', 2, []).
enum_entry('MAV_MODE_FLAG_DECODE_POSITION', 'MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE', 1, []).
enum_entry('MAV_STATE', 'MAV_STATE_UNINIT', 0, []).
enum_entry('MAV_STATE', 'MAV_STATE_BOOT', 1, []).
enum_entry('MAV_STATE', 'MAV_STATE_CALIBRATING', 2, []).
enum_entry('MAV_STATE', 'MAV_STATE_STANDBY', 3, []).
enum_entry('MAV_STATE', 'MAV_STATE_ACTIVE', 4, []).
enum_entry('MAV_STATE', 'MAV_STATE_CRITICAL', 5, []).
enum_entry('MAV_STATE', 'MAV_STATE_EMERGENCY', 6, []).
enum_entry('MAV_STATE', 'MAV_STATE_POWEROFF', 7, []).
enum_entry('MAV_STATE', 'MAV_STATE_FLIGHT_TERMINATION', 8, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_ALL', 0, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_AUTOPILOT1', 1, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER1', 25, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER2', 26, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER3', 27, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER4', 28, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER5', 29, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER6', 30, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER7', 31, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER8', 32, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER9', 33, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER10', 34, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER11', 35, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER12', 36, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER13', 37, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER14', 38, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER15', 39, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER16', 40, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER17', 41, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER18', 42, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER19', 43, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER20', 44, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER21', 45, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER22', 46, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER23', 47, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER24', 48, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER25', 49, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER26', 50, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER27', 51, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER28', 52, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER29', 53, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER30', 54, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER31', 55, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER32', 56, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER33', 57, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER34', 58, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER35', 59, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER36', 60, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER37', 61, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER38', 62, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER39', 63, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER40', 64, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER41', 65, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER42', 66, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER43', 67, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_TELEMETRY_RADIO', 68, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER45', 69, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER46', 70, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER47', 71, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER48', 72, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER49', 73, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER50', 74, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER51', 75, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER52', 76, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER53', 77, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER54', 78, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER55', 79, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER56', 80, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER57', 81, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER58', 82, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER59', 83, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER60', 84, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER61', 85, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER62', 86, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER63', 87, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER64', 88, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER65', 89, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER66', 90, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER67', 91, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER68', 92, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER69', 93, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER70', 94, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER71', 95, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER72', 96, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER73', 97, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER74', 98, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_USER75', 99, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_CAMERA', 100, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_CAMERA2', 101, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_CAMERA3', 102, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_CAMERA4', 103, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_CAMERA5', 104, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_CAMERA6', 105, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO1', 140, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO2', 141, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO3', 142, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO4', 143, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO5', 144, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO6', 145, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO7', 146, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO8', 147, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO9', 148, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO10', 149, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO11', 150, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO12', 151, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO13', 152, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SERVO14', 153, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_GIMBAL', 154, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_LOG', 155, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_ADSB', 156, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_OSD', 157, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_PERIPHERAL', 158, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_QX1_GIMBAL', 159, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_FLARM', 160, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_PARACHUTE', 161, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_WINCH', 169, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_GIMBAL2', 171, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_GIMBAL3', 172, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_GIMBAL4', 173, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_GIMBAL5', 174, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_GIMBAL6', 175, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_BATTERY', 180, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_BATTERY2', 181, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_MAVCAN', 189, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_MISSIONPLANNER', 190, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_ONBOARD_COMPUTER', 191, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_ONBOARD_COMPUTER2', 192, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_ONBOARD_COMPUTER3', 193, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_ONBOARD_COMPUTER4', 194, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_PATHPLANNER', 195, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_OBSTACLE_AVOIDANCE', 196, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY', 197, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_PAIRING_MANAGER', 198, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_IMU', 200, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_IMU_2', 201, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_IMU_3', 202, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_GPS', 220, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_GPS2', 221, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_ODID_TXRX_1', 236, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_ODID_TXRX_2', 237, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_ODID_TXRX_3', 238, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_UDP_BRIDGE', 240, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_UART_BRIDGE', 241, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_TUNNEL_NODE', 242, []).
enum_entry('MAV_COMPONENT', 'MAV_COMP_ID_SYSTEM_CONTROL', 250, []).
enum_entry('UALBERTA_AUTOPILOT_MODE', 'MODE_MANUAL_DIRECT', 1, []).
enum_entry('UALBERTA_AUTOPILOT_MODE', 'MODE_MANUAL_SCALED', 2, []).
enum_entry('UALBERTA_AUTOPILOT_MODE', 'MODE_AUTO_PID_ATT', 3, []).
enum_entry('UALBERTA_AUTOPILOT_MODE', 'MODE_AUTO_PID_VEL', 4, []).
enum_entry('UALBERTA_AUTOPILOT_MODE', 'MODE_AUTO_PID_POS', 5, []).
enum_entry('UALBERTA_NAV_MODE', 'NAV_AHRS_INIT', 1, []).
enum_entry('UALBERTA_NAV_MODE', 'NAV_AHRS', 2, []).
enum_entry('UALBERTA_NAV_MODE', 'NAV_INS_GPS_INIT', 3, []).
enum_entry('UALBERTA_NAV_MODE', 'NAV_INS_GPS', 4, []).
enum_entry('UALBERTA_PILOT_MODE', 'PILOT_MANUAL', 1, []).
enum_entry('UALBERTA_PILOT_MODE', 'PILOT_AUTO', 2, []).
enum_entry('UALBERTA_PILOT_MODE', 'PILOT_ROTO', 3, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_STATE', 'UAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE', 1, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_STATE', 'UAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED', 2, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_STATE', 'UAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED', 4, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_STATE', 'UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND', 8, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_STATE', 'UAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT', 16, []).
enum_entry('UAVIONIX_ADSB_OUT_RF_SELECT', 'UAVIONIX_ADSB_OUT_RF_SELECT_STANDBY', 0, []).
enum_entry('UAVIONIX_ADSB_OUT_RF_SELECT', 'UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED', 1, []).
enum_entry('UAVIONIX_ADSB_OUT_RF_SELECT', 'UAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED', 2, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX', 'UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_0', 0, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX', 'UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_1', 1, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX', 'UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_2D', 2, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX', 'UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_3D', 3, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX', 'UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_DGPS', 4, []).
enum_entry('UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX', 'UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_RTK', 5, []).
enum_entry('UAVIONIX_ADSB_RF_HEALTH', 'UAVIONIX_ADSB_RF_HEALTH_INITIALIZING', 0, []).
enum_entry('UAVIONIX_ADSB_RF_HEALTH', 'UAVIONIX_ADSB_RF_HEALTH_OK', 1, []).
enum_entry('UAVIONIX_ADSB_RF_HEALTH', 'UAVIONIX_ADSB_RF_HEALTH_FAIL_TX', 2, []).
enum_entry('UAVIONIX_ADSB_RF_HEALTH', 'UAVIONIX_ADSB_RF_HEALTH_FAIL_RX', 16, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_NO_DATA', 0, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L15M_W23M', 1, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25M_W28P5M', 2, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25_34M', 3, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_33M', 4, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_38M', 5, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_39P5M', 6, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_45M', 7, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_45M', 8, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_52M', 9, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_59P5M', 10, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_67M', 11, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W72P5M', 12, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W80M', 13, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W80M', 14, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE', 'UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W90M', 15, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT', 'UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA', 0, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT', 'UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M', 1, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT', 'UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M', 2, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT', 'UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M', 3, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT', 'UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M', 4, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT', 'UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M', 5, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT', 'UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M', 6, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT', 'UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M', 7, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON', 'UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_NO_DATA', 0, []).
enum_entry('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON', 'UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_APPLIED_BY_SENSOR', 1, []).
enum_entry('UAVIONIX_ADSB_EMERGENCY_STATUS', 'UAVIONIX_ADSB_OUT_NO_EMERGENCY', 0, []).
enum_entry('UAVIONIX_ADSB_EMERGENCY_STATUS', 'UAVIONIX_ADSB_OUT_GENERAL_EMERGENCY', 1, []).
enum_entry('UAVIONIX_ADSB_EMERGENCY_STATUS', 'UAVIONIX_ADSB_OUT_LIFEGUARD_EMERGENCY', 2, []).
enum_entry('UAVIONIX_ADSB_EMERGENCY_STATUS', 'UAVIONIX_ADSB_OUT_MINIMUM_FUEL_EMERGENCY', 3, []).
enum_entry('UAVIONIX_ADSB_EMERGENCY_STATUS', 'UAVIONIX_ADSB_OUT_NO_COMM_EMERGENCY', 4, []).
enum_entry('UAVIONIX_ADSB_EMERGENCY_STATUS', 'UAVIONIX_ADSB_OUT_UNLAWFUL_INTERFERANCE_EMERGENCY', 5, []).
enum_entry('UAVIONIX_ADSB_EMERGENCY_STATUS', 'UAVIONIX_ADSB_OUT_DOWNED_AIRCRAFT_EMERGENCY', 6, []).
enum_entry('UAVIONIX_ADSB_EMERGENCY_STATUS', 'UAVIONIX_ADSB_OUT_RESERVED', 7, []).
enum_entry('MAV_STORM32_TUNNEL_PAYLOAD_TYPE', 'MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_IN', 200, []).
enum_entry('MAV_STORM32_TUNNEL_PAYLOAD_TYPE', 'MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_OUT', 201, []).
enum_entry('MAV_STORM32_TUNNEL_PAYLOAD_TYPE', 'MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_IN', 202, []).
enum_entry('MAV_STORM32_TUNNEL_PAYLOAD_TYPE', 'MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_OUT', 203, []).
enum_entry('MAV_STORM32_TUNNEL_PAYLOAD_TYPE', 'MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_IN', 204, []).
enum_entry('MAV_STORM32_TUNNEL_PAYLOAD_TYPE', 'MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_OUT', 205, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_IS_NORMAL', 1, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_IMUS_WORKING', 2, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_MOTORS_WORKING', 4, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_ENCODERS_WORKING', 8, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_VOLTAGE_OK', 16, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_VIRTUALCHANNELS_RECEIVING', 32, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_MAVLINK_RECEIVING', 64, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_STORM32LINK_QFIX', 128, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_STORM32LINK_WORKING', 256, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_CAMERA_CONNECTED', 512, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_AUX0_LOW', 1024, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_AUX1_LOW', 2048, []).
enum_entry('MAV_STORM32_GIMBAL_PREARM_FLAGS', 'MAV_STORM32_GIMBAL_PREARM_FLAGS_NTLOGGER_WORKING', 4096, []).
enum_entry('MAV_STORM32_CAMERA_PREARM_FLAGS', 'MAV_STORM32_CAMERA_PREARM_FLAGS_CONNECTED', 1, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_CAP_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_CAP_FLAGS_HAS_PROFILES', 1, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_NONE', 0, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_RC_ACTIVE', 1, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_CLIENT_ONBOARD_ACTIVE', 2, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_CLIENT_AUTOPILOT_ACTIVE', 4, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_CLIENT_GCS_ACTIVE', 8, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_CLIENT_CAMERA_ACTIVE', 16, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_CLIENT_GCS2_ACTIVE', 32, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_CLIENT_CAMERA2_ACTIVE', 64, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_CLIENT_CUSTOM_ACTIVE', 128, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_CLIENT_CUSTOM2_ACTIVE', 256, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_SET_SUPERVISON', 512, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_FLAGS', 'MAV_STORM32_GIMBAL_MANAGER_FLAGS_SET_RELEASE', 1024, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_CLIENT', 'MAV_STORM32_GIMBAL_MANAGER_CLIENT_NONE', 0, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_CLIENT', 'MAV_STORM32_GIMBAL_MANAGER_CLIENT_ONBOARD', 1, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_CLIENT', 'MAV_STORM32_GIMBAL_MANAGER_CLIENT_AUTOPILOT', 2, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_CLIENT', 'MAV_STORM32_GIMBAL_MANAGER_CLIENT_GCS', 3, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_CLIENT', 'MAV_STORM32_GIMBAL_MANAGER_CLIENT_CAMERA', 4, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_CLIENT', 'MAV_STORM32_GIMBAL_MANAGER_CLIENT_GCS2', 5, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_CLIENT', 'MAV_STORM32_GIMBAL_MANAGER_CLIENT_CAMERA2', 6, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_CLIENT', 'MAV_STORM32_GIMBAL_MANAGER_CLIENT_CUSTOM', 7, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_CLIENT', 'MAV_STORM32_GIMBAL_MANAGER_CLIENT_CUSTOM2', 8, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_PROFILE', 'MAV_STORM32_GIMBAL_MANAGER_PROFILE_DEFAULT', 0, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_PROFILE', 'MAV_STORM32_GIMBAL_MANAGER_PROFILE_CUSTOM', 1, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_PROFILE', 'MAV_STORM32_GIMBAL_MANAGER_PROFILE_COOPERATIVE', 2, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_PROFILE', 'MAV_STORM32_GIMBAL_MANAGER_PROFILE_EXCLUSIVE', 3, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_PROFILE', 'MAV_STORM32_GIMBAL_MANAGER_PROFILE_PRIORITY_COOPERATIVE', 4, []).
enum_entry('MAV_STORM32_GIMBAL_MANAGER_PROFILE', 'MAV_STORM32_GIMBAL_MANAGER_PROFILE_PRIORITY_EXCLUSIVE', 5, []).
enum_entry('MAV_QSHOT_MODE', 'MAV_QSHOT_MODE_UNDEFINED', 0, []).
enum_entry('MAV_QSHOT_MODE', 'MAV_QSHOT_MODE_DEFAULT', 1, []).
enum_entry('MAV_QSHOT_MODE', 'MAV_QSHOT_MODE_GIMBAL_RETRACT', 2, []).
enum_entry('MAV_QSHOT_MODE', 'MAV_QSHOT_MODE_GIMBAL_NEUTRAL', 3, []).
enum_entry('MAV_QSHOT_MODE', 'MAV_QSHOT_MODE_GIMBAL_MISSION', 4, []).
enum_entry('MAV_QSHOT_MODE', 'MAV_QSHOT_MODE_GIMBAL_RC_CONTROL', 5, []).
enum_entry('MAV_QSHOT_MODE', 'MAV_QSHOT_MODE_POI_TARGETING', 6, []).
enum_entry('MAV_QSHOT_MODE', 'MAV_QSHOT_MODE_SYSID_TARGETING', 7, []).
enum_entry('MAV_QSHOT_MODE', 'MAV_QSHOT_MODE_CABLECAM_2POINT', 8, []).
enum_entry('MAV_QSHOT_MODE', 'MAV_QSHOT_MODE_HOME_TARGETING', 9, []).
enum_entry('MAV_CMD', 'MAV_CMD_STORM32_DO_GIMBAL_MANAGER_CONTROL_PITCHYAW', 60002, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_STORM32_DO_GIMBAL_MANAGER_SETUP', 60010, [hasLocation(false), isDestination(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_QSHOT_DO_CONFIGURE', 60020, [hasLocation(false), isDestination(false)]).
enum_entry('RADIO_RC_CHANNELS_FLAGS', 'RADIO_RC_CHANNELS_FLAGS_FAILSAFE', 1, []).
enum_entry('RADIO_RC_CHANNELS_FLAGS', 'RADIO_RC_CHANNELS_FLAGS_FRAME_MISSED', 2, []).
enum_entry('RADIO_LINK_STATS_FLAGS', 'RADIO_LINK_STATS_FLAGS_RSSI_DBM', 1, []).
enum_entry('MAV_CMD', 'MAV_CMD_PRS_SET_ARM', 60050, [isDestination(false), hasLocation(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PRS_GET_ARM', 60051, [isDestination(false), hasLocation(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PRS_GET_BATTERY', 60052, [isDestination(false), hasLocation(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PRS_GET_ERR', 60053, [isDestination(false), hasLocation(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PRS_SET_ARM_ALTI', 60070, [isDestination(false), hasLocation(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PRS_GET_ARM_ALTI', 60071, [isDestination(false), hasLocation(false)]).
enum_entry('MAV_CMD', 'MAV_CMD_PRS_SHUTDOWN', 60072, [isDestination(false), hasLocation(false)]).
enum_entry('MAV_AVSS_COMMAND_FAILURE_REASON', 'PRS_NOT_STEADY', 1, []).
enum_entry('MAV_AVSS_COMMAND_FAILURE_REASON', 'PRS_DTM_NOT_ARMED', 2, []).
enum_entry('MAV_AVSS_COMMAND_FAILURE_REASON', 'PRS_OTM_NOT_ARMED', 3, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_MANUAL_CTRL', 0, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_ATTITUDE', 1, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_P_GPS', 6, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_HOTPOINT_MODE', 9, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_ASSISTED_TAKEOFF', 10, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_AUTO_TAKEOFF', 11, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_AUTO_LANDING', 12, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_NAVI_GO_HOME', 15, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_NAVI_SDK_CTRL', 17, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_S_SPORT', 31, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_FORCE_AUTO_LANDING', 33, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_T_TRIPOD', 38, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_SEARCH_MODE', 40, []).
enum_entry('AVSS_M300_OPERATION_MODE', 'MODE_M300_ENGINE_START', 41, []).
enum_entry('AVSS_HORSEFLY_OPERATION_MODE', 'MODE_HORSEFLY_MANUAL_CTRL', 0, []).
enum_entry('AVSS_HORSEFLY_OPERATION_MODE', 'MODE_HORSEFLY_AUTO_TAKEOFF', 1, []).
enum_entry('AVSS_HORSEFLY_OPERATION_MODE', 'MODE_HORSEFLY_AUTO_LANDING', 2, []).
enum_entry('AVSS_HORSEFLY_OPERATION_MODE', 'MODE_HORSEFLY_NAVI_GO_HOME', 3, []).
enum_entry('AVSS_HORSEFLY_OPERATION_MODE', 'MODE_HORSEFLY_DROP', 4, []).
enum_entry('AIRLINK_AUTH_RESPONSE_TYPE', 'AIRLINK_ERROR_LOGIN_OR_PASS', 0, []).
enum_entry('AIRLINK_AUTH_RESPONSE_TYPE', 'AIRLINK_AUTH_OK', 1, []).

:- dynamic message_field/4.

message_field('SENSOR_OFFSETS', mag_ofs_x, int16_t, []).
message_field('SENSOR_OFFSETS', mag_ofs_y, int16_t, []).
message_field('SENSOR_OFFSETS', mag_ofs_z, int16_t, []).
message_field('SENSOR_OFFSETS', mag_declination, float, [units(rad)]).
message_field('SENSOR_OFFSETS', raw_press, int32_t, []).
message_field('SENSOR_OFFSETS', raw_temp, int32_t, []).
message_field('SENSOR_OFFSETS', gyro_cal_x, float, []).
message_field('SENSOR_OFFSETS', gyro_cal_y, float, []).
message_field('SENSOR_OFFSETS', gyro_cal_z, float, []).
message_field('SENSOR_OFFSETS', accel_cal_x, float, []).
message_field('SENSOR_OFFSETS', accel_cal_y, float, []).
message_field('SENSOR_OFFSETS', accel_cal_z, float, []).
message_field('SET_MAG_OFFSETS', target_system, uint8_t, []).
message_field('SET_MAG_OFFSETS', target_component, uint8_t, []).
message_field('SET_MAG_OFFSETS', mag_ofs_x, int16_t, []).
message_field('SET_MAG_OFFSETS', mag_ofs_y, int16_t, []).
message_field('SET_MAG_OFFSETS', mag_ofs_z, int16_t, []).
message_field('MEMINFO', brkval, uint16_t, []).
message_field('MEMINFO', freemem, uint16_t, [units(bytes)]).
message_field('MEMINFO', freemem32, uint32_t, [units(bytes)]).
message_field('AP_ADC', adc1, uint16_t, []).
message_field('AP_ADC', adc2, uint16_t, []).
message_field('AP_ADC', adc3, uint16_t, []).
message_field('AP_ADC', adc4, uint16_t, []).
message_field('AP_ADC', adc5, uint16_t, []).
message_field('AP_ADC', adc6, uint16_t, []).
message_field('DIGICAM_CONFIGURE', target_system, uint8_t, []).
message_field('DIGICAM_CONFIGURE', target_component, uint8_t, []).
message_field('DIGICAM_CONFIGURE', mode, uint8_t, []).
message_field('DIGICAM_CONFIGURE', shutter_speed, uint16_t, []).
message_field('DIGICAM_CONFIGURE', aperture, uint8_t, []).
message_field('DIGICAM_CONFIGURE', iso, uint8_t, []).
message_field('DIGICAM_CONFIGURE', exposure_type, uint8_t, []).
message_field('DIGICAM_CONFIGURE', command_id, uint8_t, []).
message_field('DIGICAM_CONFIGURE', engine_cut_off, uint8_t, [units(ds)]).
message_field('DIGICAM_CONFIGURE', extra_param, uint8_t, []).
message_field('DIGICAM_CONFIGURE', extra_value, float, []).
message_field('DIGICAM_CONTROL', target_system, uint8_t, []).
message_field('DIGICAM_CONTROL', target_component, uint8_t, []).
message_field('DIGICAM_CONTROL', session, uint8_t, []).
message_field('DIGICAM_CONTROL', zoom_pos, uint8_t, []).
message_field('DIGICAM_CONTROL', zoom_step, int8_t, []).
message_field('DIGICAM_CONTROL', focus_lock, uint8_t, []).
message_field('DIGICAM_CONTROL', shot, uint8_t, []).
message_field('DIGICAM_CONTROL', command_id, uint8_t, []).
message_field('DIGICAM_CONTROL', extra_param, uint8_t, []).
message_field('DIGICAM_CONTROL', extra_value, float, []).
message_field('MOUNT_CONFIGURE', target_system, uint8_t, []).
message_field('MOUNT_CONFIGURE', target_component, uint8_t, []).
message_field('MOUNT_CONFIGURE', mount_mode, uint8_t, [enum('MAV_MOUNT_MODE')]).
message_field('MOUNT_CONFIGURE', stab_roll, uint8_t, []).
message_field('MOUNT_CONFIGURE', stab_pitch, uint8_t, []).
message_field('MOUNT_CONFIGURE', stab_yaw, uint8_t, []).
message_field('MOUNT_CONTROL', target_system, uint8_t, []).
message_field('MOUNT_CONTROL', target_component, uint8_t, []).
message_field('MOUNT_CONTROL', input_a, int32_t, []).
message_field('MOUNT_CONTROL', input_b, int32_t, []).
message_field('MOUNT_CONTROL', input_c, int32_t, []).
message_field('MOUNT_CONTROL', save_position, uint8_t, []).
message_field('MOUNT_STATUS', target_system, uint8_t, []).
message_field('MOUNT_STATUS', target_component, uint8_t, []).
message_field('MOUNT_STATUS', pointing_a, int32_t, [units(cdeg)]).
message_field('MOUNT_STATUS', pointing_b, int32_t, [units(cdeg)]).
message_field('MOUNT_STATUS', pointing_c, int32_t, [units(cdeg)]).
message_field('MOUNT_STATUS', mount_mode, uint8_t, [enum('MAV_MOUNT_MODE')]).
message_field('FENCE_POINT', target_system, uint8_t, []).
message_field('FENCE_POINT', target_component, uint8_t, []).
message_field('FENCE_POINT', idx, uint8_t, []).
message_field('FENCE_POINT', count, uint8_t, []).
message_field('FENCE_POINT', lat, float, [units(deg)]).
message_field('FENCE_POINT', lng, float, [units(deg)]).
message_field('FENCE_FETCH_POINT', target_system, uint8_t, []).
message_field('FENCE_FETCH_POINT', target_component, uint8_t, []).
message_field('FENCE_FETCH_POINT', idx, uint8_t, []).
message_field('AHRS', omegaIx, float, [units('rad/s')]).
message_field('AHRS', omegaIy, float, [units('rad/s')]).
message_field('AHRS', omegaIz, float, [units('rad/s')]).
message_field('AHRS', accel_weight, float, []).
message_field('AHRS', renorm_val, float, []).
message_field('AHRS', error_rp, float, []).
message_field('AHRS', error_yaw, float, []).
message_field('SIMSTATE', roll, float, [units(rad)]).
message_field('SIMSTATE', pitch, float, [units(rad)]).
message_field('SIMSTATE', yaw, float, [units(rad)]).
message_field('SIMSTATE', xacc, float, [units('m/s/s')]).
message_field('SIMSTATE', yacc, float, [units('m/s/s')]).
message_field('SIMSTATE', zacc, float, [units('m/s/s')]).
message_field('SIMSTATE', xgyro, float, [units('rad/s')]).
message_field('SIMSTATE', ygyro, float, [units('rad/s')]).
message_field('SIMSTATE', zgyro, float, [units('rad/s')]).
message_field('SIMSTATE', lat, int32_t, [units(degE7)]).
message_field('SIMSTATE', lng, int32_t, [units(degE7)]).
message_field('HWSTATUS', 'Vcc', uint16_t, [units(mV)]).
message_field('HWSTATUS', 'I2Cerr', uint8_t, []).
message_field('RADIO', rssi, uint8_t, []).
message_field('RADIO', remrssi, uint8_t, []).
message_field('RADIO', txbuf, uint8_t, [units('%')]).
message_field('RADIO', noise, uint8_t, []).
message_field('RADIO', remnoise, uint8_t, []).
message_field('RADIO', rxerrors, uint16_t, []).
message_field('RADIO', fixed, uint16_t, []).
message_field('LIMITS_STATUS', limits_state, uint8_t, [enum('LIMITS_STATE')]).
message_field('LIMITS_STATUS', last_trigger, uint32_t, [units(ms)]).
message_field('LIMITS_STATUS', last_action, uint32_t, [units(ms)]).
message_field('LIMITS_STATUS', last_recovery, uint32_t, [units(ms)]).
message_field('LIMITS_STATUS', last_clear, uint32_t, [units(ms)]).
message_field('LIMITS_STATUS', breach_count, uint16_t, []).
message_field('LIMITS_STATUS', mods_enabled, uint8_t, [enum('LIMIT_MODULE'), display(bitmask)]).
message_field('LIMITS_STATUS', mods_required, uint8_t, [enum('LIMIT_MODULE'), display(bitmask)]).
message_field('LIMITS_STATUS', mods_triggered, uint8_t, [enum('LIMIT_MODULE'), display(bitmask)]).
message_field('WIND', direction, float, [units(deg)]).
message_field('WIND', speed, float, [units('m/s')]).
message_field('WIND', speed_z, float, [units('m/s')]).
message_field('DATA16', type, uint8_t, []).
message_field('DATA16', len, uint8_t, [units(bytes)]).
message_field('DATA16', data, 'uint8_t[16]', []).
message_field('DATA32', type, uint8_t, []).
message_field('DATA32', len, uint8_t, [units(bytes)]).
message_field('DATA32', data, 'uint8_t[32]', []).
message_field('DATA64', type, uint8_t, []).
message_field('DATA64', len, uint8_t, [units(bytes)]).
message_field('DATA64', data, 'uint8_t[64]', []).
message_field('DATA96', type, uint8_t, []).
message_field('DATA96', len, uint8_t, [units(bytes)]).
message_field('DATA96', data, 'uint8_t[96]', []).
message_field('RANGEFINDER', distance, float, [units(m)]).
message_field('RANGEFINDER', voltage, float, [units('V')]).
message_field('AIRSPEED_AUTOCAL', vx, float, [units('m/s')]).
message_field('AIRSPEED_AUTOCAL', vy, float, [units('m/s')]).
message_field('AIRSPEED_AUTOCAL', vz, float, [units('m/s')]).
message_field('AIRSPEED_AUTOCAL', diff_pressure, float, [units('Pa')]).
message_field('AIRSPEED_AUTOCAL', 'EAS2TAS', float, []).
message_field('AIRSPEED_AUTOCAL', ratio, float, []).
message_field('AIRSPEED_AUTOCAL', state_x, float, []).
message_field('AIRSPEED_AUTOCAL', state_y, float, []).
message_field('AIRSPEED_AUTOCAL', state_z, float, []).
message_field('AIRSPEED_AUTOCAL', 'Pax', float, []).
message_field('AIRSPEED_AUTOCAL', 'Pby', float, []).
message_field('AIRSPEED_AUTOCAL', 'Pcz', float, []).
message_field('RALLY_POINT', target_system, uint8_t, []).
message_field('RALLY_POINT', target_component, uint8_t, []).
message_field('RALLY_POINT', idx, uint8_t, []).
message_field('RALLY_POINT', count, uint8_t, []).
message_field('RALLY_POINT', lat, int32_t, [units(degE7)]).
message_field('RALLY_POINT', lng, int32_t, [units(degE7)]).
message_field('RALLY_POINT', alt, int16_t, [units(m)]).
message_field('RALLY_POINT', break_alt, int16_t, [units(m)]).
message_field('RALLY_POINT', land_dir, uint16_t, [units(cdeg)]).
message_field('RALLY_POINT', flags, uint8_t, [enum('RALLY_FLAGS'), display(bitmask)]).
message_field('RALLY_FETCH_POINT', target_system, uint8_t, []).
message_field('RALLY_FETCH_POINT', target_component, uint8_t, []).
message_field('RALLY_FETCH_POINT', idx, uint8_t, []).
message_field('COMPASSMOT_STATUS', throttle, uint16_t, [units('d%')]).
message_field('COMPASSMOT_STATUS', current, float, [units('A')]).
message_field('COMPASSMOT_STATUS', interference, uint16_t, [units('%')]).
message_field('COMPASSMOT_STATUS', 'CompensationX', float, []).
message_field('COMPASSMOT_STATUS', 'CompensationY', float, []).
message_field('COMPASSMOT_STATUS', 'CompensationZ', float, []).
message_field('AHRS2', roll, float, [units(rad)]).
message_field('AHRS2', pitch, float, [units(rad)]).
message_field('AHRS2', yaw, float, [units(rad)]).
message_field('AHRS2', altitude, float, [units(m)]).
message_field('AHRS2', lat, int32_t, [units(degE7)]).
message_field('AHRS2', lng, int32_t, [units(degE7)]).
message_field('CAMERA_STATUS', time_usec, uint64_t, [units(us)]).
message_field('CAMERA_STATUS', target_system, uint8_t, []).
message_field('CAMERA_STATUS', cam_idx, uint8_t, []).
message_field('CAMERA_STATUS', img_idx, uint16_t, []).
message_field('CAMERA_STATUS', event_id, uint8_t, [enum('CAMERA_STATUS_TYPES')]).
message_field('CAMERA_STATUS', p1, float, []).
message_field('CAMERA_STATUS', p2, float, []).
message_field('CAMERA_STATUS', p3, float, []).
message_field('CAMERA_STATUS', p4, float, []).
message_field('CAMERA_FEEDBACK', time_usec, uint64_t, [units(us)]).
message_field('CAMERA_FEEDBACK', target_system, uint8_t, []).
message_field('CAMERA_FEEDBACK', cam_idx, uint8_t, []).
message_field('CAMERA_FEEDBACK', img_idx, uint16_t, []).
message_field('CAMERA_FEEDBACK', lat, int32_t, [units(degE7)]).
message_field('CAMERA_FEEDBACK', lng, int32_t, [units(degE7)]).
message_field('CAMERA_FEEDBACK', alt_msl, float, [units(m)]).
message_field('CAMERA_FEEDBACK', alt_rel, float, [units(m)]).
message_field('CAMERA_FEEDBACK', roll, float, [units(deg)]).
message_field('CAMERA_FEEDBACK', pitch, float, [units(deg)]).
message_field('CAMERA_FEEDBACK', yaw, float, [units(deg)]).
message_field('CAMERA_FEEDBACK', foc_len, float, [units(mm)]).
message_field('CAMERA_FEEDBACK', flags, uint8_t, [enum('CAMERA_FEEDBACK_FLAGS')]).
message_field('CAMERA_FEEDBACK', completed_captures, uint16_t, []).
message_field('BATTERY2', voltage, uint16_t, [units(mV)]).
message_field('BATTERY2', current_battery, int16_t, [units(cA)]).
message_field('AHRS3', roll, float, [units(rad)]).
message_field('AHRS3', pitch, float, [units(rad)]).
message_field('AHRS3', yaw, float, [units(rad)]).
message_field('AHRS3', altitude, float, [units(m)]).
message_field('AHRS3', lat, int32_t, [units(degE7)]).
message_field('AHRS3', lng, int32_t, [units(degE7)]).
message_field('AHRS3', v1, float, []).
message_field('AHRS3', v2, float, []).
message_field('AHRS3', v3, float, []).
message_field('AHRS3', v4, float, []).
message_field('AUTOPILOT_VERSION_REQUEST', target_system, uint8_t, []).
message_field('AUTOPILOT_VERSION_REQUEST', target_component, uint8_t, []).
message_field('REMOTE_LOG_DATA_BLOCK', target_system, uint8_t, []).
message_field('REMOTE_LOG_DATA_BLOCK', target_component, uint8_t, []).
message_field('REMOTE_LOG_DATA_BLOCK', seqno, uint32_t, [enum('MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS')]).
message_field('REMOTE_LOG_DATA_BLOCK', data, 'uint8_t[200]', []).
message_field('REMOTE_LOG_BLOCK_STATUS', target_system, uint8_t, []).
message_field('REMOTE_LOG_BLOCK_STATUS', target_component, uint8_t, []).
message_field('REMOTE_LOG_BLOCK_STATUS', seqno, uint32_t, []).
message_field('REMOTE_LOG_BLOCK_STATUS', status, uint8_t, [enum('MAV_REMOTE_LOG_DATA_BLOCK_STATUSES')]).
message_field('LED_CONTROL', target_system, uint8_t, []).
message_field('LED_CONTROL', target_component, uint8_t, []).
message_field('LED_CONTROL', instance, uint8_t, []).
message_field('LED_CONTROL', pattern, uint8_t, []).
message_field('LED_CONTROL', custom_len, uint8_t, []).
message_field('LED_CONTROL', custom_bytes, 'uint8_t[24]', []).
message_field('MAG_CAL_PROGRESS', compass_id, uint8_t, [instance(true)]).
message_field('MAG_CAL_PROGRESS', cal_mask, uint8_t, [display(bitmask)]).
message_field('MAG_CAL_PROGRESS', cal_status, uint8_t, [enum('MAG_CAL_STATUS')]).
message_field('MAG_CAL_PROGRESS', attempt, uint8_t, []).
message_field('MAG_CAL_PROGRESS', completion_pct, uint8_t, [units('%')]).
message_field('MAG_CAL_PROGRESS', completion_mask, 'uint8_t[10]', []).
message_field('MAG_CAL_PROGRESS', direction_x, float, []).
message_field('MAG_CAL_PROGRESS', direction_y, float, []).
message_field('MAG_CAL_PROGRESS', direction_z, float, []).
message_field('EKF_STATUS_REPORT', flags, uint16_t, [enum('EKF_STATUS_FLAGS'), display(bitmask)]).
message_field('EKF_STATUS_REPORT', velocity_variance, float, []).
message_field('EKF_STATUS_REPORT', pos_horiz_variance, float, []).
message_field('EKF_STATUS_REPORT', pos_vert_variance, float, []).
message_field('EKF_STATUS_REPORT', compass_variance, float, []).
message_field('EKF_STATUS_REPORT', terrain_alt_variance, float, []).
message_field('EKF_STATUS_REPORT', airspeed_variance, float, []).
message_field('PID_TUNING', axis, uint8_t, [enum('PID_TUNING_AXIS'), instance(true)]).
message_field('PID_TUNING', desired, float, []).
message_field('PID_TUNING', achieved, float, []).
message_field('PID_TUNING', 'FF', float, []).
message_field('PID_TUNING', 'P', float, []).
message_field('PID_TUNING', 'I', float, []).
message_field('PID_TUNING', 'D', float, []).
message_field('PID_TUNING', 'SRate', float, []).
message_field('PID_TUNING', 'PDmod', float, []).
message_field('DEEPSTALL', landing_lat, int32_t, [units(degE7)]).
message_field('DEEPSTALL', landing_lon, int32_t, [units(degE7)]).
message_field('DEEPSTALL', path_lat, int32_t, [units(degE7)]).
message_field('DEEPSTALL', path_lon, int32_t, [units(degE7)]).
message_field('DEEPSTALL', arc_entry_lat, int32_t, [units(degE7)]).
message_field('DEEPSTALL', arc_entry_lon, int32_t, [units(degE7)]).
message_field('DEEPSTALL', altitude, float, [units(m)]).
message_field('DEEPSTALL', expected_travel_distance, float, [units(m)]).
message_field('DEEPSTALL', cross_track_error, float, [units(m)]).
message_field('DEEPSTALL', stage, uint8_t, [enum('DEEPSTALL_STAGE')]).
message_field('GIMBAL_REPORT', target_system, uint8_t, []).
message_field('GIMBAL_REPORT', target_component, uint8_t, []).
message_field('GIMBAL_REPORT', delta_time, float, [units(s)]).
message_field('GIMBAL_REPORT', delta_angle_x, float, [units(rad)]).
message_field('GIMBAL_REPORT', delta_angle_y, float, [units(rad)]).
message_field('GIMBAL_REPORT', delta_angle_z, float, [units(rad)]).
message_field('GIMBAL_REPORT', delta_velocity_x, float, [units('m/s')]).
message_field('GIMBAL_REPORT', delta_velocity_y, float, [units('m/s')]).
message_field('GIMBAL_REPORT', delta_velocity_z, float, [units('m/s')]).
message_field('GIMBAL_REPORT', joint_roll, float, [units(rad)]).
message_field('GIMBAL_REPORT', joint_el, float, [units(rad)]).
message_field('GIMBAL_REPORT', joint_az, float, [units(rad)]).
message_field('GIMBAL_CONTROL', target_system, uint8_t, []).
message_field('GIMBAL_CONTROL', target_component, uint8_t, []).
message_field('GIMBAL_CONTROL', demanded_rate_x, float, [units('rad/s')]).
message_field('GIMBAL_CONTROL', demanded_rate_y, float, [units('rad/s')]).
message_field('GIMBAL_CONTROL', demanded_rate_z, float, [units('rad/s')]).
message_field('GIMBAL_TORQUE_CMD_REPORT', target_system, uint8_t, []).
message_field('GIMBAL_TORQUE_CMD_REPORT', target_component, uint8_t, []).
message_field('GIMBAL_TORQUE_CMD_REPORT', rl_torque_cmd, int16_t, []).
message_field('GIMBAL_TORQUE_CMD_REPORT', el_torque_cmd, int16_t, []).
message_field('GIMBAL_TORQUE_CMD_REPORT', az_torque_cmd, int16_t, []).
message_field('GOPRO_HEARTBEAT', status, uint8_t, [enum('GOPRO_HEARTBEAT_STATUS')]).
message_field('GOPRO_HEARTBEAT', capture_mode, uint8_t, [enum('GOPRO_CAPTURE_MODE')]).
message_field('GOPRO_HEARTBEAT', flags, uint8_t, [enum('GOPRO_HEARTBEAT_FLAGS'), display(bitmask)]).
message_field('GOPRO_GET_REQUEST', target_system, uint8_t, []).
message_field('GOPRO_GET_REQUEST', target_component, uint8_t, []).
message_field('GOPRO_GET_REQUEST', cmd_id, uint8_t, [enum('GOPRO_COMMAND')]).
message_field('GOPRO_GET_RESPONSE', cmd_id, uint8_t, [enum('GOPRO_COMMAND')]).
message_field('GOPRO_GET_RESPONSE', status, uint8_t, [enum('GOPRO_REQUEST_STATUS')]).
message_field('GOPRO_GET_RESPONSE', value, 'uint8_t[4]', []).
message_field('GOPRO_SET_REQUEST', target_system, uint8_t, []).
message_field('GOPRO_SET_REQUEST', target_component, uint8_t, []).
message_field('GOPRO_SET_REQUEST', cmd_id, uint8_t, [enum('GOPRO_COMMAND')]).
message_field('GOPRO_SET_REQUEST', value, 'uint8_t[4]', []).
message_field('GOPRO_SET_RESPONSE', cmd_id, uint8_t, [enum('GOPRO_COMMAND')]).
message_field('GOPRO_SET_RESPONSE', status, uint8_t, [enum('GOPRO_REQUEST_STATUS')]).
message_field('RPM', rpm1, float, []).
message_field('RPM', rpm2, float, []).
message_field('DEVICE_OP_READ', target_system, uint8_t, []).
message_field('DEVICE_OP_READ', target_component, uint8_t, []).
message_field('DEVICE_OP_READ', request_id, uint32_t, []).
message_field('DEVICE_OP_READ', bustype, uint8_t, [enum('DEVICE_OP_BUSTYPE')]).
message_field('DEVICE_OP_READ', bus, uint8_t, []).
message_field('DEVICE_OP_READ', address, uint8_t, []).
message_field('DEVICE_OP_READ', busname, 'char[40]', []).
message_field('DEVICE_OP_READ', regstart, uint8_t, []).
message_field('DEVICE_OP_READ', count, uint8_t, []).
message_field('DEVICE_OP_READ', bank, uint8_t, []).
message_field('DEVICE_OP_READ_REPLY', request_id, uint32_t, []).
message_field('DEVICE_OP_READ_REPLY', result, uint8_t, []).
message_field('DEVICE_OP_READ_REPLY', regstart, uint8_t, []).
message_field('DEVICE_OP_READ_REPLY', count, uint8_t, []).
message_field('DEVICE_OP_READ_REPLY', data, 'uint8_t[128]', []).
message_field('DEVICE_OP_READ_REPLY', bank, uint8_t, []).
message_field('DEVICE_OP_WRITE', target_system, uint8_t, []).
message_field('DEVICE_OP_WRITE', target_component, uint8_t, []).
message_field('DEVICE_OP_WRITE', request_id, uint32_t, []).
message_field('DEVICE_OP_WRITE', bustype, uint8_t, [enum('DEVICE_OP_BUSTYPE')]).
message_field('DEVICE_OP_WRITE', bus, uint8_t, []).
message_field('DEVICE_OP_WRITE', address, uint8_t, []).
message_field('DEVICE_OP_WRITE', busname, 'char[40]', []).
message_field('DEVICE_OP_WRITE', regstart, uint8_t, []).
message_field('DEVICE_OP_WRITE', count, uint8_t, []).
message_field('DEVICE_OP_WRITE', data, 'uint8_t[128]', []).
message_field('DEVICE_OP_WRITE', bank, uint8_t, []).
message_field('DEVICE_OP_WRITE_REPLY', request_id, uint32_t, []).
message_field('DEVICE_OP_WRITE_REPLY', result, uint8_t, []).
message_field('ADAP_TUNING', axis, uint8_t, [enum('PID_TUNING_AXIS'), instance(true)]).
message_field('ADAP_TUNING', desired, float, [units('deg/s')]).
message_field('ADAP_TUNING', achieved, float, [units('deg/s')]).
message_field('ADAP_TUNING', error, float, []).
message_field('ADAP_TUNING', theta, float, []).
message_field('ADAP_TUNING', omega, float, []).
message_field('ADAP_TUNING', sigma, float, []).
message_field('ADAP_TUNING', theta_dot, float, []).
message_field('ADAP_TUNING', omega_dot, float, []).
message_field('ADAP_TUNING', sigma_dot, float, []).
message_field('ADAP_TUNING', f, float, []).
message_field('ADAP_TUNING', f_dot, float, []).
message_field('ADAP_TUNING', u, float, []).
message_field('VISION_POSITION_DELTA', time_usec, uint64_t, [units(us)]).
message_field('VISION_POSITION_DELTA', time_delta_usec, uint64_t, [units(us)]).
message_field('VISION_POSITION_DELTA', angle_delta, 'float[3]', [units(rad)]).
message_field('VISION_POSITION_DELTA', position_delta, 'float[3]', [units(m)]).
message_field('VISION_POSITION_DELTA', confidence, float, [units('%')]).
message_field('AOA_SSA', time_usec, uint64_t, [units(us)]).
message_field('AOA_SSA', 'AOA', float, [units(deg)]).
message_field('AOA_SSA', 'SSA', float, [units(deg)]).
message_field('ESC_TELEMETRY_1_TO_4', temperature, 'uint8_t[4]', [units(degC)]).
message_field('ESC_TELEMETRY_1_TO_4', voltage, 'uint16_t[4]', [units(cV)]).
message_field('ESC_TELEMETRY_1_TO_4', current, 'uint16_t[4]', [units(cA)]).
message_field('ESC_TELEMETRY_1_TO_4', totalcurrent, 'uint16_t[4]', [units(mAh)]).
message_field('ESC_TELEMETRY_1_TO_4', rpm, 'uint16_t[4]', [units(rpm)]).
message_field('ESC_TELEMETRY_1_TO_4', count, 'uint16_t[4]', []).
message_field('ESC_TELEMETRY_5_TO_8', temperature, 'uint8_t[4]', [units(degC)]).
message_field('ESC_TELEMETRY_5_TO_8', voltage, 'uint16_t[4]', [units(cV)]).
message_field('ESC_TELEMETRY_5_TO_8', current, 'uint16_t[4]', [units(cA)]).
message_field('ESC_TELEMETRY_5_TO_8', totalcurrent, 'uint16_t[4]', [units(mAh)]).
message_field('ESC_TELEMETRY_5_TO_8', rpm, 'uint16_t[4]', [units(rpm)]).
message_field('ESC_TELEMETRY_5_TO_8', count, 'uint16_t[4]', []).
message_field('ESC_TELEMETRY_9_TO_12', temperature, 'uint8_t[4]', [units(degC)]).
message_field('ESC_TELEMETRY_9_TO_12', voltage, 'uint16_t[4]', [units(cV)]).
message_field('ESC_TELEMETRY_9_TO_12', current, 'uint16_t[4]', [units(cA)]).
message_field('ESC_TELEMETRY_9_TO_12', totalcurrent, 'uint16_t[4]', [units(mAh)]).
message_field('ESC_TELEMETRY_9_TO_12', rpm, 'uint16_t[4]', [units(rpm)]).
message_field('ESC_TELEMETRY_9_TO_12', count, 'uint16_t[4]', []).
message_field('OSD_PARAM_CONFIG', target_system, uint8_t, []).
message_field('OSD_PARAM_CONFIG', target_component, uint8_t, []).
message_field('OSD_PARAM_CONFIG', request_id, uint32_t, []).
message_field('OSD_PARAM_CONFIG', osd_screen, uint8_t, []).
message_field('OSD_PARAM_CONFIG', osd_index, uint8_t, []).
message_field('OSD_PARAM_CONFIG', param_id, 'char[16]', []).
message_field('OSD_PARAM_CONFIG', config_type, uint8_t, [enum('OSD_PARAM_CONFIG_TYPE')]).
message_field('OSD_PARAM_CONFIG', min_value, float, []).
message_field('OSD_PARAM_CONFIG', max_value, float, []).
message_field('OSD_PARAM_CONFIG', increment, float, []).
message_field('OSD_PARAM_CONFIG_REPLY', request_id, uint32_t, []).
message_field('OSD_PARAM_CONFIG_REPLY', result, uint8_t, [enum('OSD_PARAM_CONFIG_ERROR')]).
message_field('OSD_PARAM_SHOW_CONFIG', target_system, uint8_t, []).
message_field('OSD_PARAM_SHOW_CONFIG', target_component, uint8_t, []).
message_field('OSD_PARAM_SHOW_CONFIG', request_id, uint32_t, []).
message_field('OSD_PARAM_SHOW_CONFIG', osd_screen, uint8_t, []).
message_field('OSD_PARAM_SHOW_CONFIG', osd_index, uint8_t, []).
message_field('OSD_PARAM_SHOW_CONFIG_REPLY', request_id, uint32_t, []).
message_field('OSD_PARAM_SHOW_CONFIG_REPLY', result, uint8_t, [enum('OSD_PARAM_CONFIG_ERROR')]).
message_field('OSD_PARAM_SHOW_CONFIG_REPLY', param_id, 'char[16]', []).
message_field('OSD_PARAM_SHOW_CONFIG_REPLY', config_type, uint8_t, [enum('OSD_PARAM_CONFIG_TYPE')]).
message_field('OSD_PARAM_SHOW_CONFIG_REPLY', min_value, float, []).
message_field('OSD_PARAM_SHOW_CONFIG_REPLY', max_value, float, []).
message_field('OSD_PARAM_SHOW_CONFIG_REPLY', increment, float, []).
message_field('OBSTACLE_DISTANCE_3D', time_boot_ms, uint32_t, [units(ms)]).
message_field('OBSTACLE_DISTANCE_3D', sensor_type, uint8_t, [enum('MAV_DISTANCE_SENSOR')]).
message_field('OBSTACLE_DISTANCE_3D', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('OBSTACLE_DISTANCE_3D', obstacle_id, uint16_t, [instance(true)]).
message_field('OBSTACLE_DISTANCE_3D', x, float, [units(m)]).
message_field('OBSTACLE_DISTANCE_3D', y, float, [units(m)]).
message_field('OBSTACLE_DISTANCE_3D', z, float, [units(m)]).
message_field('OBSTACLE_DISTANCE_3D', min_distance, float, [units(m)]).
message_field('OBSTACLE_DISTANCE_3D', max_distance, float, [units(m)]).
message_field('WATER_DEPTH', time_boot_ms, uint32_t, [units(ms)]).
message_field('WATER_DEPTH', id, uint8_t, [instance(true)]).
message_field('WATER_DEPTH', healthy, uint8_t, []).
message_field('WATER_DEPTH', lat, int32_t, [units(degE7)]).
message_field('WATER_DEPTH', lng, int32_t, [units(degE7)]).
message_field('WATER_DEPTH', alt, float, [units(m)]).
message_field('WATER_DEPTH', roll, float, [units(rad)]).
message_field('WATER_DEPTH', pitch, float, [units(rad)]).
message_field('WATER_DEPTH', yaw, float, [units(rad)]).
message_field('WATER_DEPTH', distance, float, [units(m)]).
message_field('WATER_DEPTH', temperature, float, [units(degC)]).
message_field('MCU_STATUS', id, uint8_t, [instance(true)]).
message_field('MCU_STATUS', 'MCU_temperature', int16_t, [units(cdegC)]).
message_field('MCU_STATUS', 'MCU_voltage', uint16_t, [units(mV)]).
message_field('MCU_STATUS', 'MCU_voltage_min', uint16_t, [units(mV)]).
message_field('MCU_STATUS', 'MCU_voltage_max', uint16_t, [units(mV)]).
message_field('COMMAND_INT_STAMPED', utc_time, uint32_t, []).
message_field('COMMAND_INT_STAMPED', vehicle_timestamp, uint64_t, []).
message_field('COMMAND_INT_STAMPED', target_system, uint8_t, []).
message_field('COMMAND_INT_STAMPED', target_component, uint8_t, []).
message_field('COMMAND_INT_STAMPED', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('COMMAND_INT_STAMPED', command, uint16_t, [enum('MAV_CMD')]).
message_field('COMMAND_INT_STAMPED', current, uint8_t, []).
message_field('COMMAND_INT_STAMPED', autocontinue, uint8_t, []).
message_field('COMMAND_INT_STAMPED', param1, float, []).
message_field('COMMAND_INT_STAMPED', param2, float, []).
message_field('COMMAND_INT_STAMPED', param3, float, []).
message_field('COMMAND_INT_STAMPED', param4, float, []).
message_field('COMMAND_INT_STAMPED', x, int32_t, []).
message_field('COMMAND_INT_STAMPED', y, int32_t, []).
message_field('COMMAND_INT_STAMPED', z, float, []).
message_field('COMMAND_LONG_STAMPED', utc_time, uint32_t, []).
message_field('COMMAND_LONG_STAMPED', vehicle_timestamp, uint64_t, []).
message_field('COMMAND_LONG_STAMPED', target_system, uint8_t, []).
message_field('COMMAND_LONG_STAMPED', target_component, uint8_t, []).
message_field('COMMAND_LONG_STAMPED', command, uint16_t, [enum('MAV_CMD')]).
message_field('COMMAND_LONG_STAMPED', confirmation, uint8_t, []).
message_field('COMMAND_LONG_STAMPED', param1, float, []).
message_field('COMMAND_LONG_STAMPED', param2, float, []).
message_field('COMMAND_LONG_STAMPED', param3, float, []).
message_field('COMMAND_LONG_STAMPED', param4, float, []).
message_field('COMMAND_LONG_STAMPED', param5, float, []).
message_field('COMMAND_LONG_STAMPED', param6, float, []).
message_field('COMMAND_LONG_STAMPED', param7, float, []).
message_field('SENS_POWER', adc121_vspb_volt, float, [units('V')]).
message_field('SENS_POWER', adc121_cspb_amp, float, [units('A')]).
message_field('SENS_POWER', adc121_cs1_amp, float, [units('A')]).
message_field('SENS_POWER', adc121_cs2_amp, float, [units('A')]).
message_field('SENS_MPPT', mppt_timestamp, uint64_t, [units(us)]).
message_field('SENS_MPPT', mppt1_volt, float, [units('V')]).
message_field('SENS_MPPT', mppt1_amp, float, [units('A')]).
message_field('SENS_MPPT', mppt1_pwm, uint16_t, [units(us)]).
message_field('SENS_MPPT', mppt1_status, uint8_t, []).
message_field('SENS_MPPT', mppt2_volt, float, [units('V')]).
message_field('SENS_MPPT', mppt2_amp, float, [units('A')]).
message_field('SENS_MPPT', mppt2_pwm, uint16_t, [units(us)]).
message_field('SENS_MPPT', mppt2_status, uint8_t, []).
message_field('SENS_MPPT', mppt3_volt, float, [units('V')]).
message_field('SENS_MPPT', mppt3_amp, float, [units('A')]).
message_field('SENS_MPPT', mppt3_pwm, uint16_t, [units(us)]).
message_field('SENS_MPPT', mppt3_status, uint8_t, []).
message_field('ASLCTRL_DATA', timestamp, uint64_t, [units(us)]).
message_field('ASLCTRL_DATA', aslctrl_mode, uint8_t, []).
message_field('ASLCTRL_DATA', h, float, []).
message_field('ASLCTRL_DATA', hRef, float, []).
message_field('ASLCTRL_DATA', hRef_t, float, []).
message_field('ASLCTRL_DATA', 'PitchAngle', float, [units(deg)]).
message_field('ASLCTRL_DATA', 'PitchAngleRef', float, [units(deg)]).
message_field('ASLCTRL_DATA', q, float, []).
message_field('ASLCTRL_DATA', qRef, float, []).
message_field('ASLCTRL_DATA', uElev, float, []).
message_field('ASLCTRL_DATA', uThrot, float, []).
message_field('ASLCTRL_DATA', uThrot2, float, []).
message_field('ASLCTRL_DATA', nZ, float, []).
message_field('ASLCTRL_DATA', 'AirspeedRef', float, [units('m/s')]).
message_field('ASLCTRL_DATA', 'SpoilersEngaged', uint8_t, []).
message_field('ASLCTRL_DATA', 'YawAngle', float, [units(deg)]).
message_field('ASLCTRL_DATA', 'YawAngleRef', float, [units(deg)]).
message_field('ASLCTRL_DATA', 'RollAngle', float, [units(deg)]).
message_field('ASLCTRL_DATA', 'RollAngleRef', float, [units(deg)]).
message_field('ASLCTRL_DATA', p, float, []).
message_field('ASLCTRL_DATA', pRef, float, []).
message_field('ASLCTRL_DATA', r, float, []).
message_field('ASLCTRL_DATA', rRef, float, []).
message_field('ASLCTRL_DATA', uAil, float, []).
message_field('ASLCTRL_DATA', uRud, float, []).
message_field('ASLCTRL_DEBUG', i32_1, uint32_t, []).
message_field('ASLCTRL_DEBUG', i8_1, uint8_t, []).
message_field('ASLCTRL_DEBUG', i8_2, uint8_t, []).
message_field('ASLCTRL_DEBUG', f_1, float, []).
message_field('ASLCTRL_DEBUG', f_2, float, []).
message_field('ASLCTRL_DEBUG', f_3, float, []).
message_field('ASLCTRL_DEBUG', f_4, float, []).
message_field('ASLCTRL_DEBUG', f_5, float, []).
message_field('ASLCTRL_DEBUG', f_6, float, []).
message_field('ASLCTRL_DEBUG', f_7, float, []).
message_field('ASLCTRL_DEBUG', f_8, float, []).
message_field('ASLUAV_STATUS', 'LED_status', uint8_t, []).
message_field('ASLUAV_STATUS', 'SATCOM_status', uint8_t, []).
message_field('ASLUAV_STATUS', 'Servo_status', 'uint8_t[8]', []).
message_field('ASLUAV_STATUS', 'Motor_rpm', float, []).
message_field('EKF_EXT', timestamp, uint64_t, [units(us)]).
message_field('EKF_EXT', 'Windspeed', float, [units('m/s')]).
message_field('EKF_EXT', 'WindDir', float, [units(rad)]).
message_field('EKF_EXT', 'WindZ', float, [units('m/s')]).
message_field('EKF_EXT', 'Airspeed', float, [units('m/s')]).
message_field('EKF_EXT', beta, float, [units(rad)]).
message_field('EKF_EXT', alpha, float, [units(rad)]).
message_field('ASL_OBCTRL', timestamp, uint64_t, [units(us)]).
message_field('ASL_OBCTRL', uElev, float, []).
message_field('ASL_OBCTRL', uThrot, float, []).
message_field('ASL_OBCTRL', uThrot2, float, []).
message_field('ASL_OBCTRL', uAilL, float, []).
message_field('ASL_OBCTRL', uAilR, float, []).
message_field('ASL_OBCTRL', uRud, float, []).
message_field('ASL_OBCTRL', obctrl_status, uint8_t, []).
message_field('SENS_ATMOS', timestamp, uint64_t, [units(us)]).
message_field('SENS_ATMOS', 'TempAmbient', float, [units(degC)]).
message_field('SENS_ATMOS', 'Humidity', float, [units('%')]).
message_field('SENS_BATMON', batmon_timestamp, uint64_t, [units(us)]).
message_field('SENS_BATMON', temperature, float, [units(degC)]).
message_field('SENS_BATMON', voltage, uint16_t, [units(mV)]).
message_field('SENS_BATMON', current, int16_t, [units(mA)]).
message_field('SENS_BATMON', 'SoC', uint8_t, []).
message_field('SENS_BATMON', batterystatus, uint16_t, []).
message_field('SENS_BATMON', serialnumber, uint16_t, []).
message_field('SENS_BATMON', safetystatus, uint32_t, []).
message_field('SENS_BATMON', operationstatus, uint32_t, []).
message_field('SENS_BATMON', cellvoltage1, uint16_t, [units(mV)]).
message_field('SENS_BATMON', cellvoltage2, uint16_t, [units(mV)]).
message_field('SENS_BATMON', cellvoltage3, uint16_t, [units(mV)]).
message_field('SENS_BATMON', cellvoltage4, uint16_t, [units(mV)]).
message_field('SENS_BATMON', cellvoltage5, uint16_t, [units(mV)]).
message_field('SENS_BATMON', cellvoltage6, uint16_t, [units(mV)]).
message_field('FW_SOARING_DATA', timestamp, uint64_t, [units(ms)]).
message_field('FW_SOARING_DATA', timestampModeChanged, uint64_t, [units(ms)]).
message_field('FW_SOARING_DATA', xW, float, [units('m/s')]).
message_field('FW_SOARING_DATA', xR, float, [units(m)]).
message_field('FW_SOARING_DATA', xLat, float, [units(deg)]).
message_field('FW_SOARING_DATA', xLon, float, [units(deg)]).
message_field('FW_SOARING_DATA', 'VarW', float, []).
message_field('FW_SOARING_DATA', 'VarR', float, []).
message_field('FW_SOARING_DATA', 'VarLat', float, []).
message_field('FW_SOARING_DATA', 'VarLon', float, []).
message_field('FW_SOARING_DATA', 'LoiterRadius', float, [units(m)]).
message_field('FW_SOARING_DATA', 'LoiterDirection', float, []).
message_field('FW_SOARING_DATA', 'DistToSoarPoint', float, [units(m)]).
message_field('FW_SOARING_DATA', vSinkExp, float, [units('m/s')]).
message_field('FW_SOARING_DATA', z1_LocalUpdraftSpeed, float, [units('m/s')]).
message_field('FW_SOARING_DATA', z2_DeltaRoll, float, [units(deg)]).
message_field('FW_SOARING_DATA', z1_exp, float, []).
message_field('FW_SOARING_DATA', z2_exp, float, []).
message_field('FW_SOARING_DATA', 'ThermalGSNorth', float, [units('m/s')]).
message_field('FW_SOARING_DATA', 'ThermalGSEast', float, [units('m/s')]).
message_field('FW_SOARING_DATA', 'TSE_dot', float, [units('m/s')]).
message_field('FW_SOARING_DATA', 'DebugVar1', float, []).
message_field('FW_SOARING_DATA', 'DebugVar2', float, []).
message_field('FW_SOARING_DATA', 'ControlMode', uint8_t, []).
message_field('FW_SOARING_DATA', valid, uint8_t, []).
message_field('SENSORPOD_STATUS', timestamp, uint64_t, [units(ms)]).
message_field('SENSORPOD_STATUS', visensor_rate_1, uint8_t, []).
message_field('SENSORPOD_STATUS', visensor_rate_2, uint8_t, []).
message_field('SENSORPOD_STATUS', visensor_rate_3, uint8_t, []).
message_field('SENSORPOD_STATUS', visensor_rate_4, uint8_t, []).
message_field('SENSORPOD_STATUS', recording_nodes_count, uint8_t, []).
message_field('SENSORPOD_STATUS', cpu_temp, uint8_t, [units(degC)]).
message_field('SENSORPOD_STATUS', free_space, uint16_t, []).
message_field('SENS_POWER_BOARD', timestamp, uint64_t, [units(us)]).
message_field('SENS_POWER_BOARD', pwr_brd_status, uint8_t, []).
message_field('SENS_POWER_BOARD', pwr_brd_led_status, uint8_t, []).
message_field('SENS_POWER_BOARD', pwr_brd_system_volt, float, [units('V')]).
message_field('SENS_POWER_BOARD', pwr_brd_servo_volt, float, [units('V')]).
message_field('SENS_POWER_BOARD', pwr_brd_digital_volt, float, [units('V')]).
message_field('SENS_POWER_BOARD', pwr_brd_mot_l_amp, float, [units('A')]).
message_field('SENS_POWER_BOARD', pwr_brd_mot_r_amp, float, [units('A')]).
message_field('SENS_POWER_BOARD', pwr_brd_analog_amp, float, [units('A')]).
message_field('SENS_POWER_BOARD', pwr_brd_digital_amp, float, [units('A')]).
message_field('SENS_POWER_BOARD', pwr_brd_ext_amp, float, [units('A')]).
message_field('SENS_POWER_BOARD', pwr_brd_aux_amp, float, [units('A')]).
message_field('GSM_LINK_STATUS', timestamp, uint64_t, [units(us)]).
message_field('GSM_LINK_STATUS', gsm_modem_type, uint8_t, [enum('GSM_MODEM_TYPE')]).
message_field('GSM_LINK_STATUS', gsm_link_type, uint8_t, [enum('GSM_LINK_TYPE')]).
message_field('GSM_LINK_STATUS', rssi, uint8_t, []).
message_field('GSM_LINK_STATUS', rsrp_rscp, uint8_t, []).
message_field('GSM_LINK_STATUS', sinr_ecio, uint8_t, []).
message_field('GSM_LINK_STATUS', rsrq, uint8_t, []).
message_field('SATCOM_LINK_STATUS', timestamp, uint64_t, [units(us)]).
message_field('SATCOM_LINK_STATUS', last_heartbeat, uint64_t, [units(us)]).
message_field('SATCOM_LINK_STATUS', failed_sessions, uint16_t, []).
message_field('SATCOM_LINK_STATUS', successful_sessions, uint16_t, []).
message_field('SATCOM_LINK_STATUS', signal_quality, uint8_t, []).
message_field('SATCOM_LINK_STATUS', ring_pending, uint8_t, []).
message_field('SATCOM_LINK_STATUS', tx_session_pending, uint8_t, []).
message_field('SATCOM_LINK_STATUS', rx_session_pending, uint8_t, []).
message_field('SENSOR_AIRFLOW_ANGLES', timestamp, uint64_t, [units(us)]).
message_field('SENSOR_AIRFLOW_ANGLES', angleofattack, float, [units(deg)]).
message_field('SENSOR_AIRFLOW_ANGLES', angleofattack_valid, uint8_t, []).
message_field('SENSOR_AIRFLOW_ANGLES', sideslip, float, [units(deg)]).
message_field('SENSOR_AIRFLOW_ANGLES', sideslip_valid, uint8_t, []).
message_field('SYS_STATUS', onboard_control_sensors_present, uint32_t, [enum('MAV_SYS_STATUS_SENSOR'), display(bitmask), print_format('0x%04x')]).
message_field('SYS_STATUS', onboard_control_sensors_enabled, uint32_t, [enum('MAV_SYS_STATUS_SENSOR'), display(bitmask), print_format('0x%04x')]).
message_field('SYS_STATUS', onboard_control_sensors_health, uint32_t, [enum('MAV_SYS_STATUS_SENSOR'), display(bitmask), print_format('0x%04x')]).
message_field('SYS_STATUS', load, uint16_t, [units('d%')]).
message_field('SYS_STATUS', voltage_battery, uint16_t, [units(mV), invalid('UINT16_MAX')]).
message_field('SYS_STATUS', current_battery, int16_t, [units(cA), invalid('-1')]).
message_field('SYS_STATUS', battery_remaining, int8_t, [units('%'), invalid('-1')]).
message_field('SYS_STATUS', drop_rate_comm, uint16_t, [units('c%')]).
message_field('SYS_STATUS', errors_comm, uint16_t, []).
message_field('SYS_STATUS', errors_count1, uint16_t, []).
message_field('SYS_STATUS', errors_count2, uint16_t, []).
message_field('SYS_STATUS', errors_count3, uint16_t, []).
message_field('SYS_STATUS', errors_count4, uint16_t, []).
message_field('SYS_STATUS', onboard_control_sensors_present_extended, uint32_t, [enum('MAV_SYS_STATUS_SENSOR_EXTENDED'), display(bitmask), print_format('0x%04x')]).
message_field('SYS_STATUS', onboard_control_sensors_enabled_extended, uint32_t, [enum('MAV_SYS_STATUS_SENSOR_EXTENDED'), display(bitmask), print_format('0x%04x')]).
message_field('SYS_STATUS', onboard_control_sensors_health_extended, uint32_t, [enum('MAV_SYS_STATUS_SENSOR_EXTENDED'), display(bitmask), print_format('0x%04x')]).
message_field('SYSTEM_TIME', time_unix_usec, uint64_t, [units(us)]).
message_field('SYSTEM_TIME', time_boot_ms, uint32_t, [units(ms)]).
message_field('PING', time_usec, uint64_t, [units(us)]).
message_field('PING', seq, uint32_t, []).
message_field('PING', target_system, uint8_t, []).
message_field('PING', target_component, uint8_t, []).
message_field('CHANGE_OPERATOR_CONTROL', target_system, uint8_t, []).
message_field('CHANGE_OPERATOR_CONTROL', control_request, uint8_t, []).
message_field('CHANGE_OPERATOR_CONTROL', version, uint8_t, [units(rad)]).
message_field('CHANGE_OPERATOR_CONTROL', passkey, 'char[25]', []).
message_field('CHANGE_OPERATOR_CONTROL_ACK', gcs_system_id, uint8_t, []).
message_field('CHANGE_OPERATOR_CONTROL_ACK', control_request, uint8_t, []).
message_field('CHANGE_OPERATOR_CONTROL_ACK', ack, uint8_t, []).
message_field('AUTH_KEY', key, 'char[32]', []).
message_field('LINK_NODE_STATUS', timestamp, uint64_t, [units(ms)]).
message_field('LINK_NODE_STATUS', tx_buf, uint8_t, [units('%')]).
message_field('LINK_NODE_STATUS', rx_buf, uint8_t, [units('%')]).
message_field('LINK_NODE_STATUS', tx_rate, uint32_t, [units('bytes/s')]).
message_field('LINK_NODE_STATUS', rx_rate, uint32_t, [units('bytes/s')]).
message_field('LINK_NODE_STATUS', rx_parse_err, uint16_t, [units(bytes)]).
message_field('LINK_NODE_STATUS', tx_overflows, uint16_t, [units(bytes)]).
message_field('LINK_NODE_STATUS', rx_overflows, uint16_t, [units(bytes)]).
message_field('LINK_NODE_STATUS', messages_sent, uint32_t, []).
message_field('LINK_NODE_STATUS', messages_received, uint32_t, []).
message_field('LINK_NODE_STATUS', messages_lost, uint32_t, []).
message_field('SET_MODE', target_system, uint8_t, []).
message_field('SET_MODE', base_mode, uint8_t, [enum('MAV_MODE')]).
message_field('SET_MODE', custom_mode, uint32_t, []).
message_field('PARAM_REQUEST_READ', target_system, uint8_t, []).
message_field('PARAM_REQUEST_READ', target_component, uint8_t, []).
message_field('PARAM_REQUEST_READ', param_id, 'char[16]', []).
message_field('PARAM_REQUEST_READ', param_index, int16_t, [invalid('-1')]).
message_field('PARAM_REQUEST_LIST', target_system, uint8_t, []).
message_field('PARAM_REQUEST_LIST', target_component, uint8_t, []).
message_field('PARAM_VALUE', param_id, 'char[16]', []).
message_field('PARAM_VALUE', param_value, float, []).
message_field('PARAM_VALUE', param_type, uint8_t, [enum('MAV_PARAM_TYPE')]).
message_field('PARAM_VALUE', param_count, uint16_t, []).
message_field('PARAM_VALUE', param_index, uint16_t, []).
message_field('PARAM_SET', target_system, uint8_t, []).
message_field('PARAM_SET', target_component, uint8_t, []).
message_field('PARAM_SET', param_id, 'char[16]', []).
message_field('PARAM_SET', param_value, float, []).
message_field('PARAM_SET', param_type, uint8_t, [enum('MAV_PARAM_TYPE')]).
message_field('GPS_RAW_INT', time_usec, uint64_t, [units(us)]).
message_field('GPS_RAW_INT', fix_type, uint8_t, [enum('GPS_FIX_TYPE')]).
message_field('GPS_RAW_INT', lat, int32_t, [units(degE7)]).
message_field('GPS_RAW_INT', lon, int32_t, [units(degE7)]).
message_field('GPS_RAW_INT', alt, int32_t, [units(mm)]).
message_field('GPS_RAW_INT', eph, uint16_t, [invalid('UINT16_MAX')]).
message_field('GPS_RAW_INT', epv, uint16_t, [invalid('UINT16_MAX')]).
message_field('GPS_RAW_INT', vel, uint16_t, [units('cm/s'), invalid('UINT16_MAX')]).
message_field('GPS_RAW_INT', cog, uint16_t, [units(cdeg), invalid('UINT16_MAX')]).
message_field('GPS_RAW_INT', satellites_visible, uint8_t, [invalid('UINT8_MAX')]).
message_field('GPS_RAW_INT', alt_ellipsoid, int32_t, [units(mm)]).
message_field('GPS_RAW_INT', h_acc, uint32_t, [units(mm)]).
message_field('GPS_RAW_INT', v_acc, uint32_t, [units(mm)]).
message_field('GPS_RAW_INT', vel_acc, uint32_t, [units(mm)]).
message_field('GPS_RAW_INT', hdg_acc, uint32_t, [units(degE5)]).
message_field('GPS_RAW_INT', yaw, uint16_t, [units(cdeg), invalid('0')]).
message_field('GPS_STATUS', satellites_visible, uint8_t, []).
message_field('GPS_STATUS', satellite_prn, 'uint8_t[20]', []).
message_field('GPS_STATUS', satellite_used, 'uint8_t[20]', []).
message_field('GPS_STATUS', satellite_elevation, 'uint8_t[20]', [units(deg)]).
message_field('GPS_STATUS', satellite_azimuth, 'uint8_t[20]', [units(deg)]).
message_field('GPS_STATUS', satellite_snr, 'uint8_t[20]', [units(dB)]).
message_field('SCALED_IMU', time_boot_ms, uint32_t, [units(ms)]).
message_field('SCALED_IMU', xacc, int16_t, [units(mG)]).
message_field('SCALED_IMU', yacc, int16_t, [units(mG)]).
message_field('SCALED_IMU', zacc, int16_t, [units(mG)]).
message_field('SCALED_IMU', xgyro, int16_t, [units('mrad/s')]).
message_field('SCALED_IMU', ygyro, int16_t, [units('mrad/s')]).
message_field('SCALED_IMU', zgyro, int16_t, [units('mrad/s')]).
message_field('SCALED_IMU', xmag, int16_t, [units(mgauss)]).
message_field('SCALED_IMU', ymag, int16_t, [units(mgauss)]).
message_field('SCALED_IMU', zmag, int16_t, [units(mgauss)]).
message_field('SCALED_IMU', temperature, int16_t, [units(cdegC)]).
message_field('RAW_IMU', time_usec, uint64_t, [units(us)]).
message_field('RAW_IMU', xacc, int16_t, []).
message_field('RAW_IMU', yacc, int16_t, []).
message_field('RAW_IMU', zacc, int16_t, []).
message_field('RAW_IMU', xgyro, int16_t, []).
message_field('RAW_IMU', ygyro, int16_t, []).
message_field('RAW_IMU', zgyro, int16_t, []).
message_field('RAW_IMU', xmag, int16_t, []).
message_field('RAW_IMU', ymag, int16_t, []).
message_field('RAW_IMU', zmag, int16_t, []).
message_field('RAW_IMU', id, uint8_t, [instance(true)]).
message_field('RAW_IMU', temperature, int16_t, [units(cdegC)]).
message_field('RAW_PRESSURE', time_usec, uint64_t, [units(us)]).
message_field('RAW_PRESSURE', press_abs, int16_t, []).
message_field('RAW_PRESSURE', press_diff1, int16_t, [invalid('0')]).
message_field('RAW_PRESSURE', press_diff2, int16_t, [invalid('0')]).
message_field('RAW_PRESSURE', temperature, int16_t, []).
message_field('SCALED_PRESSURE', time_boot_ms, uint32_t, [units(ms)]).
message_field('SCALED_PRESSURE', press_abs, float, [units(hPa)]).
message_field('SCALED_PRESSURE', press_diff, float, [units(hPa)]).
message_field('SCALED_PRESSURE', temperature, int16_t, [units(cdegC)]).
message_field('SCALED_PRESSURE', temperature_press_diff, int16_t, [units(cdegC), invalid('0')]).
message_field('ATTITUDE', time_boot_ms, uint32_t, [units(ms)]).
message_field('ATTITUDE', roll, float, [units(rad)]).
message_field('ATTITUDE', pitch, float, [units(rad)]).
message_field('ATTITUDE', yaw, float, [units(rad)]).
message_field('ATTITUDE', rollspeed, float, [units('rad/s')]).
message_field('ATTITUDE', pitchspeed, float, [units('rad/s')]).
message_field('ATTITUDE', yawspeed, float, [units('rad/s')]).
message_field('ATTITUDE_QUATERNION', time_boot_ms, uint32_t, [units(ms)]).
message_field('ATTITUDE_QUATERNION', q1, float, []).
message_field('ATTITUDE_QUATERNION', q2, float, []).
message_field('ATTITUDE_QUATERNION', q3, float, []).
message_field('ATTITUDE_QUATERNION', q4, float, []).
message_field('ATTITUDE_QUATERNION', rollspeed, float, [units('rad/s')]).
message_field('ATTITUDE_QUATERNION', pitchspeed, float, [units('rad/s')]).
message_field('ATTITUDE_QUATERNION', yawspeed, float, [units('rad/s')]).
message_field('ATTITUDE_QUATERNION', repr_offset_q, 'float[4]', [invalid('[0]')]).
message_field('LOCAL_POSITION_NED', time_boot_ms, uint32_t, [units(ms)]).
message_field('LOCAL_POSITION_NED', x, float, [units(m)]).
message_field('LOCAL_POSITION_NED', y, float, [units(m)]).
message_field('LOCAL_POSITION_NED', z, float, [units(m)]).
message_field('LOCAL_POSITION_NED', vx, float, [units('m/s')]).
message_field('LOCAL_POSITION_NED', vy, float, [units('m/s')]).
message_field('LOCAL_POSITION_NED', vz, float, [units('m/s')]).
message_field('GLOBAL_POSITION_INT', time_boot_ms, uint32_t, [units(ms)]).
message_field('GLOBAL_POSITION_INT', lat, int32_t, [units(degE7)]).
message_field('GLOBAL_POSITION_INT', lon, int32_t, [units(degE7)]).
message_field('GLOBAL_POSITION_INT', alt, int32_t, [units(mm)]).
message_field('GLOBAL_POSITION_INT', relative_alt, int32_t, [units(mm)]).
message_field('GLOBAL_POSITION_INT', vx, int16_t, [units('cm/s')]).
message_field('GLOBAL_POSITION_INT', vy, int16_t, [units('cm/s')]).
message_field('GLOBAL_POSITION_INT', vz, int16_t, [units('cm/s')]).
message_field('GLOBAL_POSITION_INT', hdg, uint16_t, [units(cdeg), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_SCALED', time_boot_ms, uint32_t, [units(ms)]).
message_field('RC_CHANNELS_SCALED', port, uint8_t, []).
message_field('RC_CHANNELS_SCALED', chan1_scaled, int16_t, [invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_SCALED', chan2_scaled, int16_t, [invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_SCALED', chan3_scaled, int16_t, [invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_SCALED', chan4_scaled, int16_t, [invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_SCALED', chan5_scaled, int16_t, [invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_SCALED', chan6_scaled, int16_t, [invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_SCALED', chan7_scaled, int16_t, [invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_SCALED', chan8_scaled, int16_t, [invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_SCALED', rssi, uint8_t, [invalid('UINT8_MAX')]).
message_field('RC_CHANNELS_RAW', time_boot_ms, uint32_t, [units(ms)]).
message_field('RC_CHANNELS_RAW', port, uint8_t, []).
message_field('RC_CHANNELS_RAW', chan1_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_RAW', chan2_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_RAW', chan3_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_RAW', chan4_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_RAW', chan5_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_RAW', chan6_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_RAW', chan7_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_RAW', chan8_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_RAW', rssi, uint8_t, [invalid('UINT8_MAX')]).
message_field('SERVO_OUTPUT_RAW', time_usec, uint32_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', port, uint8_t, []).
message_field('SERVO_OUTPUT_RAW', servo1_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo2_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo3_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo4_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo5_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo6_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo7_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo8_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo9_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo10_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo11_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo12_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo13_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo14_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo15_raw, uint16_t, [units(us)]).
message_field('SERVO_OUTPUT_RAW', servo16_raw, uint16_t, [units(us)]).
message_field('MISSION_REQUEST_PARTIAL_LIST', target_system, uint8_t, []).
message_field('MISSION_REQUEST_PARTIAL_LIST', target_component, uint8_t, []).
message_field('MISSION_REQUEST_PARTIAL_LIST', start_index, int16_t, []).
message_field('MISSION_REQUEST_PARTIAL_LIST', end_index, int16_t, []).
message_field('MISSION_REQUEST_PARTIAL_LIST', mission_type, uint8_t, [enum('MAV_MISSION_TYPE')]).
message_field('MISSION_WRITE_PARTIAL_LIST', target_system, uint8_t, []).
message_field('MISSION_WRITE_PARTIAL_LIST', target_component, uint8_t, []).
message_field('MISSION_WRITE_PARTIAL_LIST', start_index, int16_t, []).
message_field('MISSION_WRITE_PARTIAL_LIST', end_index, int16_t, []).
message_field('MISSION_WRITE_PARTIAL_LIST', mission_type, uint8_t, [enum('MAV_MISSION_TYPE')]).
message_field('MISSION_ITEM', target_system, uint8_t, []).
message_field('MISSION_ITEM', target_component, uint8_t, []).
message_field('MISSION_ITEM', seq, uint16_t, []).
message_field('MISSION_ITEM', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('MISSION_ITEM', command, uint16_t, [enum('MAV_CMD')]).
message_field('MISSION_ITEM', current, uint8_t, []).
message_field('MISSION_ITEM', autocontinue, uint8_t, []).
message_field('MISSION_ITEM', param1, float, []).
message_field('MISSION_ITEM', param2, float, []).
message_field('MISSION_ITEM', param3, float, []).
message_field('MISSION_ITEM', param4, float, []).
message_field('MISSION_ITEM', x, float, []).
message_field('MISSION_ITEM', y, float, []).
message_field('MISSION_ITEM', z, float, []).
message_field('MISSION_ITEM', mission_type, uint8_t, [enum('MAV_MISSION_TYPE')]).
message_field('MISSION_REQUEST', target_system, uint8_t, []).
message_field('MISSION_REQUEST', target_component, uint8_t, []).
message_field('MISSION_REQUEST', seq, uint16_t, []).
message_field('MISSION_REQUEST', mission_type, uint8_t, [enum('MAV_MISSION_TYPE')]).
message_field('MISSION_SET_CURRENT', target_system, uint8_t, []).
message_field('MISSION_SET_CURRENT', target_component, uint8_t, []).
message_field('MISSION_SET_CURRENT', seq, uint16_t, []).
message_field('MISSION_CURRENT', seq, uint16_t, []).
message_field('MISSION_CURRENT', total, uint16_t, [invalid('UINT16_MAX')]).
message_field('MISSION_CURRENT', mission_state, uint8_t, [enum('MISSION_STATE'), invalid('0')]).
message_field('MISSION_CURRENT', mission_mode, uint8_t, [invalid('0')]).
message_field('MISSION_REQUEST_LIST', target_system, uint8_t, []).
message_field('MISSION_REQUEST_LIST', target_component, uint8_t, []).
message_field('MISSION_REQUEST_LIST', mission_type, uint8_t, [enum('MAV_MISSION_TYPE')]).
message_field('MISSION_COUNT', target_system, uint8_t, []).
message_field('MISSION_COUNT', target_component, uint8_t, []).
message_field('MISSION_COUNT', count, uint16_t, []).
message_field('MISSION_COUNT', mission_type, uint8_t, [enum('MAV_MISSION_TYPE')]).
message_field('MISSION_CLEAR_ALL', target_system, uint8_t, []).
message_field('MISSION_CLEAR_ALL', target_component, uint8_t, []).
message_field('MISSION_CLEAR_ALL', mission_type, uint8_t, [enum('MAV_MISSION_TYPE')]).
message_field('MISSION_ITEM_REACHED', seq, uint16_t, []).
message_field('MISSION_ACK', target_system, uint8_t, []).
message_field('MISSION_ACK', target_component, uint8_t, []).
message_field('MISSION_ACK', type, uint8_t, [enum('MAV_MISSION_RESULT')]).
message_field('MISSION_ACK', mission_type, uint8_t, [enum('MAV_MISSION_TYPE')]).
message_field('SET_GPS_GLOBAL_ORIGIN', target_system, uint8_t, []).
message_field('SET_GPS_GLOBAL_ORIGIN', latitude, int32_t, [units(degE7)]).
message_field('SET_GPS_GLOBAL_ORIGIN', longitude, int32_t, [units(degE7)]).
message_field('SET_GPS_GLOBAL_ORIGIN', altitude, int32_t, [units(mm)]).
message_field('SET_GPS_GLOBAL_ORIGIN', time_usec, uint64_t, [units(us)]).
message_field('GPS_GLOBAL_ORIGIN', latitude, int32_t, [units(degE7)]).
message_field('GPS_GLOBAL_ORIGIN', longitude, int32_t, [units(degE7)]).
message_field('GPS_GLOBAL_ORIGIN', altitude, int32_t, [units(mm)]).
message_field('GPS_GLOBAL_ORIGIN', time_usec, uint64_t, [units(us)]).
message_field('PARAM_MAP_RC', target_system, uint8_t, []).
message_field('PARAM_MAP_RC', target_component, uint8_t, []).
message_field('PARAM_MAP_RC', param_id, 'char[16]', []).
message_field('PARAM_MAP_RC', param_index, int16_t, []).
message_field('PARAM_MAP_RC', parameter_rc_channel_index, uint8_t, []).
message_field('PARAM_MAP_RC', param_value0, float, []).
message_field('PARAM_MAP_RC', scale, float, []).
message_field('PARAM_MAP_RC', param_value_min, float, []).
message_field('PARAM_MAP_RC', param_value_max, float, []).
message_field('MISSION_REQUEST_INT', target_system, uint8_t, []).
message_field('MISSION_REQUEST_INT', target_component, uint8_t, []).
message_field('MISSION_REQUEST_INT', seq, uint16_t, []).
message_field('MISSION_REQUEST_INT', mission_type, uint8_t, [enum('MAV_MISSION_TYPE')]).
message_field('SAFETY_SET_ALLOWED_AREA', target_system, uint8_t, []).
message_field('SAFETY_SET_ALLOWED_AREA', target_component, uint8_t, []).
message_field('SAFETY_SET_ALLOWED_AREA', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('SAFETY_SET_ALLOWED_AREA', p1x, float, [units(m)]).
message_field('SAFETY_SET_ALLOWED_AREA', p1y, float, [units(m)]).
message_field('SAFETY_SET_ALLOWED_AREA', p1z, float, [units(m)]).
message_field('SAFETY_SET_ALLOWED_AREA', p2x, float, [units(m)]).
message_field('SAFETY_SET_ALLOWED_AREA', p2y, float, [units(m)]).
message_field('SAFETY_SET_ALLOWED_AREA', p2z, float, [units(m)]).
message_field('SAFETY_ALLOWED_AREA', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('SAFETY_ALLOWED_AREA', p1x, float, [units(m)]).
message_field('SAFETY_ALLOWED_AREA', p1y, float, [units(m)]).
message_field('SAFETY_ALLOWED_AREA', p1z, float, [units(m)]).
message_field('SAFETY_ALLOWED_AREA', p2x, float, [units(m)]).
message_field('SAFETY_ALLOWED_AREA', p2y, float, [units(m)]).
message_field('SAFETY_ALLOWED_AREA', p2z, float, [units(m)]).
message_field('ATTITUDE_QUATERNION_COV', time_usec, uint64_t, [units(us)]).
message_field('ATTITUDE_QUATERNION_COV', q, 'float[4]', []).
message_field('ATTITUDE_QUATERNION_COV', rollspeed, float, [units('rad/s')]).
message_field('ATTITUDE_QUATERNION_COV', pitchspeed, float, [units('rad/s')]).
message_field('ATTITUDE_QUATERNION_COV', yawspeed, float, [units('rad/s')]).
message_field('ATTITUDE_QUATERNION_COV', covariance, 'float[9]', [invalid('[NaN:]')]).
message_field('NAV_CONTROLLER_OUTPUT', nav_roll, float, [units(deg)]).
message_field('NAV_CONTROLLER_OUTPUT', nav_pitch, float, [units(deg)]).
message_field('NAV_CONTROLLER_OUTPUT', nav_bearing, int16_t, [units(deg)]).
message_field('NAV_CONTROLLER_OUTPUT', target_bearing, int16_t, [units(deg)]).
message_field('NAV_CONTROLLER_OUTPUT', wp_dist, uint16_t, [units(m)]).
message_field('NAV_CONTROLLER_OUTPUT', alt_error, float, [units(m)]).
message_field('NAV_CONTROLLER_OUTPUT', aspd_error, float, [units('m/s')]).
message_field('NAV_CONTROLLER_OUTPUT', xtrack_error, float, [units(m)]).
message_field('GLOBAL_POSITION_INT_COV', time_usec, uint64_t, [units(us)]).
message_field('GLOBAL_POSITION_INT_COV', estimator_type, uint8_t, [enum('MAV_ESTIMATOR_TYPE')]).
message_field('GLOBAL_POSITION_INT_COV', lat, int32_t, [units(degE7)]).
message_field('GLOBAL_POSITION_INT_COV', lon, int32_t, [units(degE7)]).
message_field('GLOBAL_POSITION_INT_COV', alt, int32_t, [units(mm)]).
message_field('GLOBAL_POSITION_INT_COV', relative_alt, int32_t, [units(mm)]).
message_field('GLOBAL_POSITION_INT_COV', vx, float, [units('m/s')]).
message_field('GLOBAL_POSITION_INT_COV', vy, float, [units('m/s')]).
message_field('GLOBAL_POSITION_INT_COV', vz, float, [units('m/s')]).
message_field('GLOBAL_POSITION_INT_COV', covariance, 'float[36]', [invalid('[NaN:]')]).
message_field('LOCAL_POSITION_NED_COV', time_usec, uint64_t, [units(us)]).
message_field('LOCAL_POSITION_NED_COV', estimator_type, uint8_t, [enum('MAV_ESTIMATOR_TYPE')]).
message_field('LOCAL_POSITION_NED_COV', x, float, [units(m)]).
message_field('LOCAL_POSITION_NED_COV', y, float, [units(m)]).
message_field('LOCAL_POSITION_NED_COV', z, float, [units(m)]).
message_field('LOCAL_POSITION_NED_COV', vx, float, [units('m/s')]).
message_field('LOCAL_POSITION_NED_COV', vy, float, [units('m/s')]).
message_field('LOCAL_POSITION_NED_COV', vz, float, [units('m/s')]).
message_field('LOCAL_POSITION_NED_COV', ax, float, [units('m/s/s')]).
message_field('LOCAL_POSITION_NED_COV', ay, float, [units('m/s/s')]).
message_field('LOCAL_POSITION_NED_COV', az, float, [units('m/s/s')]).
message_field('LOCAL_POSITION_NED_COV', covariance, 'float[45]', [invalid('[NaN:]')]).
message_field('RC_CHANNELS', time_boot_ms, uint32_t, [units(ms)]).
message_field('RC_CHANNELS', chancount, uint8_t, []).
message_field('RC_CHANNELS', chan1_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan2_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan3_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan4_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan5_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan6_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan7_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan8_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan9_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan10_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan11_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan12_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan13_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan14_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan15_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan16_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan17_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', chan18_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS', rssi, uint8_t, [invalid('UINT8_MAX')]).
message_field('REQUEST_DATA_STREAM', target_system, uint8_t, []).
message_field('REQUEST_DATA_STREAM', target_component, uint8_t, []).
message_field('REQUEST_DATA_STREAM', req_stream_id, uint8_t, []).
message_field('REQUEST_DATA_STREAM', req_message_rate, uint16_t, [units('Hz')]).
message_field('REQUEST_DATA_STREAM', start_stop, uint8_t, []).
message_field('DATA_STREAM', stream_id, uint8_t, []).
message_field('DATA_STREAM', message_rate, uint16_t, [units('Hz')]).
message_field('DATA_STREAM', on_off, uint8_t, []).
message_field('MANUAL_CONTROL', target, uint8_t, []).
message_field('MANUAL_CONTROL', x, int16_t, [invalid('INT16_MAX')]).
message_field('MANUAL_CONTROL', y, int16_t, [invalid('INT16_MAX')]).
message_field('MANUAL_CONTROL', z, int16_t, [invalid('INT16_MAX')]).
message_field('MANUAL_CONTROL', r, int16_t, [invalid('INT16_MAX')]).
message_field('MANUAL_CONTROL', buttons, uint16_t, []).
message_field('MANUAL_CONTROL', buttons2, uint16_t, []).
message_field('MANUAL_CONTROL', enabled_extensions, uint8_t, []).
message_field('MANUAL_CONTROL', s, int16_t, []).
message_field('MANUAL_CONTROL', t, int16_t, []).
message_field('RC_CHANNELS_OVERRIDE', target_system, uint8_t, []).
message_field('RC_CHANNELS_OVERRIDE', target_component, uint8_t, []).
message_field('RC_CHANNELS_OVERRIDE', chan1_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_OVERRIDE', chan2_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_OVERRIDE', chan3_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_OVERRIDE', chan4_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_OVERRIDE', chan5_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_OVERRIDE', chan6_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_OVERRIDE', chan7_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_OVERRIDE', chan8_raw, uint16_t, [units(us), invalid('UINT16_MAX')]).
message_field('RC_CHANNELS_OVERRIDE', chan9_raw, uint16_t, [units(us), invalid('0')]).
message_field('RC_CHANNELS_OVERRIDE', chan10_raw, uint16_t, [units(us), invalid('0')]).
message_field('RC_CHANNELS_OVERRIDE', chan11_raw, uint16_t, [units(us), invalid('0')]).
message_field('RC_CHANNELS_OVERRIDE', chan12_raw, uint16_t, [units(us), invalid('0')]).
message_field('RC_CHANNELS_OVERRIDE', chan13_raw, uint16_t, [units(us), invalid('0')]).
message_field('RC_CHANNELS_OVERRIDE', chan14_raw, uint16_t, [units(us), invalid('0')]).
message_field('RC_CHANNELS_OVERRIDE', chan15_raw, uint16_t, [units(us), invalid('0')]).
message_field('RC_CHANNELS_OVERRIDE', chan16_raw, uint16_t, [units(us), invalid('0')]).
message_field('RC_CHANNELS_OVERRIDE', chan17_raw, uint16_t, [units(us), invalid('0')]).
message_field('RC_CHANNELS_OVERRIDE', chan18_raw, uint16_t, [units(us), invalid('0')]).
message_field('MISSION_ITEM_INT', target_system, uint8_t, []).
message_field('MISSION_ITEM_INT', target_component, uint8_t, []).
message_field('MISSION_ITEM_INT', seq, uint16_t, []).
message_field('MISSION_ITEM_INT', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('MISSION_ITEM_INT', command, uint16_t, [enum('MAV_CMD')]).
message_field('MISSION_ITEM_INT', current, uint8_t, []).
message_field('MISSION_ITEM_INT', autocontinue, uint8_t, []).
message_field('MISSION_ITEM_INT', param1, float, []).
message_field('MISSION_ITEM_INT', param2, float, []).
message_field('MISSION_ITEM_INT', param3, float, []).
message_field('MISSION_ITEM_INT', param4, float, []).
message_field('MISSION_ITEM_INT', x, int32_t, []).
message_field('MISSION_ITEM_INT', y, int32_t, []).
message_field('MISSION_ITEM_INT', z, float, []).
message_field('MISSION_ITEM_INT', mission_type, uint8_t, [enum('MAV_MISSION_TYPE')]).
message_field('VFR_HUD', airspeed, float, [units('m/s')]).
message_field('VFR_HUD', groundspeed, float, [units('m/s')]).
message_field('VFR_HUD', heading, int16_t, [units(deg)]).
message_field('VFR_HUD', throttle, uint16_t, [units('%')]).
message_field('VFR_HUD', alt, float, [units(m)]).
message_field('VFR_HUD', climb, float, [units('m/s')]).
message_field('COMMAND_INT', target_system, uint8_t, []).
message_field('COMMAND_INT', target_component, uint8_t, []).
message_field('COMMAND_INT', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('COMMAND_INT', command, uint16_t, [enum('MAV_CMD')]).
message_field('COMMAND_INT', current, uint8_t, []).
message_field('COMMAND_INT', autocontinue, uint8_t, []).
message_field('COMMAND_INT', param1, float, [invalid('NaN')]).
message_field('COMMAND_INT', param2, float, [invalid('NaN')]).
message_field('COMMAND_INT', param3, float, [invalid('NaN')]).
message_field('COMMAND_INT', param4, float, [invalid('NaN')]).
message_field('COMMAND_INT', x, int32_t, [invalid('INT32_MAX')]).
message_field('COMMAND_INT', y, int32_t, [invalid('INT32_MAX')]).
message_field('COMMAND_INT', z, float, [invalid('NaN')]).
message_field('COMMAND_LONG', target_system, uint8_t, []).
message_field('COMMAND_LONG', target_component, uint8_t, []).
message_field('COMMAND_LONG', command, uint16_t, [enum('MAV_CMD')]).
message_field('COMMAND_LONG', confirmation, uint8_t, []).
message_field('COMMAND_LONG', param1, float, [invalid('NaN')]).
message_field('COMMAND_LONG', param2, float, [invalid('NaN')]).
message_field('COMMAND_LONG', param3, float, [invalid('NaN')]).
message_field('COMMAND_LONG', param4, float, [invalid('NaN')]).
message_field('COMMAND_LONG', param5, float, [invalid('NaN')]).
message_field('COMMAND_LONG', param6, float, [invalid('NaN')]).
message_field('COMMAND_LONG', param7, float, [invalid('NaN')]).
message_field('COMMAND_ACK', command, uint16_t, [enum('MAV_CMD')]).
message_field('COMMAND_ACK', result, uint8_t, [enum('MAV_RESULT')]).
message_field('COMMAND_ACK', progress, uint8_t, [invalid('UINT8_MAX'), units('%')]).
message_field('COMMAND_ACK', result_param2, int32_t, []).
message_field('COMMAND_ACK', target_system, uint8_t, []).
message_field('COMMAND_ACK', target_component, uint8_t, []).
message_field('COMMAND_CANCEL', target_system, uint8_t, []).
message_field('COMMAND_CANCEL', target_component, uint8_t, []).
message_field('COMMAND_CANCEL', command, uint16_t, [enum('MAV_CMD')]).
message_field('MANUAL_SETPOINT', time_boot_ms, uint32_t, [units(ms)]).
message_field('MANUAL_SETPOINT', roll, float, [units('rad/s')]).
message_field('MANUAL_SETPOINT', pitch, float, [units('rad/s')]).
message_field('MANUAL_SETPOINT', yaw, float, [units('rad/s')]).
message_field('MANUAL_SETPOINT', thrust, float, []).
message_field('MANUAL_SETPOINT', mode_switch, uint8_t, []).
message_field('MANUAL_SETPOINT', manual_override_switch, uint8_t, []).
message_field('SET_ATTITUDE_TARGET', time_boot_ms, uint32_t, [units(ms)]).
message_field('SET_ATTITUDE_TARGET', target_system, uint8_t, []).
message_field('SET_ATTITUDE_TARGET', target_component, uint8_t, []).
message_field('SET_ATTITUDE_TARGET', type_mask, uint8_t, [enum('ATTITUDE_TARGET_TYPEMASK'), display(bitmask)]).
message_field('SET_ATTITUDE_TARGET', q, 'float[4]', []).
message_field('SET_ATTITUDE_TARGET', body_roll_rate, float, [units('rad/s')]).
message_field('SET_ATTITUDE_TARGET', body_pitch_rate, float, [units('rad/s')]).
message_field('SET_ATTITUDE_TARGET', body_yaw_rate, float, [units('rad/s')]).
message_field('SET_ATTITUDE_TARGET', thrust, float, []).
message_field('SET_ATTITUDE_TARGET', thrust_body, 'float[3]', []).
message_field('ATTITUDE_TARGET', time_boot_ms, uint32_t, [units(ms)]).
message_field('ATTITUDE_TARGET', type_mask, uint8_t, [enum('ATTITUDE_TARGET_TYPEMASK'), display(bitmask)]).
message_field('ATTITUDE_TARGET', q, 'float[4]', []).
message_field('ATTITUDE_TARGET', body_roll_rate, float, [units('rad/s')]).
message_field('ATTITUDE_TARGET', body_pitch_rate, float, [units('rad/s')]).
message_field('ATTITUDE_TARGET', body_yaw_rate, float, [units('rad/s')]).
message_field('ATTITUDE_TARGET', thrust, float, []).
message_field('SET_POSITION_TARGET_LOCAL_NED', time_boot_ms, uint32_t, [units(ms)]).
message_field('SET_POSITION_TARGET_LOCAL_NED', target_system, uint8_t, []).
message_field('SET_POSITION_TARGET_LOCAL_NED', target_component, uint8_t, []).
message_field('SET_POSITION_TARGET_LOCAL_NED', coordinate_frame, uint8_t, [enum('MAV_FRAME')]).
message_field('SET_POSITION_TARGET_LOCAL_NED', type_mask, uint16_t, [enum('POSITION_TARGET_TYPEMASK'), display(bitmask)]).
message_field('SET_POSITION_TARGET_LOCAL_NED', x, float, [units(m)]).
message_field('SET_POSITION_TARGET_LOCAL_NED', y, float, [units(m)]).
message_field('SET_POSITION_TARGET_LOCAL_NED', z, float, [units(m)]).
message_field('SET_POSITION_TARGET_LOCAL_NED', vx, float, [units('m/s')]).
message_field('SET_POSITION_TARGET_LOCAL_NED', vy, float, [units('m/s')]).
message_field('SET_POSITION_TARGET_LOCAL_NED', vz, float, [units('m/s')]).
message_field('SET_POSITION_TARGET_LOCAL_NED', afx, float, [units('m/s/s')]).
message_field('SET_POSITION_TARGET_LOCAL_NED', afy, float, [units('m/s/s')]).
message_field('SET_POSITION_TARGET_LOCAL_NED', afz, float, [units('m/s/s')]).
message_field('SET_POSITION_TARGET_LOCAL_NED', yaw, float, [units(rad)]).
message_field('SET_POSITION_TARGET_LOCAL_NED', yaw_rate, float, [units('rad/s')]).
message_field('POSITION_TARGET_LOCAL_NED', time_boot_ms, uint32_t, [units(ms)]).
message_field('POSITION_TARGET_LOCAL_NED', coordinate_frame, uint8_t, [enum('MAV_FRAME')]).
message_field('POSITION_TARGET_LOCAL_NED', type_mask, uint16_t, [enum('POSITION_TARGET_TYPEMASK'), display(bitmask)]).
message_field('POSITION_TARGET_LOCAL_NED', x, float, [units(m)]).
message_field('POSITION_TARGET_LOCAL_NED', y, float, [units(m)]).
message_field('POSITION_TARGET_LOCAL_NED', z, float, [units(m)]).
message_field('POSITION_TARGET_LOCAL_NED', vx, float, [units('m/s')]).
message_field('POSITION_TARGET_LOCAL_NED', vy, float, [units('m/s')]).
message_field('POSITION_TARGET_LOCAL_NED', vz, float, [units('m/s')]).
message_field('POSITION_TARGET_LOCAL_NED', afx, float, [units('m/s/s')]).
message_field('POSITION_TARGET_LOCAL_NED', afy, float, [units('m/s/s')]).
message_field('POSITION_TARGET_LOCAL_NED', afz, float, [units('m/s/s')]).
message_field('POSITION_TARGET_LOCAL_NED', yaw, float, [units(rad)]).
message_field('POSITION_TARGET_LOCAL_NED', yaw_rate, float, [units('rad/s')]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', time_boot_ms, uint32_t, [units(ms)]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', target_system, uint8_t, []).
message_field('SET_POSITION_TARGET_GLOBAL_INT', target_component, uint8_t, []).
message_field('SET_POSITION_TARGET_GLOBAL_INT', coordinate_frame, uint8_t, [enum('MAV_FRAME')]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', type_mask, uint16_t, [enum('POSITION_TARGET_TYPEMASK'), display(bitmask)]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', lat_int, int32_t, [units(degE7)]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', lon_int, int32_t, [units(degE7)]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', alt, float, [units(m)]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', vx, float, [units('m/s')]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', vy, float, [units('m/s')]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', vz, float, [units('m/s')]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', afx, float, [units('m/s/s')]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', afy, float, [units('m/s/s')]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', afz, float, [units('m/s/s')]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', yaw, float, [units(rad)]).
message_field('SET_POSITION_TARGET_GLOBAL_INT', yaw_rate, float, [units('rad/s')]).
message_field('POSITION_TARGET_GLOBAL_INT', time_boot_ms, uint32_t, [units(ms)]).
message_field('POSITION_TARGET_GLOBAL_INT', coordinate_frame, uint8_t, [enum('MAV_FRAME')]).
message_field('POSITION_TARGET_GLOBAL_INT', type_mask, uint16_t, [enum('POSITION_TARGET_TYPEMASK'), display(bitmask)]).
message_field('POSITION_TARGET_GLOBAL_INT', lat_int, int32_t, [units(degE7)]).
message_field('POSITION_TARGET_GLOBAL_INT', lon_int, int32_t, [units(degE7)]).
message_field('POSITION_TARGET_GLOBAL_INT', alt, float, [units(m)]).
message_field('POSITION_TARGET_GLOBAL_INT', vx, float, [units('m/s')]).
message_field('POSITION_TARGET_GLOBAL_INT', vy, float, [units('m/s')]).
message_field('POSITION_TARGET_GLOBAL_INT', vz, float, [units('m/s')]).
message_field('POSITION_TARGET_GLOBAL_INT', afx, float, [units('m/s/s')]).
message_field('POSITION_TARGET_GLOBAL_INT', afy, float, [units('m/s/s')]).
message_field('POSITION_TARGET_GLOBAL_INT', afz, float, [units('m/s/s')]).
message_field('POSITION_TARGET_GLOBAL_INT', yaw, float, [units(rad)]).
message_field('POSITION_TARGET_GLOBAL_INT', yaw_rate, float, [units('rad/s')]).
message_field('LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET', time_boot_ms, uint32_t, [units(ms)]).
message_field('LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET', x, float, [units(m)]).
message_field('LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET', y, float, [units(m)]).
message_field('LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET', z, float, [units(m)]).
message_field('LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET', roll, float, [units(rad)]).
message_field('LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET', pitch, float, [units(rad)]).
message_field('LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET', yaw, float, [units(rad)]).
message_field('HIL_STATE', time_usec, uint64_t, [units(us)]).
message_field('HIL_STATE', roll, float, [units(rad)]).
message_field('HIL_STATE', pitch, float, [units(rad)]).
message_field('HIL_STATE', yaw, float, [units(rad)]).
message_field('HIL_STATE', rollspeed, float, [units('rad/s')]).
message_field('HIL_STATE', pitchspeed, float, [units('rad/s')]).
message_field('HIL_STATE', yawspeed, float, [units('rad/s')]).
message_field('HIL_STATE', lat, int32_t, [units(degE7)]).
message_field('HIL_STATE', lon, int32_t, [units(degE7)]).
message_field('HIL_STATE', alt, int32_t, [units(mm)]).
message_field('HIL_STATE', vx, int16_t, [units('cm/s')]).
message_field('HIL_STATE', vy, int16_t, [units('cm/s')]).
message_field('HIL_STATE', vz, int16_t, [units('cm/s')]).
message_field('HIL_STATE', xacc, int16_t, [units(mG)]).
message_field('HIL_STATE', yacc, int16_t, [units(mG)]).
message_field('HIL_STATE', zacc, int16_t, [units(mG)]).
message_field('HIL_CONTROLS', time_usec, uint64_t, [units(us)]).
message_field('HIL_CONTROLS', roll_ailerons, float, []).
message_field('HIL_CONTROLS', pitch_elevator, float, []).
message_field('HIL_CONTROLS', yaw_rudder, float, []).
message_field('HIL_CONTROLS', throttle, float, []).
message_field('HIL_CONTROLS', aux1, float, []).
message_field('HIL_CONTROLS', aux2, float, []).
message_field('HIL_CONTROLS', aux3, float, []).
message_field('HIL_CONTROLS', aux4, float, []).
message_field('HIL_CONTROLS', mode, uint8_t, [enum('MAV_MODE')]).
message_field('HIL_CONTROLS', nav_mode, uint8_t, []).
message_field('HIL_RC_INPUTS_RAW', time_usec, uint64_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan1_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan2_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan3_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan4_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan5_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan6_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan7_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan8_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan9_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan10_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan11_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', chan12_raw, uint16_t, [units(us)]).
message_field('HIL_RC_INPUTS_RAW', rssi, uint8_t, [invalid('UINT8_MAX')]).
message_field('HIL_ACTUATOR_CONTROLS', time_usec, uint64_t, [units(us)]).
message_field('HIL_ACTUATOR_CONTROLS', controls, 'float[16]', []).
message_field('HIL_ACTUATOR_CONTROLS', mode, uint8_t, [enum('MAV_MODE_FLAG'), display(bitmask)]).
message_field('HIL_ACTUATOR_CONTROLS', flags, uint64_t, [display(bitmask)]).
message_field('OPTICAL_FLOW', time_usec, uint64_t, [units(us)]).
message_field('OPTICAL_FLOW', sensor_id, uint8_t, []).
message_field('OPTICAL_FLOW', flow_x, int16_t, [units(dpix)]).
message_field('OPTICAL_FLOW', flow_y, int16_t, [units(dpix)]).
message_field('OPTICAL_FLOW', flow_comp_m_x, float, [units('m/s')]).
message_field('OPTICAL_FLOW', flow_comp_m_y, float, [units('m/s')]).
message_field('OPTICAL_FLOW', quality, uint8_t, []).
message_field('OPTICAL_FLOW', ground_distance, float, [units(m)]).
message_field('OPTICAL_FLOW', flow_rate_x, float, [units('rad/s')]).
message_field('OPTICAL_FLOW', flow_rate_y, float, [units('rad/s')]).
message_field('GLOBAL_VISION_POSITION_ESTIMATE', usec, uint64_t, [units(us)]).
message_field('GLOBAL_VISION_POSITION_ESTIMATE', x, float, [units(m)]).
message_field('GLOBAL_VISION_POSITION_ESTIMATE', y, float, [units(m)]).
message_field('GLOBAL_VISION_POSITION_ESTIMATE', z, float, [units(m)]).
message_field('GLOBAL_VISION_POSITION_ESTIMATE', roll, float, [units(rad)]).
message_field('GLOBAL_VISION_POSITION_ESTIMATE', pitch, float, [units(rad)]).
message_field('GLOBAL_VISION_POSITION_ESTIMATE', yaw, float, [units(rad)]).
message_field('GLOBAL_VISION_POSITION_ESTIMATE', covariance, 'float[21]', [invalid('[NaN:]')]).
message_field('GLOBAL_VISION_POSITION_ESTIMATE', reset_counter, uint8_t, []).
message_field('VISION_POSITION_ESTIMATE', usec, uint64_t, [units(us)]).
message_field('VISION_POSITION_ESTIMATE', x, float, [units(m)]).
message_field('VISION_POSITION_ESTIMATE', y, float, [units(m)]).
message_field('VISION_POSITION_ESTIMATE', z, float, [units(m)]).
message_field('VISION_POSITION_ESTIMATE', roll, float, [units(rad)]).
message_field('VISION_POSITION_ESTIMATE', pitch, float, [units(rad)]).
message_field('VISION_POSITION_ESTIMATE', yaw, float, [units(rad)]).
message_field('VISION_POSITION_ESTIMATE', covariance, 'float[21]', [invalid('[NaN:]')]).
message_field('VISION_POSITION_ESTIMATE', reset_counter, uint8_t, []).
message_field('VISION_SPEED_ESTIMATE', usec, uint64_t, [units(us)]).
message_field('VISION_SPEED_ESTIMATE', x, float, [units('m/s')]).
message_field('VISION_SPEED_ESTIMATE', y, float, [units('m/s')]).
message_field('VISION_SPEED_ESTIMATE', z, float, [units('m/s')]).
message_field('VISION_SPEED_ESTIMATE', covariance, 'float[9]', [invalid('[NaN:]')]).
message_field('VISION_SPEED_ESTIMATE', reset_counter, uint8_t, []).
message_field('VICON_POSITION_ESTIMATE', usec, uint64_t, [units(us)]).
message_field('VICON_POSITION_ESTIMATE', x, float, [units(m)]).
message_field('VICON_POSITION_ESTIMATE', y, float, [units(m)]).
message_field('VICON_POSITION_ESTIMATE', z, float, [units(m)]).
message_field('VICON_POSITION_ESTIMATE', roll, float, [units(rad)]).
message_field('VICON_POSITION_ESTIMATE', pitch, float, [units(rad)]).
message_field('VICON_POSITION_ESTIMATE', yaw, float, [units(rad)]).
message_field('VICON_POSITION_ESTIMATE', covariance, 'float[21]', [invalid('[NaN:]')]).
message_field('HIGHRES_IMU', time_usec, uint64_t, [units(us)]).
message_field('HIGHRES_IMU', xacc, float, [units('m/s/s')]).
message_field('HIGHRES_IMU', yacc, float, [units('m/s/s')]).
message_field('HIGHRES_IMU', zacc, float, [units('m/s/s')]).
message_field('HIGHRES_IMU', xgyro, float, [units('rad/s')]).
message_field('HIGHRES_IMU', ygyro, float, [units('rad/s')]).
message_field('HIGHRES_IMU', zgyro, float, [units('rad/s')]).
message_field('HIGHRES_IMU', xmag, float, [units(gauss)]).
message_field('HIGHRES_IMU', ymag, float, [units(gauss)]).
message_field('HIGHRES_IMU', zmag, float, [units(gauss)]).
message_field('HIGHRES_IMU', abs_pressure, float, [units(hPa)]).
message_field('HIGHRES_IMU', diff_pressure, float, [units(hPa)]).
message_field('HIGHRES_IMU', pressure_alt, float, []).
message_field('HIGHRES_IMU', temperature, float, [units(degC)]).
message_field('HIGHRES_IMU', fields_updated, uint16_t, [enum('HIGHRES_IMU_UPDATED_FLAGS'), display(bitmask)]).
message_field('HIGHRES_IMU', id, uint8_t, [instance(true)]).
message_field('OPTICAL_FLOW_RAD', time_usec, uint64_t, [units(us)]).
message_field('OPTICAL_FLOW_RAD', sensor_id, uint8_t, [instance(true)]).
message_field('OPTICAL_FLOW_RAD', integration_time_us, uint32_t, [units(us)]).
message_field('OPTICAL_FLOW_RAD', integrated_x, float, [units(rad)]).
message_field('OPTICAL_FLOW_RAD', integrated_y, float, [units(rad)]).
message_field('OPTICAL_FLOW_RAD', integrated_xgyro, float, [units(rad)]).
message_field('OPTICAL_FLOW_RAD', integrated_ygyro, float, [units(rad)]).
message_field('OPTICAL_FLOW_RAD', integrated_zgyro, float, [units(rad)]).
message_field('OPTICAL_FLOW_RAD', temperature, int16_t, [units(cdegC)]).
message_field('OPTICAL_FLOW_RAD', quality, uint8_t, []).
message_field('OPTICAL_FLOW_RAD', time_delta_distance_us, uint32_t, [units(us)]).
message_field('OPTICAL_FLOW_RAD', distance, float, [units(m)]).
message_field('HIL_SENSOR', time_usec, uint64_t, [units(us)]).
message_field('HIL_SENSOR', xacc, float, [units('m/s/s')]).
message_field('HIL_SENSOR', yacc, float, [units('m/s/s')]).
message_field('HIL_SENSOR', zacc, float, [units('m/s/s')]).
message_field('HIL_SENSOR', xgyro, float, [units('rad/s')]).
message_field('HIL_SENSOR', ygyro, float, [units('rad/s')]).
message_field('HIL_SENSOR', zgyro, float, [units('rad/s')]).
message_field('HIL_SENSOR', xmag, float, [units(gauss)]).
message_field('HIL_SENSOR', ymag, float, [units(gauss)]).
message_field('HIL_SENSOR', zmag, float, [units(gauss)]).
message_field('HIL_SENSOR', abs_pressure, float, [units(hPa)]).
message_field('HIL_SENSOR', diff_pressure, float, [units(hPa)]).
message_field('HIL_SENSOR', pressure_alt, float, []).
message_field('HIL_SENSOR', temperature, float, [units(degC)]).
message_field('HIL_SENSOR', fields_updated, uint32_t, [enum('HIL_SENSOR_UPDATED_FLAGS'), display(bitmask)]).
message_field('HIL_SENSOR', id, uint8_t, []).
message_field('SIM_STATE', q1, float, []).
message_field('SIM_STATE', q2, float, []).
message_field('SIM_STATE', q3, float, []).
message_field('SIM_STATE', q4, float, []).
message_field('SIM_STATE', roll, float, []).
message_field('SIM_STATE', pitch, float, []).
message_field('SIM_STATE', yaw, float, []).
message_field('SIM_STATE', xacc, float, [units('m/s/s')]).
message_field('SIM_STATE', yacc, float, [units('m/s/s')]).
message_field('SIM_STATE', zacc, float, [units('m/s/s')]).
message_field('SIM_STATE', xgyro, float, [units('rad/s')]).
message_field('SIM_STATE', ygyro, float, [units('rad/s')]).
message_field('SIM_STATE', zgyro, float, [units('rad/s')]).
message_field('SIM_STATE', lat, float, [units(deg)]).
message_field('SIM_STATE', lon, float, [units(deg)]).
message_field('SIM_STATE', alt, float, [units(m)]).
message_field('SIM_STATE', std_dev_horz, float, []).
message_field('SIM_STATE', std_dev_vert, float, []).
message_field('SIM_STATE', vn, float, [units('m/s')]).
message_field('SIM_STATE', ve, float, [units('m/s')]).
message_field('SIM_STATE', vd, float, [units('m/s')]).
message_field('SIM_STATE', lat_int, int32_t, [units(degE7), invalid('0')]).
message_field('SIM_STATE', lon_int, int32_t, [units(degE7), invalid('0')]).
message_field('RADIO_STATUS', rssi, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_STATUS', remrssi, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_STATUS', txbuf, uint8_t, [units('%')]).
message_field('RADIO_STATUS', noise, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_STATUS', remnoise, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_STATUS', rxerrors, uint16_t, []).
message_field('RADIO_STATUS', fixed, uint16_t, []).
message_field('FILE_TRANSFER_PROTOCOL', target_network, uint8_t, []).
message_field('FILE_TRANSFER_PROTOCOL', target_system, uint8_t, []).
message_field('FILE_TRANSFER_PROTOCOL', target_component, uint8_t, []).
message_field('FILE_TRANSFER_PROTOCOL', payload, 'uint8_t[251]', []).
message_field('TIMESYNC', tc1, int64_t, [units(ns)]).
message_field('TIMESYNC', ts1, int64_t, [units(ns)]).
message_field('TIMESYNC', target_system, uint8_t, []).
message_field('TIMESYNC', target_component, uint8_t, []).
message_field('CAMERA_TRIGGER', time_usec, uint64_t, [units(us)]).
message_field('CAMERA_TRIGGER', seq, uint32_t, []).
message_field('HIL_GPS', time_usec, uint64_t, [units(us)]).
message_field('HIL_GPS', fix_type, uint8_t, []).
message_field('HIL_GPS', lat, int32_t, [units(degE7)]).
message_field('HIL_GPS', lon, int32_t, [units(degE7)]).
message_field('HIL_GPS', alt, int32_t, [units(mm)]).
message_field('HIL_GPS', eph, uint16_t, [invalid('UINT16_MAX')]).
message_field('HIL_GPS', epv, uint16_t, [invalid('UINT16_MAX')]).
message_field('HIL_GPS', vel, uint16_t, [units('cm/s'), invalid('UINT16_MAX')]).
message_field('HIL_GPS', vn, int16_t, [units('cm/s')]).
message_field('HIL_GPS', ve, int16_t, [units('cm/s')]).
message_field('HIL_GPS', vd, int16_t, [units('cm/s')]).
message_field('HIL_GPS', cog, uint16_t, [units(cdeg), invalid('UINT16_MAX')]).
message_field('HIL_GPS', satellites_visible, uint8_t, [invalid('UINT8_MAX')]).
message_field('HIL_GPS', id, uint8_t, []).
message_field('HIL_GPS', yaw, uint16_t, [units(cdeg)]).
message_field('HIL_OPTICAL_FLOW', time_usec, uint64_t, [units(us)]).
message_field('HIL_OPTICAL_FLOW', sensor_id, uint8_t, []).
message_field('HIL_OPTICAL_FLOW', integration_time_us, uint32_t, [units(us)]).
message_field('HIL_OPTICAL_FLOW', integrated_x, float, [units(rad)]).
message_field('HIL_OPTICAL_FLOW', integrated_y, float, [units(rad)]).
message_field('HIL_OPTICAL_FLOW', integrated_xgyro, float, [units(rad)]).
message_field('HIL_OPTICAL_FLOW', integrated_ygyro, float, [units(rad)]).
message_field('HIL_OPTICAL_FLOW', integrated_zgyro, float, [units(rad)]).
message_field('HIL_OPTICAL_FLOW', temperature, int16_t, [units(cdegC)]).
message_field('HIL_OPTICAL_FLOW', quality, uint8_t, []).
message_field('HIL_OPTICAL_FLOW', time_delta_distance_us, uint32_t, [units(us)]).
message_field('HIL_OPTICAL_FLOW', distance, float, [units(m), invalid('-1.0')]).
message_field('HIL_STATE_QUATERNION', time_usec, uint64_t, [units(us)]).
message_field('HIL_STATE_QUATERNION', attitude_quaternion, 'float[4]', []).
message_field('HIL_STATE_QUATERNION', rollspeed, float, [units('rad/s')]).
message_field('HIL_STATE_QUATERNION', pitchspeed, float, [units('rad/s')]).
message_field('HIL_STATE_QUATERNION', yawspeed, float, [units('rad/s')]).
message_field('HIL_STATE_QUATERNION', lat, int32_t, [units(degE7)]).
message_field('HIL_STATE_QUATERNION', lon, int32_t, [units(degE7)]).
message_field('HIL_STATE_QUATERNION', alt, int32_t, [units(mm)]).
message_field('HIL_STATE_QUATERNION', vx, int16_t, [units('cm/s')]).
message_field('HIL_STATE_QUATERNION', vy, int16_t, [units('cm/s')]).
message_field('HIL_STATE_QUATERNION', vz, int16_t, [units('cm/s')]).
message_field('HIL_STATE_QUATERNION', ind_airspeed, uint16_t, [units('cm/s')]).
message_field('HIL_STATE_QUATERNION', true_airspeed, uint16_t, [units('cm/s')]).
message_field('HIL_STATE_QUATERNION', xacc, int16_t, [units(mG)]).
message_field('HIL_STATE_QUATERNION', yacc, int16_t, [units(mG)]).
message_field('HIL_STATE_QUATERNION', zacc, int16_t, [units(mG)]).
message_field('SCALED_IMU2', time_boot_ms, uint32_t, [units(ms)]).
message_field('SCALED_IMU2', xacc, int16_t, [units(mG)]).
message_field('SCALED_IMU2', yacc, int16_t, [units(mG)]).
message_field('SCALED_IMU2', zacc, int16_t, [units(mG)]).
message_field('SCALED_IMU2', xgyro, int16_t, [units('mrad/s')]).
message_field('SCALED_IMU2', ygyro, int16_t, [units('mrad/s')]).
message_field('SCALED_IMU2', zgyro, int16_t, [units('mrad/s')]).
message_field('SCALED_IMU2', xmag, int16_t, [units(mgauss)]).
message_field('SCALED_IMU2', ymag, int16_t, [units(mgauss)]).
message_field('SCALED_IMU2', zmag, int16_t, [units(mgauss)]).
message_field('SCALED_IMU2', temperature, int16_t, [units(cdegC), invalid('0')]).
message_field('LOG_REQUEST_LIST', target_system, uint8_t, []).
message_field('LOG_REQUEST_LIST', target_component, uint8_t, []).
message_field('LOG_REQUEST_LIST', start, uint16_t, []).
message_field('LOG_REQUEST_LIST', end, uint16_t, []).
message_field('LOG_ENTRY', id, uint16_t, []).
message_field('LOG_ENTRY', num_logs, uint16_t, []).
message_field('LOG_ENTRY', last_log_num, uint16_t, []).
message_field('LOG_ENTRY', time_utc, uint32_t, [units(s), invalid('0')]).
message_field('LOG_ENTRY', size, uint32_t, [units(bytes)]).
message_field('LOG_REQUEST_DATA', target_system, uint8_t, []).
message_field('LOG_REQUEST_DATA', target_component, uint8_t, []).
message_field('LOG_REQUEST_DATA', id, uint16_t, []).
message_field('LOG_REQUEST_DATA', ofs, uint32_t, []).
message_field('LOG_REQUEST_DATA', count, uint32_t, [units(bytes)]).
message_field('LOG_DATA', id, uint16_t, []).
message_field('LOG_DATA', ofs, uint32_t, []).
message_field('LOG_DATA', count, uint8_t, [units(bytes)]).
message_field('LOG_DATA', data, 'uint8_t[90]', []).
message_field('LOG_ERASE', target_system, uint8_t, []).
message_field('LOG_ERASE', target_component, uint8_t, []).
message_field('LOG_REQUEST_END', target_system, uint8_t, []).
message_field('LOG_REQUEST_END', target_component, uint8_t, []).
message_field('GPS_INJECT_DATA', target_system, uint8_t, []).
message_field('GPS_INJECT_DATA', target_component, uint8_t, []).
message_field('GPS_INJECT_DATA', len, uint8_t, [units(bytes)]).
message_field('GPS_INJECT_DATA', data, 'uint8_t[110]', []).
message_field('GPS2_RAW', time_usec, uint64_t, [units(us)]).
message_field('GPS2_RAW', fix_type, uint8_t, [enum('GPS_FIX_TYPE')]).
message_field('GPS2_RAW', lat, int32_t, [units(degE7)]).
message_field('GPS2_RAW', lon, int32_t, [units(degE7)]).
message_field('GPS2_RAW', alt, int32_t, [units(mm)]).
message_field('GPS2_RAW', eph, uint16_t, [invalid('UINT16_MAX')]).
message_field('GPS2_RAW', epv, uint16_t, [invalid('UINT16_MAX')]).
message_field('GPS2_RAW', vel, uint16_t, [units('cm/s'), invalid('UINT16_MAX')]).
message_field('GPS2_RAW', cog, uint16_t, [units(cdeg), invalid('UINT16_MAX')]).
message_field('GPS2_RAW', satellites_visible, uint8_t, [invalid('UINT8_MAX')]).
message_field('GPS2_RAW', dgps_numch, uint8_t, []).
message_field('GPS2_RAW', dgps_age, uint32_t, [units(ms)]).
message_field('GPS2_RAW', yaw, uint16_t, [units(cdeg), invalid('0')]).
message_field('GPS2_RAW', alt_ellipsoid, int32_t, [units(mm)]).
message_field('GPS2_RAW', h_acc, uint32_t, [units(mm)]).
message_field('GPS2_RAW', v_acc, uint32_t, [units(mm)]).
message_field('GPS2_RAW', vel_acc, uint32_t, [units(mm)]).
message_field('GPS2_RAW', hdg_acc, uint32_t, [units(degE5)]).
message_field('POWER_STATUS', 'Vcc', uint16_t, [units(mV)]).
message_field('POWER_STATUS', 'Vservo', uint16_t, [units(mV)]).
message_field('POWER_STATUS', flags, uint16_t, [enum('MAV_POWER_STATUS'), display(bitmask)]).
message_field('SERIAL_CONTROL', device, uint8_t, [enum('SERIAL_CONTROL_DEV')]).
message_field('SERIAL_CONTROL', flags, uint8_t, [enum('SERIAL_CONTROL_FLAG'), display(bitmask)]).
message_field('SERIAL_CONTROL', timeout, uint16_t, [units(ms)]).
message_field('SERIAL_CONTROL', baudrate, uint32_t, [units('bits/s')]).
message_field('SERIAL_CONTROL', count, uint8_t, [units(bytes)]).
message_field('SERIAL_CONTROL', data, 'uint8_t[70]', []).
message_field('SERIAL_CONTROL', target_system, uint8_t, []).
message_field('SERIAL_CONTROL', target_component, uint8_t, []).
message_field('GPS_RTK', time_last_baseline_ms, uint32_t, [units(ms)]).
message_field('GPS_RTK', rtk_receiver_id, uint8_t, []).
message_field('GPS_RTK', wn, uint16_t, []).
message_field('GPS_RTK', tow, uint32_t, [units(ms)]).
message_field('GPS_RTK', rtk_health, uint8_t, []).
message_field('GPS_RTK', rtk_rate, uint8_t, [units('Hz')]).
message_field('GPS_RTK', nsats, uint8_t, []).
message_field('GPS_RTK', baseline_coords_type, uint8_t, [enum('RTK_BASELINE_COORDINATE_SYSTEM')]).
message_field('GPS_RTK', baseline_a_mm, int32_t, [units(mm)]).
message_field('GPS_RTK', baseline_b_mm, int32_t, [units(mm)]).
message_field('GPS_RTK', baseline_c_mm, int32_t, [units(mm)]).
message_field('GPS_RTK', accuracy, uint32_t, []).
message_field('GPS_RTK', iar_num_hypotheses, int32_t, []).
message_field('GPS2_RTK', time_last_baseline_ms, uint32_t, [units(ms)]).
message_field('GPS2_RTK', rtk_receiver_id, uint8_t, []).
message_field('GPS2_RTK', wn, uint16_t, []).
message_field('GPS2_RTK', tow, uint32_t, [units(ms)]).
message_field('GPS2_RTK', rtk_health, uint8_t, []).
message_field('GPS2_RTK', rtk_rate, uint8_t, [units('Hz')]).
message_field('GPS2_RTK', nsats, uint8_t, []).
message_field('GPS2_RTK', baseline_coords_type, uint8_t, [enum('RTK_BASELINE_COORDINATE_SYSTEM')]).
message_field('GPS2_RTK', baseline_a_mm, int32_t, [units(mm)]).
message_field('GPS2_RTK', baseline_b_mm, int32_t, [units(mm)]).
message_field('GPS2_RTK', baseline_c_mm, int32_t, [units(mm)]).
message_field('GPS2_RTK', accuracy, uint32_t, []).
message_field('GPS2_RTK', iar_num_hypotheses, int32_t, []).
message_field('SCALED_IMU3', time_boot_ms, uint32_t, [units(ms)]).
message_field('SCALED_IMU3', xacc, int16_t, [units(mG)]).
message_field('SCALED_IMU3', yacc, int16_t, [units(mG)]).
message_field('SCALED_IMU3', zacc, int16_t, [units(mG)]).
message_field('SCALED_IMU3', xgyro, int16_t, [units('mrad/s')]).
message_field('SCALED_IMU3', ygyro, int16_t, [units('mrad/s')]).
message_field('SCALED_IMU3', zgyro, int16_t, [units('mrad/s')]).
message_field('SCALED_IMU3', xmag, int16_t, [units(mgauss)]).
message_field('SCALED_IMU3', ymag, int16_t, [units(mgauss)]).
message_field('SCALED_IMU3', zmag, int16_t, [units(mgauss)]).
message_field('SCALED_IMU3', temperature, int16_t, [units(cdegC), invalid('0')]).
message_field('DATA_TRANSMISSION_HANDSHAKE', type, uint8_t, [enum('MAVLINK_DATA_STREAM_TYPE')]).
message_field('DATA_TRANSMISSION_HANDSHAKE', size, uint32_t, [units(bytes)]).
message_field('DATA_TRANSMISSION_HANDSHAKE', width, uint16_t, []).
message_field('DATA_TRANSMISSION_HANDSHAKE', height, uint16_t, []).
message_field('DATA_TRANSMISSION_HANDSHAKE', packets, uint16_t, []).
message_field('DATA_TRANSMISSION_HANDSHAKE', payload, uint8_t, [units(bytes)]).
message_field('DATA_TRANSMISSION_HANDSHAKE', jpg_quality, uint8_t, [units('%')]).
message_field('ENCAPSULATED_DATA', seqnr, uint16_t, []).
message_field('ENCAPSULATED_DATA', data, 'uint8_t[253]', []).
message_field('DISTANCE_SENSOR', time_boot_ms, uint32_t, [units(ms)]).
message_field('DISTANCE_SENSOR', min_distance, uint16_t, [units(cm)]).
message_field('DISTANCE_SENSOR', max_distance, uint16_t, [units(cm)]).
message_field('DISTANCE_SENSOR', current_distance, uint16_t, [units(cm)]).
message_field('DISTANCE_SENSOR', type, uint8_t, [enum('MAV_DISTANCE_SENSOR')]).
message_field('DISTANCE_SENSOR', id, uint8_t, [instance(true)]).
message_field('DISTANCE_SENSOR', orientation, uint8_t, [enum('MAV_SENSOR_ORIENTATION')]).
message_field('DISTANCE_SENSOR', covariance, uint8_t, [units('cm^2'), invalid('UINT8_MAX')]).
message_field('DISTANCE_SENSOR', horizontal_fov, float, [units(rad), invalid('0')]).
message_field('DISTANCE_SENSOR', vertical_fov, float, [units(rad), invalid('0')]).
message_field('DISTANCE_SENSOR', quaternion, 'float[4]', [invalid('[0]')]).
message_field('DISTANCE_SENSOR', signal_quality, uint8_t, [units('%'), invalid('0')]).
message_field('TERRAIN_REQUEST', lat, int32_t, [units(degE7)]).
message_field('TERRAIN_REQUEST', lon, int32_t, [units(degE7)]).
message_field('TERRAIN_REQUEST', grid_spacing, uint16_t, [units(m)]).
message_field('TERRAIN_REQUEST', mask, uint64_t, [display(bitmask), print_format('0x%07x')]).
message_field('TERRAIN_DATA', lat, int32_t, [units(degE7)]).
message_field('TERRAIN_DATA', lon, int32_t, [units(degE7)]).
message_field('TERRAIN_DATA', grid_spacing, uint16_t, [units(m)]).
message_field('TERRAIN_DATA', gridbit, uint8_t, []).
message_field('TERRAIN_DATA', data, 'int16_t[16]', [units(m)]).
message_field('TERRAIN_CHECK', lat, int32_t, [units(degE7)]).
message_field('TERRAIN_CHECK', lon, int32_t, [units(degE7)]).
message_field('TERRAIN_REPORT', lat, int32_t, [units(degE7)]).
message_field('TERRAIN_REPORT', lon, int32_t, [units(degE7)]).
message_field('TERRAIN_REPORT', spacing, uint16_t, []).
message_field('TERRAIN_REPORT', terrain_height, float, [units(m)]).
message_field('TERRAIN_REPORT', current_height, float, [units(m)]).
message_field('TERRAIN_REPORT', pending, uint16_t, []).
message_field('TERRAIN_REPORT', loaded, uint16_t, []).
message_field('SCALED_PRESSURE2', time_boot_ms, uint32_t, [units(ms)]).
message_field('SCALED_PRESSURE2', press_abs, float, [units(hPa)]).
message_field('SCALED_PRESSURE2', press_diff, float, [units(hPa)]).
message_field('SCALED_PRESSURE2', temperature, int16_t, [units(cdegC)]).
message_field('SCALED_PRESSURE2', temperature_press_diff, int16_t, [units(cdegC), invalid('0')]).
message_field('ATT_POS_MOCAP', time_usec, uint64_t, [units(us)]).
message_field('ATT_POS_MOCAP', q, 'float[4]', []).
message_field('ATT_POS_MOCAP', x, float, [units(m)]).
message_field('ATT_POS_MOCAP', y, float, [units(m)]).
message_field('ATT_POS_MOCAP', z, float, [units(m)]).
message_field('ATT_POS_MOCAP', covariance, 'float[21]', [invalid('[NaN:]')]).
message_field('SET_ACTUATOR_CONTROL_TARGET', time_usec, uint64_t, [units(us)]).
message_field('SET_ACTUATOR_CONTROL_TARGET', group_mlx, uint8_t, []).
message_field('SET_ACTUATOR_CONTROL_TARGET', target_system, uint8_t, []).
message_field('SET_ACTUATOR_CONTROL_TARGET', target_component, uint8_t, []).
message_field('SET_ACTUATOR_CONTROL_TARGET', controls, 'float[8]', []).
message_field('ACTUATOR_CONTROL_TARGET', time_usec, uint64_t, [units(us)]).
message_field('ACTUATOR_CONTROL_TARGET', group_mlx, uint8_t, []).
message_field('ACTUATOR_CONTROL_TARGET', controls, 'float[8]', []).
message_field('ALTITUDE', time_usec, uint64_t, [units(us)]).
message_field('ALTITUDE', altitude_monotonic, float, [units(m)]).
message_field('ALTITUDE', altitude_amsl, float, [units(m)]).
message_field('ALTITUDE', altitude_local, float, [units(m)]).
message_field('ALTITUDE', altitude_relative, float, [units(m)]).
message_field('ALTITUDE', altitude_terrain, float, [units(m)]).
message_field('ALTITUDE', bottom_clearance, float, [units(m)]).
message_field('RESOURCE_REQUEST', request_id, uint8_t, []).
message_field('RESOURCE_REQUEST', uri_type, uint8_t, []).
message_field('RESOURCE_REQUEST', uri, 'uint8_t[120]', []).
message_field('RESOURCE_REQUEST', transfer_type, uint8_t, []).
message_field('RESOURCE_REQUEST', storage, 'uint8_t[120]', []).
message_field('SCALED_PRESSURE3', time_boot_ms, uint32_t, [units(ms)]).
message_field('SCALED_PRESSURE3', press_abs, float, [units(hPa)]).
message_field('SCALED_PRESSURE3', press_diff, float, [units(hPa)]).
message_field('SCALED_PRESSURE3', temperature, int16_t, [units(cdegC)]).
message_field('SCALED_PRESSURE3', temperature_press_diff, int16_t, [units(cdegC), invalid('0')]).
message_field('FOLLOW_TARGET', timestamp, uint64_t, [units(ms)]).
message_field('FOLLOW_TARGET', est_capabilities, uint8_t, []).
message_field('FOLLOW_TARGET', lat, int32_t, [units(degE7)]).
message_field('FOLLOW_TARGET', lon, int32_t, [units(degE7)]).
message_field('FOLLOW_TARGET', alt, float, [units(m)]).
message_field('FOLLOW_TARGET', vel, 'float[3]', [units('m/s'), invalid('[0]')]).
message_field('FOLLOW_TARGET', acc, 'float[3]', [units('m/s/s'), invalid('[0]')]).
message_field('FOLLOW_TARGET', attitude_q, 'float[4]', [invalid('[0]')]).
message_field('FOLLOW_TARGET', rates, 'float[3]', [invalid('[0]')]).
message_field('FOLLOW_TARGET', position_cov, 'float[3]', []).
message_field('FOLLOW_TARGET', custom_state, uint64_t, []).
message_field('CONTROL_SYSTEM_STATE', time_usec, uint64_t, [units(us)]).
message_field('CONTROL_SYSTEM_STATE', x_acc, float, [units('m/s/s')]).
message_field('CONTROL_SYSTEM_STATE', y_acc, float, [units('m/s/s')]).
message_field('CONTROL_SYSTEM_STATE', z_acc, float, [units('m/s/s')]).
message_field('CONTROL_SYSTEM_STATE', x_vel, float, [units('m/s')]).
message_field('CONTROL_SYSTEM_STATE', y_vel, float, [units('m/s')]).
message_field('CONTROL_SYSTEM_STATE', z_vel, float, [units('m/s')]).
message_field('CONTROL_SYSTEM_STATE', x_pos, float, [units(m)]).
message_field('CONTROL_SYSTEM_STATE', y_pos, float, [units(m)]).
message_field('CONTROL_SYSTEM_STATE', z_pos, float, [units(m)]).
message_field('CONTROL_SYSTEM_STATE', airspeed, float, [units('m/s'), invalid('-1')]).
message_field('CONTROL_SYSTEM_STATE', vel_variance, 'float[3]', []).
message_field('CONTROL_SYSTEM_STATE', pos_variance, 'float[3]', []).
message_field('CONTROL_SYSTEM_STATE', q, 'float[4]', []).
message_field('CONTROL_SYSTEM_STATE', roll_rate, float, [units('rad/s')]).
message_field('CONTROL_SYSTEM_STATE', pitch_rate, float, [units('rad/s')]).
message_field('CONTROL_SYSTEM_STATE', yaw_rate, float, [units('rad/s')]).
message_field('BATTERY_STATUS', id, uint8_t, [instance(true)]).
message_field('BATTERY_STATUS', battery_function, uint8_t, [enum('MAV_BATTERY_FUNCTION')]).
message_field('BATTERY_STATUS', type, uint8_t, [enum('MAV_BATTERY_TYPE')]).
message_field('BATTERY_STATUS', temperature, int16_t, [units(cdegC), invalid('INT16_MAX')]).
message_field('BATTERY_STATUS', voltages, 'uint16_t[10]', [units(mV), invalid('[UINT16_MAX]')]).
message_field('BATTERY_STATUS', current_battery, int16_t, [units(cA), invalid('-1')]).
message_field('BATTERY_STATUS', current_consumed, int32_t, [units(mAh), invalid('-1')]).
message_field('BATTERY_STATUS', energy_consumed, int32_t, [units(hJ), invalid('-1')]).
message_field('BATTERY_STATUS', battery_remaining, int8_t, [units('%'), invalid('-1')]).
message_field('BATTERY_STATUS', time_remaining, int32_t, [units(s), invalid('0')]).
message_field('BATTERY_STATUS', charge_state, uint8_t, [enum('MAV_BATTERY_CHARGE_STATE')]).
message_field('BATTERY_STATUS', voltages_ext, 'uint16_t[4]', [units(mV), invalid('[0]')]).
message_field('BATTERY_STATUS', mode, uint8_t, [enum('MAV_BATTERY_MODE')]).
message_field('BATTERY_STATUS', fault_bitmask, uint32_t, [display(bitmask), enum('MAV_BATTERY_FAULT')]).
message_field('AUTOPILOT_VERSION', capabilities, uint64_t, [enum('MAV_PROTOCOL_CAPABILITY'), display(bitmask)]).
message_field('AUTOPILOT_VERSION', flight_sw_version, uint32_t, []).
message_field('AUTOPILOT_VERSION', middleware_sw_version, uint32_t, []).
message_field('AUTOPILOT_VERSION', os_sw_version, uint32_t, []).
message_field('AUTOPILOT_VERSION', board_version, uint32_t, []).
message_field('AUTOPILOT_VERSION', flight_custom_version, 'uint8_t[8]', []).
message_field('AUTOPILOT_VERSION', middleware_custom_version, 'uint8_t[8]', []).
message_field('AUTOPILOT_VERSION', os_custom_version, 'uint8_t[8]', []).
message_field('AUTOPILOT_VERSION', vendor_id, uint16_t, []).
message_field('AUTOPILOT_VERSION', product_id, uint16_t, []).
message_field('AUTOPILOT_VERSION', uid, uint64_t, []).
message_field('AUTOPILOT_VERSION', uid2, 'uint8_t[18]', []).
message_field('LANDING_TARGET', time_usec, uint64_t, [units(us)]).
message_field('LANDING_TARGET', target_num, uint8_t, []).
message_field('LANDING_TARGET', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('LANDING_TARGET', angle_x, float, [units(rad)]).
message_field('LANDING_TARGET', angle_y, float, [units(rad)]).
message_field('LANDING_TARGET', distance, float, [units(m)]).
message_field('LANDING_TARGET', size_x, float, [units(rad)]).
message_field('LANDING_TARGET', size_y, float, [units(rad)]).
message_field('LANDING_TARGET', x, float, [units(m)]).
message_field('LANDING_TARGET', y, float, [units(m)]).
message_field('LANDING_TARGET', z, float, [units(m)]).
message_field('LANDING_TARGET', q, 'float[4]', []).
message_field('LANDING_TARGET', type, uint8_t, [enum('LANDING_TARGET_TYPE')]).
message_field('LANDING_TARGET', position_valid, uint8_t, [invalid('0')]).
message_field('FENCE_STATUS', breach_status, uint8_t, []).
message_field('FENCE_STATUS', breach_count, uint16_t, []).
message_field('FENCE_STATUS', breach_type, uint8_t, [enum('FENCE_BREACH')]).
message_field('FENCE_STATUS', breach_time, uint32_t, [units(ms)]).
message_field('FENCE_STATUS', breach_mitigation, uint8_t, [enum('FENCE_MITIGATE')]).
message_field('MAG_CAL_REPORT', compass_id, uint8_t, [instance(true)]).
message_field('MAG_CAL_REPORT', cal_mask, uint8_t, [display(bitmask)]).
message_field('MAG_CAL_REPORT', cal_status, uint8_t, [enum('MAG_CAL_STATUS')]).
message_field('MAG_CAL_REPORT', autosaved, uint8_t, []).
message_field('MAG_CAL_REPORT', fitness, float, [units(mgauss)]).
message_field('MAG_CAL_REPORT', ofs_x, float, []).
message_field('MAG_CAL_REPORT', ofs_y, float, []).
message_field('MAG_CAL_REPORT', ofs_z, float, []).
message_field('MAG_CAL_REPORT', diag_x, float, []).
message_field('MAG_CAL_REPORT', diag_y, float, []).
message_field('MAG_CAL_REPORT', diag_z, float, []).
message_field('MAG_CAL_REPORT', offdiag_x, float, []).
message_field('MAG_CAL_REPORT', offdiag_y, float, []).
message_field('MAG_CAL_REPORT', offdiag_z, float, []).
message_field('MAG_CAL_REPORT', orientation_confidence, float, []).
message_field('MAG_CAL_REPORT', old_orientation, uint8_t, [enum('MAV_SENSOR_ORIENTATION')]).
message_field('MAG_CAL_REPORT', new_orientation, uint8_t, [enum('MAV_SENSOR_ORIENTATION')]).
message_field('MAG_CAL_REPORT', scale_factor, float, []).
message_field('EFI_STATUS', health, uint8_t, []).
message_field('EFI_STATUS', ecu_index, float, []).
message_field('EFI_STATUS', rpm, float, []).
message_field('EFI_STATUS', fuel_consumed, float, [units('cm^3')]).
message_field('EFI_STATUS', fuel_flow, float, [units('cm^3/min')]).
message_field('EFI_STATUS', engine_load, float, [units('%')]).
message_field('EFI_STATUS', throttle_position, float, [units('%')]).
message_field('EFI_STATUS', spark_dwell_time, float, [units(ms)]).
message_field('EFI_STATUS', barometric_pressure, float, [units(kPa)]).
message_field('EFI_STATUS', intake_manifold_pressure, float, [units(kPa)]).
message_field('EFI_STATUS', intake_manifold_temperature, float, [units(degC)]).
message_field('EFI_STATUS', cylinder_head_temperature, float, [units(degC)]).
message_field('EFI_STATUS', ignition_timing, float, [units(deg)]).
message_field('EFI_STATUS', injection_time, float, [units(ms)]).
message_field('EFI_STATUS', exhaust_gas_temperature, float, [units(degC)]).
message_field('EFI_STATUS', throttle_out, float, [units('%')]).
message_field('EFI_STATUS', pt_compensation, float, []).
message_field('EFI_STATUS', ignition_voltage, float, [units('V')]).
message_field('EFI_STATUS', fuel_pressure, float, [units(kPa)]).
message_field('ESTIMATOR_STATUS', time_usec, uint64_t, [units(us)]).
message_field('ESTIMATOR_STATUS', flags, uint16_t, [enum('ESTIMATOR_STATUS_FLAGS'), display(bitmask)]).
message_field('ESTIMATOR_STATUS', vel_ratio, float, []).
message_field('ESTIMATOR_STATUS', pos_horiz_ratio, float, []).
message_field('ESTIMATOR_STATUS', pos_vert_ratio, float, []).
message_field('ESTIMATOR_STATUS', mag_ratio, float, []).
message_field('ESTIMATOR_STATUS', hagl_ratio, float, []).
message_field('ESTIMATOR_STATUS', tas_ratio, float, []).
message_field('ESTIMATOR_STATUS', pos_horiz_accuracy, float, [units(m)]).
message_field('ESTIMATOR_STATUS', pos_vert_accuracy, float, [units(m)]).
message_field('WIND_COV', time_usec, uint64_t, [units(us)]).
message_field('WIND_COV', wind_x, float, [units('m/s'), invalid('NaN')]).
message_field('WIND_COV', wind_y, float, [units('m/s'), invalid('NaN')]).
message_field('WIND_COV', wind_z, float, [units('m/s'), invalid('NaN')]).
message_field('WIND_COV', var_horiz, float, [units('m/s'), invalid('NaN')]).
message_field('WIND_COV', var_vert, float, [units('m/s'), invalid('NaN')]).
message_field('WIND_COV', wind_alt, float, [units(m), invalid('NaN')]).
message_field('WIND_COV', horiz_accuracy, float, [units('m/s'), invalid('0')]).
message_field('WIND_COV', vert_accuracy, float, [units('m/s'), invalid('0')]).
message_field('GPS_INPUT', time_usec, uint64_t, [units(us)]).
message_field('GPS_INPUT', gps_id, uint8_t, [instance(true)]).
message_field('GPS_INPUT', ignore_flags, uint16_t, [enum('GPS_INPUT_IGNORE_FLAGS'), display(bitmask)]).
message_field('GPS_INPUT', time_week_ms, uint32_t, [units(ms)]).
message_field('GPS_INPUT', time_week, uint16_t, []).
message_field('GPS_INPUT', fix_type, uint8_t, []).
message_field('GPS_INPUT', lat, int32_t, [units(degE7)]).
message_field('GPS_INPUT', lon, int32_t, [units(degE7)]).
message_field('GPS_INPUT', alt, float, [units(m)]).
message_field('GPS_INPUT', hdop, float, [invalid('UINT16_MAX')]).
message_field('GPS_INPUT', vdop, float, [invalid('UINT16_MAX')]).
message_field('GPS_INPUT', vn, float, [units('m/s')]).
message_field('GPS_INPUT', ve, float, [units('m/s')]).
message_field('GPS_INPUT', vd, float, [units('m/s')]).
message_field('GPS_INPUT', speed_accuracy, float, [units('m/s')]).
message_field('GPS_INPUT', horiz_accuracy, float, [units(m)]).
message_field('GPS_INPUT', vert_accuracy, float, [units(m)]).
message_field('GPS_INPUT', satellites_visible, uint8_t, []).
message_field('GPS_INPUT', yaw, uint16_t, [units(cdeg)]).
message_field('GPS_RTCM_DATA', flags, uint8_t, []).
message_field('GPS_RTCM_DATA', len, uint8_t, [units(bytes)]).
message_field('GPS_RTCM_DATA', data, 'uint8_t[180]', []).
message_field('HIGH_LATENCY', base_mode, uint8_t, [enum('MAV_MODE_FLAG'), display(bitmask)]).
message_field('HIGH_LATENCY', custom_mode, uint32_t, [display(bitmask)]).
message_field('HIGH_LATENCY', landed_state, uint8_t, [enum('MAV_LANDED_STATE')]).
message_field('HIGH_LATENCY', roll, int16_t, [units(cdeg)]).
message_field('HIGH_LATENCY', pitch, int16_t, [units(cdeg)]).
message_field('HIGH_LATENCY', heading, uint16_t, [units(cdeg)]).
message_field('HIGH_LATENCY', throttle, int8_t, [units('%')]).
message_field('HIGH_LATENCY', heading_sp, int16_t, [units(cdeg)]).
message_field('HIGH_LATENCY', latitude, int32_t, [units(degE7)]).
message_field('HIGH_LATENCY', longitude, int32_t, [units(degE7)]).
message_field('HIGH_LATENCY', altitude_amsl, int16_t, [units(m)]).
message_field('HIGH_LATENCY', altitude_sp, int16_t, [units(m)]).
message_field('HIGH_LATENCY', airspeed, uint8_t, [units('m/s')]).
message_field('HIGH_LATENCY', airspeed_sp, uint8_t, [units('m/s')]).
message_field('HIGH_LATENCY', groundspeed, uint8_t, [units('m/s')]).
message_field('HIGH_LATENCY', climb_rate, int8_t, [units('m/s')]).
message_field('HIGH_LATENCY', gps_nsat, uint8_t, [invalid('UINT8_MAX')]).
message_field('HIGH_LATENCY', gps_fix_type, uint8_t, [enum('GPS_FIX_TYPE')]).
message_field('HIGH_LATENCY', battery_remaining, uint8_t, [units('%')]).
message_field('HIGH_LATENCY', temperature, int8_t, [units(degC)]).
message_field('HIGH_LATENCY', temperature_air, int8_t, [units(degC)]).
message_field('HIGH_LATENCY', failsafe, uint8_t, []).
message_field('HIGH_LATENCY', wp_num, uint8_t, []).
message_field('HIGH_LATENCY', wp_distance, uint16_t, [units(m)]).
message_field('HIGH_LATENCY2', timestamp, uint32_t, [units(ms)]).
message_field('HIGH_LATENCY2', type, uint8_t, [enum('MAV_TYPE')]).
message_field('HIGH_LATENCY2', autopilot, uint8_t, [enum('MAV_AUTOPILOT')]).
message_field('HIGH_LATENCY2', custom_mode, uint16_t, [display(bitmask)]).
message_field('HIGH_LATENCY2', latitude, int32_t, [units(degE7)]).
message_field('HIGH_LATENCY2', longitude, int32_t, [units(degE7)]).
message_field('HIGH_LATENCY2', altitude, int16_t, [units(m)]).
message_field('HIGH_LATENCY2', target_altitude, int16_t, [units(m)]).
message_field('HIGH_LATENCY2', heading, uint8_t, [units('deg/2')]).
message_field('HIGH_LATENCY2', target_heading, uint8_t, [units('deg/2')]).
message_field('HIGH_LATENCY2', target_distance, uint16_t, [units(dam)]).
message_field('HIGH_LATENCY2', throttle, uint8_t, [units('%')]).
message_field('HIGH_LATENCY2', airspeed, uint8_t, [units('m/s*5')]).
message_field('HIGH_LATENCY2', airspeed_sp, uint8_t, [units('m/s*5')]).
message_field('HIGH_LATENCY2', groundspeed, uint8_t, [units('m/s*5')]).
message_field('HIGH_LATENCY2', windspeed, uint8_t, [units('m/s*5')]).
message_field('HIGH_LATENCY2', wind_heading, uint8_t, [units('deg/2')]).
message_field('HIGH_LATENCY2', eph, uint8_t, [units(dm)]).
message_field('HIGH_LATENCY2', epv, uint8_t, [units(dm)]).
message_field('HIGH_LATENCY2', temperature_air, int8_t, [units(degC)]).
message_field('HIGH_LATENCY2', climb_rate, int8_t, [units('dm/s')]).
message_field('HIGH_LATENCY2', battery, int8_t, [units('%'), invalid('-1')]).
message_field('HIGH_LATENCY2', wp_num, uint16_t, []).
message_field('HIGH_LATENCY2', failure_flags, uint16_t, [enum('HL_FAILURE_FLAG'), display(bitmask)]).
message_field('HIGH_LATENCY2', custom0, int8_t, []).
message_field('HIGH_LATENCY2', custom1, int8_t, []).
message_field('HIGH_LATENCY2', custom2, int8_t, []).
message_field('VIBRATION', time_usec, uint64_t, [units(us)]).
message_field('VIBRATION', vibration_x, float, []).
message_field('VIBRATION', vibration_y, float, []).
message_field('VIBRATION', vibration_z, float, []).
message_field('VIBRATION', clipping_0, uint32_t, []).
message_field('VIBRATION', clipping_1, uint32_t, []).
message_field('VIBRATION', clipping_2, uint32_t, []).
message_field('HOME_POSITION', latitude, int32_t, [units(degE7)]).
message_field('HOME_POSITION', longitude, int32_t, [units(degE7)]).
message_field('HOME_POSITION', altitude, int32_t, [units(mm)]).
message_field('HOME_POSITION', x, float, [units(m)]).
message_field('HOME_POSITION', y, float, [units(m)]).
message_field('HOME_POSITION', z, float, [units(m)]).
message_field('HOME_POSITION', q, 'float[4]', [invalid('[NaN]')]).
message_field('HOME_POSITION', approach_x, float, [units(m)]).
message_field('HOME_POSITION', approach_y, float, [units(m)]).
message_field('HOME_POSITION', approach_z, float, [units(m)]).
message_field('HOME_POSITION', time_usec, uint64_t, [units(us)]).
message_field('SET_HOME_POSITION', target_system, uint8_t, []).
message_field('SET_HOME_POSITION', latitude, int32_t, [units(degE7)]).
message_field('SET_HOME_POSITION', longitude, int32_t, [units(degE7)]).
message_field('SET_HOME_POSITION', altitude, int32_t, [units(mm)]).
message_field('SET_HOME_POSITION', x, float, [units(m)]).
message_field('SET_HOME_POSITION', y, float, [units(m)]).
message_field('SET_HOME_POSITION', z, float, [units(m)]).
message_field('SET_HOME_POSITION', q, 'float[4]', []).
message_field('SET_HOME_POSITION', approach_x, float, [units(m)]).
message_field('SET_HOME_POSITION', approach_y, float, [units(m)]).
message_field('SET_HOME_POSITION', approach_z, float, [units(m)]).
message_field('SET_HOME_POSITION', time_usec, uint64_t, [units(us)]).
message_field('MESSAGE_INTERVAL', message_id, uint16_t, []).
message_field('MESSAGE_INTERVAL', interval_us, int32_t, [units(us)]).
message_field('EXTENDED_SYS_STATE', vtol_state, uint8_t, [enum('MAV_VTOL_STATE')]).
message_field('EXTENDED_SYS_STATE', landed_state, uint8_t, [enum('MAV_LANDED_STATE')]).
message_field('ADSB_VEHICLE', 'ICAO_address', uint32_t, []).
message_field('ADSB_VEHICLE', lat, int32_t, [units(degE7)]).
message_field('ADSB_VEHICLE', lon, int32_t, [units(degE7)]).
message_field('ADSB_VEHICLE', altitude_type, uint8_t, [enum('ADSB_ALTITUDE_TYPE')]).
message_field('ADSB_VEHICLE', altitude, int32_t, [units(mm)]).
message_field('ADSB_VEHICLE', heading, uint16_t, [units(cdeg)]).
message_field('ADSB_VEHICLE', hor_velocity, uint16_t, [units('cm/s')]).
message_field('ADSB_VEHICLE', ver_velocity, int16_t, [units('cm/s')]).
message_field('ADSB_VEHICLE', callsign, 'char[9]', []).
message_field('ADSB_VEHICLE', emitter_type, uint8_t, [enum('ADSB_EMITTER_TYPE')]).
message_field('ADSB_VEHICLE', tslc, uint8_t, [units(s)]).
message_field('ADSB_VEHICLE', flags, uint16_t, [enum('ADSB_FLAGS'), display(bitmask)]).
message_field('ADSB_VEHICLE', squawk, uint16_t, []).
message_field('COLLISION', src, uint8_t, [enum('MAV_COLLISION_SRC')]).
message_field('COLLISION', id, uint32_t, []).
message_field('COLLISION', action, uint8_t, [enum('MAV_COLLISION_ACTION')]).
message_field('COLLISION', threat_level, uint8_t, [enum('MAV_COLLISION_THREAT_LEVEL')]).
message_field('COLLISION', time_to_minimum_delta, float, [units(s)]).
message_field('COLLISION', altitude_minimum_delta, float, [units(m)]).
message_field('COLLISION', horizontal_minimum_delta, float, [units(m)]).
message_field('V2_EXTENSION', target_network, uint8_t, []).
message_field('V2_EXTENSION', target_system, uint8_t, []).
message_field('V2_EXTENSION', target_component, uint8_t, []).
message_field('V2_EXTENSION', message_type, uint16_t, []).
message_field('V2_EXTENSION', payload, 'uint8_t[249]', []).
message_field('MEMORY_VECT', address, uint16_t, []).
message_field('MEMORY_VECT', ver, uint8_t, [invalid('0')]).
message_field('MEMORY_VECT', type, uint8_t, []).
message_field('MEMORY_VECT', value, 'int8_t[32]', []).
message_field('DEBUG_VECT', name, 'char[10]', [instance(true)]).
message_field('DEBUG_VECT', time_usec, uint64_t, [units(us)]).
message_field('DEBUG_VECT', x, float, []).
message_field('DEBUG_VECT', y, float, []).
message_field('DEBUG_VECT', z, float, []).
message_field('NAMED_VALUE_FLOAT', time_boot_ms, uint32_t, [units(ms)]).
message_field('NAMED_VALUE_FLOAT', name, 'char[10]', [instance(true)]).
message_field('NAMED_VALUE_FLOAT', value, float, []).
message_field('NAMED_VALUE_INT', time_boot_ms, uint32_t, [units(ms)]).
message_field('NAMED_VALUE_INT', name, 'char[10]', [instance(true)]).
message_field('NAMED_VALUE_INT', value, int32_t, []).
message_field('STATUSTEXT', severity, uint8_t, [enum('MAV_SEVERITY')]).
message_field('STATUSTEXT', text, 'char[50]', []).
message_field('STATUSTEXT', id, uint16_t, []).
message_field('STATUSTEXT', chunk_seq, uint8_t, []).
message_field('DEBUG', time_boot_ms, uint32_t, [units(ms)]).
message_field('DEBUG', ind, uint8_t, []).
message_field('DEBUG', value, float, []).
message_field('SETUP_SIGNING', target_system, uint8_t, []).
message_field('SETUP_SIGNING', target_component, uint8_t, []).
message_field('SETUP_SIGNING', secret_key, 'uint8_t[32]', []).
message_field('SETUP_SIGNING', initial_timestamp, uint64_t, []).
message_field('BUTTON_CHANGE', time_boot_ms, uint32_t, [units(ms)]).
message_field('BUTTON_CHANGE', last_change_ms, uint32_t, [units(ms)]).
message_field('BUTTON_CHANGE', state, uint8_t, [display(bitmask)]).
message_field('PLAY_TUNE', target_system, uint8_t, []).
message_field('PLAY_TUNE', target_component, uint8_t, []).
message_field('PLAY_TUNE', tune, 'char[30]', []).
message_field('PLAY_TUNE', tune2, 'char[200]', []).
message_field('CAMERA_INFORMATION', time_boot_ms, uint32_t, [units(ms)]).
message_field('CAMERA_INFORMATION', vendor_name, 'uint8_t[32]', []).
message_field('CAMERA_INFORMATION', model_name, 'uint8_t[32]', []).
message_field('CAMERA_INFORMATION', firmware_version, uint32_t, [invalid('0')]).
message_field('CAMERA_INFORMATION', focal_length, float, [units(mm), invalid('NaN')]).
message_field('CAMERA_INFORMATION', sensor_size_h, float, [units(mm), invalid('NaN')]).
message_field('CAMERA_INFORMATION', sensor_size_v, float, [units(mm), invalid('NaN')]).
message_field('CAMERA_INFORMATION', resolution_h, uint16_t, [units(pix), invalid('0')]).
message_field('CAMERA_INFORMATION', resolution_v, uint16_t, [units(pix), invalid('0')]).
message_field('CAMERA_INFORMATION', lens_id, uint8_t, [invalid('0')]).
message_field('CAMERA_INFORMATION', flags, uint32_t, [enum('CAMERA_CAP_FLAGS'), display(bitmask)]).
message_field('CAMERA_INFORMATION', cam_definition_version, uint16_t, []).
message_field('CAMERA_INFORMATION', cam_definition_uri, 'char[140]', []).
message_field('CAMERA_INFORMATION', gimbal_device_id, uint8_t, [invalid('0')]).
message_field('CAMERA_SETTINGS', time_boot_ms, uint32_t, [units(ms)]).
message_field('CAMERA_SETTINGS', mode_id, uint8_t, [enum('CAMERA_MODE')]).
message_field('CAMERA_SETTINGS', zoomLevel, float, [invalid('NaN')]).
message_field('CAMERA_SETTINGS', focusLevel, float, [invalid('NaN')]).
message_field('STORAGE_INFORMATION', time_boot_ms, uint32_t, [units(ms)]).
message_field('STORAGE_INFORMATION', storage_id, uint8_t, [instance(true)]).
message_field('STORAGE_INFORMATION', storage_count, uint8_t, []).
message_field('STORAGE_INFORMATION', status, uint8_t, [enum('STORAGE_STATUS')]).
message_field('STORAGE_INFORMATION', total_capacity, float, [units('MiB')]).
message_field('STORAGE_INFORMATION', used_capacity, float, [units('MiB')]).
message_field('STORAGE_INFORMATION', available_capacity, float, [units('MiB')]).
message_field('STORAGE_INFORMATION', read_speed, float, [units('MiB/s')]).
message_field('STORAGE_INFORMATION', write_speed, float, [units('MiB/s')]).
message_field('STORAGE_INFORMATION', type, uint8_t, [enum('STORAGE_TYPE')]).
message_field('STORAGE_INFORMATION', name, 'char[32]', []).
message_field('STORAGE_INFORMATION', storage_usage, uint8_t, [enum('STORAGE_USAGE_FLAG')]).
message_field('CAMERA_CAPTURE_STATUS', time_boot_ms, uint32_t, [units(ms)]).
message_field('CAMERA_CAPTURE_STATUS', image_status, uint8_t, []).
message_field('CAMERA_CAPTURE_STATUS', video_status, uint8_t, []).
message_field('CAMERA_CAPTURE_STATUS', image_interval, float, [units(s)]).
message_field('CAMERA_CAPTURE_STATUS', recording_time_ms, uint32_t, [units(ms)]).
message_field('CAMERA_CAPTURE_STATUS', available_capacity, float, [units('MiB')]).
message_field('CAMERA_CAPTURE_STATUS', image_count, int32_t, []).
message_field('CAMERA_IMAGE_CAPTURED', time_boot_ms, uint32_t, [units(ms)]).
message_field('CAMERA_IMAGE_CAPTURED', time_utc, uint64_t, [units(us), invalid('0')]).
message_field('CAMERA_IMAGE_CAPTURED', camera_id, uint8_t, []).
message_field('CAMERA_IMAGE_CAPTURED', lat, int32_t, [units(degE7)]).
message_field('CAMERA_IMAGE_CAPTURED', lon, int32_t, [units(degE7)]).
message_field('CAMERA_IMAGE_CAPTURED', alt, int32_t, [units(mm)]).
message_field('CAMERA_IMAGE_CAPTURED', relative_alt, int32_t, [units(mm)]).
message_field('CAMERA_IMAGE_CAPTURED', q, 'float[4]', []).
message_field('CAMERA_IMAGE_CAPTURED', image_index, int32_t, []).
message_field('CAMERA_IMAGE_CAPTURED', capture_result, int8_t, []).
message_field('CAMERA_IMAGE_CAPTURED', file_url, 'char[205]', []).
message_field('FLIGHT_INFORMATION', time_boot_ms, uint32_t, [units(ms)]).
message_field('FLIGHT_INFORMATION', arming_time_utc, uint64_t, [units(us), invalid('0')]).
message_field('FLIGHT_INFORMATION', takeoff_time_utc, uint64_t, [units(us), invalid('0')]).
message_field('FLIGHT_INFORMATION', flight_uuid, uint64_t, []).
message_field('MOUNT_ORIENTATION', time_boot_ms, uint32_t, [units(ms)]).
message_field('MOUNT_ORIENTATION', roll, float, [units(deg), invalid('NaN')]).
message_field('MOUNT_ORIENTATION', pitch, float, [units(deg), invalid('NaN')]).
message_field('MOUNT_ORIENTATION', yaw, float, [units(deg), invalid('NaN')]).
message_field('MOUNT_ORIENTATION', yaw_absolute, float, [units(deg), invalid('NaN')]).
message_field('LOGGING_DATA', target_system, uint8_t, []).
message_field('LOGGING_DATA', target_component, uint8_t, []).
message_field('LOGGING_DATA', sequence, uint16_t, []).
message_field('LOGGING_DATA', length, uint8_t, [units(bytes)]).
message_field('LOGGING_DATA', first_message_offset, uint8_t, [units(bytes), invalid('UINT8_MAX')]).
message_field('LOGGING_DATA', data, 'uint8_t[249]', []).
message_field('LOGGING_DATA_ACKED', target_system, uint8_t, []).
message_field('LOGGING_DATA_ACKED', target_component, uint8_t, []).
message_field('LOGGING_DATA_ACKED', sequence, uint16_t, []).
message_field('LOGGING_DATA_ACKED', length, uint8_t, [units(bytes)]).
message_field('LOGGING_DATA_ACKED', first_message_offset, uint8_t, [units(bytes), invalid('UINT8_MAX')]).
message_field('LOGGING_DATA_ACKED', data, 'uint8_t[249]', []).
message_field('LOGGING_ACK', target_system, uint8_t, []).
message_field('LOGGING_ACK', target_component, uint8_t, []).
message_field('LOGGING_ACK', sequence, uint16_t, []).
message_field('VIDEO_STREAM_INFORMATION', stream_id, uint8_t, [instance(true)]).
message_field('VIDEO_STREAM_INFORMATION', count, uint8_t, []).
message_field('VIDEO_STREAM_INFORMATION', type, uint8_t, [enum('VIDEO_STREAM_TYPE')]).
message_field('VIDEO_STREAM_INFORMATION', flags, uint16_t, [enum('VIDEO_STREAM_STATUS_FLAGS')]).
message_field('VIDEO_STREAM_INFORMATION', framerate, float, [units('Hz')]).
message_field('VIDEO_STREAM_INFORMATION', resolution_h, uint16_t, [units(pix)]).
message_field('VIDEO_STREAM_INFORMATION', resolution_v, uint16_t, [units(pix)]).
message_field('VIDEO_STREAM_INFORMATION', bitrate, uint32_t, [units('bits/s')]).
message_field('VIDEO_STREAM_INFORMATION', rotation, uint16_t, [units(deg)]).
message_field('VIDEO_STREAM_INFORMATION', hfov, uint16_t, [units(deg)]).
message_field('VIDEO_STREAM_INFORMATION', name, 'char[32]', []).
message_field('VIDEO_STREAM_INFORMATION', uri, 'char[160]', []).
message_field('VIDEO_STREAM_STATUS', stream_id, uint8_t, [instance(true)]).
message_field('VIDEO_STREAM_STATUS', flags, uint16_t, [enum('VIDEO_STREAM_STATUS_FLAGS')]).
message_field('VIDEO_STREAM_STATUS', framerate, float, [units('Hz')]).
message_field('VIDEO_STREAM_STATUS', resolution_h, uint16_t, [units(pix)]).
message_field('VIDEO_STREAM_STATUS', resolution_v, uint16_t, [units(pix)]).
message_field('VIDEO_STREAM_STATUS', bitrate, uint32_t, [units('bits/s')]).
message_field('VIDEO_STREAM_STATUS', rotation, uint16_t, [units(deg)]).
message_field('VIDEO_STREAM_STATUS', hfov, uint16_t, [units(deg)]).
message_field('CAMERA_FOV_STATUS', time_boot_ms, uint32_t, [units(ms)]).
message_field('CAMERA_FOV_STATUS', lat_camera, int32_t, [units(degE7), invalid('INT32_MAX')]).
message_field('CAMERA_FOV_STATUS', lon_camera, int32_t, [units(degE7), invalid('INT32_MAX')]).
message_field('CAMERA_FOV_STATUS', alt_camera, int32_t, [units(mm), invalid('INT32_MAX')]).
message_field('CAMERA_FOV_STATUS', lat_image, int32_t, [units(degE7), invalid('INT32_MAX')]).
message_field('CAMERA_FOV_STATUS', lon_image, int32_t, [units(degE7), invalid('INT32_MAX')]).
message_field('CAMERA_FOV_STATUS', alt_image, int32_t, [units(mm), invalid('INT32_MAX')]).
message_field('CAMERA_FOV_STATUS', q, 'float[4]', []).
message_field('CAMERA_FOV_STATUS', hfov, float, [units(deg), invalid('NaN')]).
message_field('CAMERA_FOV_STATUS', vfov, float, [units(deg), invalid('NaN')]).
message_field('CAMERA_TRACKING_IMAGE_STATUS', tracking_status, uint8_t, [enum('CAMERA_TRACKING_STATUS_FLAGS')]).
message_field('CAMERA_TRACKING_IMAGE_STATUS', tracking_mode, uint8_t, [enum('CAMERA_TRACKING_MODE')]).
message_field('CAMERA_TRACKING_IMAGE_STATUS', target_data, uint8_t, [enum('CAMERA_TRACKING_TARGET_DATA')]).
message_field('CAMERA_TRACKING_IMAGE_STATUS', point_x, float, [invalid('NaN')]).
message_field('CAMERA_TRACKING_IMAGE_STATUS', point_y, float, [invalid('NaN')]).
message_field('CAMERA_TRACKING_IMAGE_STATUS', radius, float, [invalid('NaN')]).
message_field('CAMERA_TRACKING_IMAGE_STATUS', rec_top_x, float, [invalid('NaN')]).
message_field('CAMERA_TRACKING_IMAGE_STATUS', rec_top_y, float, [invalid('NaN')]).
message_field('CAMERA_TRACKING_IMAGE_STATUS', rec_bottom_x, float, [invalid('NaN')]).
message_field('CAMERA_TRACKING_IMAGE_STATUS', rec_bottom_y, float, [invalid('NaN')]).
message_field('CAMERA_TRACKING_GEO_STATUS', tracking_status, uint8_t, [enum('CAMERA_TRACKING_STATUS_FLAGS')]).
message_field('CAMERA_TRACKING_GEO_STATUS', lat, int32_t, [units(degE7)]).
message_field('CAMERA_TRACKING_GEO_STATUS', lon, int32_t, [units(degE7)]).
message_field('CAMERA_TRACKING_GEO_STATUS', alt, float, [units(m)]).
message_field('CAMERA_TRACKING_GEO_STATUS', h_acc, float, [units(m), invalid('NaN')]).
message_field('CAMERA_TRACKING_GEO_STATUS', v_acc, float, [units(m), invalid('NaN')]).
message_field('CAMERA_TRACKING_GEO_STATUS', vel_n, float, [units('m/s'), invalid('NaN')]).
message_field('CAMERA_TRACKING_GEO_STATUS', vel_e, float, [units('m/s'), invalid('NaN')]).
message_field('CAMERA_TRACKING_GEO_STATUS', vel_d, float, [units('m/s'), invalid('NaN')]).
message_field('CAMERA_TRACKING_GEO_STATUS', vel_acc, float, [units('m/s'), invalid('NaN')]).
message_field('CAMERA_TRACKING_GEO_STATUS', dist, float, [units(m), invalid('NaN')]).
message_field('CAMERA_TRACKING_GEO_STATUS', hdg, float, [units(rad), invalid('NaN')]).
message_field('CAMERA_TRACKING_GEO_STATUS', hdg_acc, float, [units(rad), invalid('NaN')]).
message_field('GIMBAL_MANAGER_INFORMATION', time_boot_ms, uint32_t, [units(ms)]).
message_field('GIMBAL_MANAGER_INFORMATION', cap_flags, uint32_t, [enum('GIMBAL_MANAGER_CAP_FLAGS'), display(bitmask)]).
message_field('GIMBAL_MANAGER_INFORMATION', gimbal_device_id, uint8_t, [instance(true)]).
message_field('GIMBAL_MANAGER_INFORMATION', roll_min, float, [units(rad)]).
message_field('GIMBAL_MANAGER_INFORMATION', roll_max, float, [units(rad)]).
message_field('GIMBAL_MANAGER_INFORMATION', pitch_min, float, [units(rad)]).
message_field('GIMBAL_MANAGER_INFORMATION', pitch_max, float, [units(rad)]).
message_field('GIMBAL_MANAGER_INFORMATION', yaw_min, float, [units(rad)]).
message_field('GIMBAL_MANAGER_INFORMATION', yaw_max, float, [units(rad)]).
message_field('GIMBAL_MANAGER_STATUS', time_boot_ms, uint32_t, [units(ms)]).
message_field('GIMBAL_MANAGER_STATUS', flags, uint32_t, [enum('GIMBAL_MANAGER_FLAGS')]).
message_field('GIMBAL_MANAGER_STATUS', gimbal_device_id, uint8_t, [instance(true)]).
message_field('GIMBAL_MANAGER_STATUS', primary_control_sysid, uint8_t, []).
message_field('GIMBAL_MANAGER_STATUS', primary_control_compid, uint8_t, []).
message_field('GIMBAL_MANAGER_STATUS', secondary_control_sysid, uint8_t, []).
message_field('GIMBAL_MANAGER_STATUS', secondary_control_compid, uint8_t, []).
message_field('GIMBAL_MANAGER_SET_ATTITUDE', target_system, uint8_t, []).
message_field('GIMBAL_MANAGER_SET_ATTITUDE', target_component, uint8_t, []).
message_field('GIMBAL_MANAGER_SET_ATTITUDE', flags, uint32_t, [enum('GIMBAL_MANAGER_FLAGS')]).
message_field('GIMBAL_MANAGER_SET_ATTITUDE', gimbal_device_id, uint8_t, [instance(true)]).
message_field('GIMBAL_MANAGER_SET_ATTITUDE', q, 'float[4]', []).
message_field('GIMBAL_MANAGER_SET_ATTITUDE', angular_velocity_x, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_MANAGER_SET_ATTITUDE', angular_velocity_y, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_MANAGER_SET_ATTITUDE', angular_velocity_z, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_DEVICE_INFORMATION', time_boot_ms, uint32_t, [units(ms)]).
message_field('GIMBAL_DEVICE_INFORMATION', vendor_name, 'char[32]', []).
message_field('GIMBAL_DEVICE_INFORMATION', model_name, 'char[32]', []).
message_field('GIMBAL_DEVICE_INFORMATION', custom_name, 'char[32]', []).
message_field('GIMBAL_DEVICE_INFORMATION', firmware_version, uint32_t, []).
message_field('GIMBAL_DEVICE_INFORMATION', hardware_version, uint32_t, []).
message_field('GIMBAL_DEVICE_INFORMATION', uid, uint64_t, [invalid('0')]).
message_field('GIMBAL_DEVICE_INFORMATION', cap_flags, uint16_t, [enum('GIMBAL_DEVICE_CAP_FLAGS'), display(bitmask)]).
message_field('GIMBAL_DEVICE_INFORMATION', custom_cap_flags, uint16_t, [display(bitmask)]).
message_field('GIMBAL_DEVICE_INFORMATION', roll_min, float, [units(rad), invalid('NaN')]).
message_field('GIMBAL_DEVICE_INFORMATION', roll_max, float, [units(rad), invalid('NaN')]).
message_field('GIMBAL_DEVICE_INFORMATION', pitch_min, float, [units(rad), invalid('NaN')]).
message_field('GIMBAL_DEVICE_INFORMATION', pitch_max, float, [units(rad), invalid('NaN')]).
message_field('GIMBAL_DEVICE_INFORMATION', yaw_min, float, [units(rad), invalid('NaN')]).
message_field('GIMBAL_DEVICE_INFORMATION', yaw_max, float, [units(rad), invalid('NaN')]).
message_field('GIMBAL_DEVICE_INFORMATION', gimbal_device_id, uint8_t, [invalid('0')]).
message_field('GIMBAL_DEVICE_SET_ATTITUDE', target_system, uint8_t, []).
message_field('GIMBAL_DEVICE_SET_ATTITUDE', target_component, uint8_t, []).
message_field('GIMBAL_DEVICE_SET_ATTITUDE', flags, uint16_t, [enum('GIMBAL_DEVICE_FLAGS'), display(bitmask)]).
message_field('GIMBAL_DEVICE_SET_ATTITUDE', q, 'float[4]', [invalid('[NaN]')]).
message_field('GIMBAL_DEVICE_SET_ATTITUDE', angular_velocity_x, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_DEVICE_SET_ATTITUDE', angular_velocity_y, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_DEVICE_SET_ATTITUDE', angular_velocity_z, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', target_system, uint8_t, []).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', target_component, uint8_t, []).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', time_boot_ms, uint32_t, [units(ms)]).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', flags, uint16_t, [enum('GIMBAL_DEVICE_FLAGS'), display(bitmask)]).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', q, 'float[4]', []).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', angular_velocity_x, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', angular_velocity_y, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', angular_velocity_z, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', failure_flags, uint32_t, [enum('GIMBAL_DEVICE_ERROR_FLAGS'), display(bitmask)]).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', delta_yaw, float, [units(rad), invalid('NAN')]).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', delta_yaw_velocity, float, [units('rad/s'), invalid('NAN')]).
message_field('GIMBAL_DEVICE_ATTITUDE_STATUS', gimbal_device_id, uint8_t, [invalid('0')]).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', target_system, uint8_t, []).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', target_component, uint8_t, []).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', time_boot_us, uint64_t, [units(us)]).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', q, 'float[4]', []).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', q_estimated_delay_us, uint32_t, [units(us), invalid('0')]).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', vx, float, [units('m/s'), invalid('NaN')]).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', vy, float, [units('m/s'), invalid('NaN')]).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', vz, float, [units('m/s'), invalid('NaN')]).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', v_estimated_delay_us, uint32_t, [units(us), invalid('0')]).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', feed_forward_angular_velocity_z, float, [units('rad/s'), invalid('NaN')]).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', estimator_status, uint16_t, [enum('ESTIMATOR_STATUS_FLAGS'), display(bitmask)]).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', landed_state, uint8_t, [enum('MAV_LANDED_STATE'), invalid('MAV_LANDED_STATE_UNDEFINED')]).
message_field('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', angular_velocity_z, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_MANAGER_SET_PITCHYAW', target_system, uint8_t, []).
message_field('GIMBAL_MANAGER_SET_PITCHYAW', target_component, uint8_t, []).
message_field('GIMBAL_MANAGER_SET_PITCHYAW', flags, uint32_t, [enum('GIMBAL_MANAGER_FLAGS')]).
message_field('GIMBAL_MANAGER_SET_PITCHYAW', gimbal_device_id, uint8_t, [instance(true)]).
message_field('GIMBAL_MANAGER_SET_PITCHYAW', pitch, float, [units(rad), invalid('NaN')]).
message_field('GIMBAL_MANAGER_SET_PITCHYAW', yaw, float, [units(rad), invalid('NaN')]).
message_field('GIMBAL_MANAGER_SET_PITCHYAW', pitch_rate, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_MANAGER_SET_PITCHYAW', yaw_rate, float, [units('rad/s'), invalid('NaN')]).
message_field('GIMBAL_MANAGER_SET_MANUAL_CONTROL', target_system, uint8_t, []).
message_field('GIMBAL_MANAGER_SET_MANUAL_CONTROL', target_component, uint8_t, []).
message_field('GIMBAL_MANAGER_SET_MANUAL_CONTROL', flags, uint32_t, [enum('GIMBAL_MANAGER_FLAGS')]).
message_field('GIMBAL_MANAGER_SET_MANUAL_CONTROL', gimbal_device_id, uint8_t, [instance(true)]).
message_field('GIMBAL_MANAGER_SET_MANUAL_CONTROL', pitch, float, [invalid('NaN')]).
message_field('GIMBAL_MANAGER_SET_MANUAL_CONTROL', yaw, float, [invalid('NaN')]).
message_field('GIMBAL_MANAGER_SET_MANUAL_CONTROL', pitch_rate, float, [invalid('NaN')]).
message_field('GIMBAL_MANAGER_SET_MANUAL_CONTROL', yaw_rate, float, [invalid('NaN')]).
message_field('ESC_INFO', index, uint8_t, [instance(true)]).
message_field('ESC_INFO', time_usec, uint64_t, [units(us)]).
message_field('ESC_INFO', counter, uint16_t, []).
message_field('ESC_INFO', count, uint8_t, []).
message_field('ESC_INFO', connection_type, uint8_t, [enum('ESC_CONNECTION_TYPE')]).
message_field('ESC_INFO', info, uint8_t, [display(bitmask)]).
message_field('ESC_INFO', failure_flags, 'uint16_t[4]', [enum('ESC_FAILURE_FLAGS'), display(bitmask)]).
message_field('ESC_INFO', error_count, 'uint32_t[4]', []).
message_field('ESC_INFO', temperature, 'int16_t[4]', [units(cdegC), invalid('[INT16_MAX]')]).
message_field('ESC_STATUS', index, uint8_t, [instance(true)]).
message_field('ESC_STATUS', time_usec, uint64_t, [units(us)]).
message_field('ESC_STATUS', rpm, 'int32_t[4]', [units(rpm)]).
message_field('ESC_STATUS', voltage, 'float[4]', [units('V')]).
message_field('ESC_STATUS', current, 'float[4]', [units('A')]).
message_field('WIFI_CONFIG_AP', ssid, 'char[32]', []).
message_field('WIFI_CONFIG_AP', password, 'char[64]', []).
message_field('WIFI_CONFIG_AP', mode, int8_t, [enum('WIFI_CONFIG_AP_MODE')]).
message_field('WIFI_CONFIG_AP', response, int8_t, [enum('WIFI_CONFIG_AP_RESPONSE')]).
message_field('AIS_VESSEL', 'MMSI', uint32_t, []).
message_field('AIS_VESSEL', lat, int32_t, [units(degE7)]).
message_field('AIS_VESSEL', lon, int32_t, [units(degE7)]).
message_field('AIS_VESSEL', 'COG', uint16_t, [units(cdeg)]).
message_field('AIS_VESSEL', heading, uint16_t, [units(cdeg)]).
message_field('AIS_VESSEL', velocity, uint16_t, [units('cm/s')]).
message_field('AIS_VESSEL', turn_rate, int8_t, [units('cdeg/s')]).
message_field('AIS_VESSEL', navigational_status, uint8_t, [enum('AIS_NAV_STATUS')]).
message_field('AIS_VESSEL', type, uint8_t, [enum('AIS_TYPE')]).
message_field('AIS_VESSEL', dimension_bow, uint16_t, [units(m)]).
message_field('AIS_VESSEL', dimension_stern, uint16_t, [units(m)]).
message_field('AIS_VESSEL', dimension_port, uint8_t, [units(m)]).
message_field('AIS_VESSEL', dimension_starboard, uint8_t, [units(m)]).
message_field('AIS_VESSEL', callsign, 'char[7]', []).
message_field('AIS_VESSEL', name, 'char[20]', []).
message_field('AIS_VESSEL', tslc, uint16_t, [units(s)]).
message_field('AIS_VESSEL', flags, uint16_t, [enum('AIS_FLAGS'), display(bitmask)]).
message_field('UAVCAN_NODE_STATUS', time_usec, uint64_t, [units(us)]).
message_field('UAVCAN_NODE_STATUS', uptime_sec, uint32_t, [units(s)]).
message_field('UAVCAN_NODE_STATUS', health, uint8_t, [enum('UAVCAN_NODE_HEALTH')]).
message_field('UAVCAN_NODE_STATUS', mode, uint8_t, [enum('UAVCAN_NODE_MODE')]).
message_field('UAVCAN_NODE_STATUS', sub_mode, uint8_t, []).
message_field('UAVCAN_NODE_STATUS', vendor_specific_status_code, uint16_t, []).
message_field('UAVCAN_NODE_INFO', time_usec, uint64_t, [units(us)]).
message_field('UAVCAN_NODE_INFO', uptime_sec, uint32_t, [units(s)]).
message_field('UAVCAN_NODE_INFO', name, 'char[80]', []).
message_field('UAVCAN_NODE_INFO', hw_version_major, uint8_t, []).
message_field('UAVCAN_NODE_INFO', hw_version_minor, uint8_t, []).
message_field('UAVCAN_NODE_INFO', hw_unique_id, 'uint8_t[16]', []).
message_field('UAVCAN_NODE_INFO', sw_version_major, uint8_t, []).
message_field('UAVCAN_NODE_INFO', sw_version_minor, uint8_t, []).
message_field('UAVCAN_NODE_INFO', sw_vcs_commit, uint32_t, [invalid('0')]).
message_field('PARAM_EXT_REQUEST_READ', target_system, uint8_t, []).
message_field('PARAM_EXT_REQUEST_READ', target_component, uint8_t, []).
message_field('PARAM_EXT_REQUEST_READ', param_id, 'char[16]', []).
message_field('PARAM_EXT_REQUEST_READ', param_index, int16_t, [invalid('-1')]).
message_field('PARAM_EXT_REQUEST_LIST', target_system, uint8_t, []).
message_field('PARAM_EXT_REQUEST_LIST', target_component, uint8_t, []).
message_field('PARAM_EXT_VALUE', param_id, 'char[16]', []).
message_field('PARAM_EXT_VALUE', param_value, 'char[128]', []).
message_field('PARAM_EXT_VALUE', param_type, uint8_t, [enum('MAV_PARAM_EXT_TYPE')]).
message_field('PARAM_EXT_VALUE', param_count, uint16_t, []).
message_field('PARAM_EXT_VALUE', param_index, uint16_t, []).
message_field('PARAM_EXT_SET', target_system, uint8_t, []).
message_field('PARAM_EXT_SET', target_component, uint8_t, []).
message_field('PARAM_EXT_SET', param_id, 'char[16]', []).
message_field('PARAM_EXT_SET', param_value, 'char[128]', []).
message_field('PARAM_EXT_SET', param_type, uint8_t, [enum('MAV_PARAM_EXT_TYPE')]).
message_field('PARAM_EXT_ACK', param_id, 'char[16]', []).
message_field('PARAM_EXT_ACK', param_value, 'char[128]', []).
message_field('PARAM_EXT_ACK', param_type, uint8_t, [enum('MAV_PARAM_EXT_TYPE')]).
message_field('PARAM_EXT_ACK', param_result, uint8_t, [enum('PARAM_ACK')]).
message_field('OBSTACLE_DISTANCE', time_usec, uint64_t, [units(us)]).
message_field('OBSTACLE_DISTANCE', sensor_type, uint8_t, [enum('MAV_DISTANCE_SENSOR')]).
message_field('OBSTACLE_DISTANCE', distances, 'uint16_t[72]', [units(cm), invalid('[UINT16_MAX]')]).
message_field('OBSTACLE_DISTANCE', increment, uint8_t, [units(deg)]).
message_field('OBSTACLE_DISTANCE', min_distance, uint16_t, [units(cm)]).
message_field('OBSTACLE_DISTANCE', max_distance, uint16_t, [units(cm)]).
message_field('OBSTACLE_DISTANCE', increment_f, float, [units(deg)]).
message_field('OBSTACLE_DISTANCE', angle_offset, float, [units(deg)]).
message_field('OBSTACLE_DISTANCE', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('ODOMETRY', time_usec, uint64_t, [units(us)]).
message_field('ODOMETRY', frame_id, uint8_t, [enum('MAV_FRAME')]).
message_field('ODOMETRY', child_frame_id, uint8_t, [enum('MAV_FRAME')]).
message_field('ODOMETRY', x, float, [units(m)]).
message_field('ODOMETRY', y, float, [units(m)]).
message_field('ODOMETRY', z, float, [units(m)]).
message_field('ODOMETRY', q, 'float[4]', []).
message_field('ODOMETRY', vx, float, [units('m/s')]).
message_field('ODOMETRY', vy, float, [units('m/s')]).
message_field('ODOMETRY', vz, float, [units('m/s')]).
message_field('ODOMETRY', rollspeed, float, [units('rad/s')]).
message_field('ODOMETRY', pitchspeed, float, [units('rad/s')]).
message_field('ODOMETRY', yawspeed, float, [units('rad/s')]).
message_field('ODOMETRY', pose_covariance, 'float[21]', [invalid('[NaN:]')]).
message_field('ODOMETRY', velocity_covariance, 'float[21]', [invalid('[NaN:]')]).
message_field('ODOMETRY', reset_counter, uint8_t, []).
message_field('ODOMETRY', estimator_type, uint8_t, [enum('MAV_ESTIMATOR_TYPE')]).
message_field('ODOMETRY', quality, int8_t, [units('%'), invalid('0')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', time_usec, uint64_t, [units(us)]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', valid_points, uint8_t, []).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', pos_x, 'float[5]', [units(m), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', pos_y, 'float[5]', [units(m), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', pos_z, 'float[5]', [units(m), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', vel_x, 'float[5]', [units('m/s'), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', vel_y, 'float[5]', [units('m/s'), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', vel_z, 'float[5]', [units('m/s'), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', acc_x, 'float[5]', [units('m/s/s'), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', acc_y, 'float[5]', [units('m/s/s'), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', acc_z, 'float[5]', [units('m/s/s'), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', pos_yaw, 'float[5]', [units(rad), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', vel_yaw, 'float[5]', [units('rad/s'), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_WAYPOINTS', command, 'uint16_t[5]', [enum('MAV_CMD'), invalid('[UINT16_MAX]')]).
message_field('TRAJECTORY_REPRESENTATION_BEZIER', time_usec, uint64_t, [units(us)]).
message_field('TRAJECTORY_REPRESENTATION_BEZIER', valid_points, uint8_t, []).
message_field('TRAJECTORY_REPRESENTATION_BEZIER', pos_x, 'float[5]', [units(m), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_BEZIER', pos_y, 'float[5]', [units(m), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_BEZIER', pos_z, 'float[5]', [units(m), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_BEZIER', delta, 'float[5]', [units(s), invalid('[NaN]')]).
message_field('TRAJECTORY_REPRESENTATION_BEZIER', pos_yaw, 'float[5]', [units(rad), invalid('[NaN]')]).
message_field('CELLULAR_STATUS', status, uint8_t, [enum('CELLULAR_STATUS_FLAG')]).
message_field('CELLULAR_STATUS', failure_reason, uint8_t, [enum('CELLULAR_NETWORK_FAILED_REASON')]).
message_field('CELLULAR_STATUS', type, uint8_t, [enum('CELLULAR_NETWORK_RADIO_TYPE')]).
message_field('CELLULAR_STATUS', quality, uint8_t, [invalid('UINT8_MAX')]).
message_field('CELLULAR_STATUS', mcc, uint16_t, [invalid('UINT16_MAX')]).
message_field('CELLULAR_STATUS', mnc, uint16_t, [invalid('UINT16_MAX')]).
message_field('CELLULAR_STATUS', lac, uint16_t, [invalid('0')]).
message_field('ISBD_LINK_STATUS', timestamp, uint64_t, [units(us)]).
message_field('ISBD_LINK_STATUS', last_heartbeat, uint64_t, [units(us)]).
message_field('ISBD_LINK_STATUS', failed_sessions, uint16_t, []).
message_field('ISBD_LINK_STATUS', successful_sessions, uint16_t, []).
message_field('ISBD_LINK_STATUS', signal_quality, uint8_t, []).
message_field('ISBD_LINK_STATUS', ring_pending, uint8_t, []).
message_field('ISBD_LINK_STATUS', tx_session_pending, uint8_t, []).
message_field('ISBD_LINK_STATUS', rx_session_pending, uint8_t, []).
message_field('CELLULAR_CONFIG', enable_lte, uint8_t, []).
message_field('CELLULAR_CONFIG', enable_pin, uint8_t, []).
message_field('CELLULAR_CONFIG', pin, 'char[16]', []).
message_field('CELLULAR_CONFIG', new_pin, 'char[16]', []).
message_field('CELLULAR_CONFIG', apn, 'char[32]', []).
message_field('CELLULAR_CONFIG', puk, 'char[16]', []).
message_field('CELLULAR_CONFIG', roaming, uint8_t, []).
message_field('CELLULAR_CONFIG', response, uint8_t, [enum('CELLULAR_CONFIG_RESPONSE')]).
message_field('RAW_RPM', index, uint8_t, []).
message_field('RAW_RPM', frequency, float, [units(rpm)]).
message_field('UTM_GLOBAL_POSITION', time, uint64_t, [units(us)]).
message_field('UTM_GLOBAL_POSITION', uas_id, 'uint8_t[18]', []).
message_field('UTM_GLOBAL_POSITION', lat, int32_t, [units(degE7)]).
message_field('UTM_GLOBAL_POSITION', lon, int32_t, [units(degE7)]).
message_field('UTM_GLOBAL_POSITION', alt, int32_t, [units(mm)]).
message_field('UTM_GLOBAL_POSITION', relative_alt, int32_t, [units(mm)]).
message_field('UTM_GLOBAL_POSITION', vx, int16_t, [units('cm/s')]).
message_field('UTM_GLOBAL_POSITION', vy, int16_t, [units('cm/s')]).
message_field('UTM_GLOBAL_POSITION', vz, int16_t, [units('cm/s')]).
message_field('UTM_GLOBAL_POSITION', h_acc, uint16_t, [units(mm)]).
message_field('UTM_GLOBAL_POSITION', v_acc, uint16_t, [units(mm)]).
message_field('UTM_GLOBAL_POSITION', vel_acc, uint16_t, [units('cm/s')]).
message_field('UTM_GLOBAL_POSITION', next_lat, int32_t, [units(degE7)]).
message_field('UTM_GLOBAL_POSITION', next_lon, int32_t, [units(degE7)]).
message_field('UTM_GLOBAL_POSITION', next_alt, int32_t, [units(mm)]).
message_field('UTM_GLOBAL_POSITION', update_rate, uint16_t, [units(cs), invalid('0')]).
message_field('UTM_GLOBAL_POSITION', flight_state, uint8_t, [enum('UTM_FLIGHT_STATE')]).
message_field('UTM_GLOBAL_POSITION', flags, uint8_t, [enum('UTM_DATA_AVAIL_FLAGS'), display(bitmask)]).
message_field('DEBUG_FLOAT_ARRAY', time_usec, uint64_t, [units(us)]).
message_field('DEBUG_FLOAT_ARRAY', name, 'char[10]', []).
message_field('DEBUG_FLOAT_ARRAY', array_id, uint16_t, [instance(true)]).
message_field('DEBUG_FLOAT_ARRAY', data, 'float[58]', []).
message_field('ORBIT_EXECUTION_STATUS', time_usec, uint64_t, [units(us)]).
message_field('ORBIT_EXECUTION_STATUS', radius, float, [units(m)]).
message_field('ORBIT_EXECUTION_STATUS', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('ORBIT_EXECUTION_STATUS', x, int32_t, []).
message_field('ORBIT_EXECUTION_STATUS', y, int32_t, []).
message_field('ORBIT_EXECUTION_STATUS', z, float, [units(m)]).
message_field('SMART_BATTERY_INFO', id, uint8_t, [instance(true)]).
message_field('SMART_BATTERY_INFO', battery_function, uint8_t, [enum('MAV_BATTERY_FUNCTION')]).
message_field('SMART_BATTERY_INFO', type, uint8_t, [enum('MAV_BATTERY_TYPE')]).
message_field('SMART_BATTERY_INFO', capacity_full_specification, int32_t, [units(mAh), invalid('-1')]).
message_field('SMART_BATTERY_INFO', capacity_full, int32_t, [units(mAh), invalid('-1')]).
message_field('SMART_BATTERY_INFO', cycle_count, uint16_t, [invalid('UINT16_MAX')]).
message_field('SMART_BATTERY_INFO', serial_number, 'char[16]', [invalid('[0]')]).
message_field('SMART_BATTERY_INFO', device_name, 'char[50]', [invalid('[0]')]).
message_field('SMART_BATTERY_INFO', weight, uint16_t, [units(g), invalid('0')]).
message_field('SMART_BATTERY_INFO', discharge_minimum_voltage, uint16_t, [units(mV), invalid('UINT16_MAX')]).
message_field('SMART_BATTERY_INFO', charging_minimum_voltage, uint16_t, [units(mV), invalid('UINT16_MAX')]).
message_field('SMART_BATTERY_INFO', resting_minimum_voltage, uint16_t, [units(mV), invalid('UINT16_MAX')]).
message_field('SMART_BATTERY_INFO', charging_maximum_voltage, uint16_t, [units(mV), invalid('0')]).
message_field('SMART_BATTERY_INFO', cells_in_series, uint8_t, [invalid('0')]).
message_field('SMART_BATTERY_INFO', discharge_maximum_current, uint32_t, [units(mA), invalid('0')]).
message_field('SMART_BATTERY_INFO', discharge_maximum_burst_current, uint32_t, [units(mA), invalid('0')]).
message_field('SMART_BATTERY_INFO', manufacture_date, 'char[11]', [invalid('[0]')]).
message_field('GENERATOR_STATUS', status, uint64_t, [display(bitmask), enum('MAV_GENERATOR_STATUS_FLAG')]).
message_field('GENERATOR_STATUS', generator_speed, uint16_t, [units(rpm), invalid('UINT16_MAX')]).
message_field('GENERATOR_STATUS', battery_current, float, [units('A'), invalid('NaN')]).
message_field('GENERATOR_STATUS', load_current, float, [units('A'), invalid('NaN')]).
message_field('GENERATOR_STATUS', power_generated, float, [units('W'), invalid('NaN')]).
message_field('GENERATOR_STATUS', bus_voltage, float, [units('V')]).
message_field('GENERATOR_STATUS', rectifier_temperature, int16_t, [units(degC), invalid('INT16_MAX')]).
message_field('GENERATOR_STATUS', bat_current_setpoint, float, [units('A'), invalid('NaN')]).
message_field('GENERATOR_STATUS', generator_temperature, int16_t, [units(degC), invalid('INT16_MAX')]).
message_field('GENERATOR_STATUS', runtime, uint32_t, [units(s), invalid('UINT32_MAX')]).
message_field('GENERATOR_STATUS', time_until_maintenance, int32_t, [units(s), invalid('INT32_MAX')]).
message_field('ACTUATOR_OUTPUT_STATUS', time_usec, uint64_t, [units(us)]).
message_field('ACTUATOR_OUTPUT_STATUS', active, uint32_t, [display(bitmask)]).
message_field('ACTUATOR_OUTPUT_STATUS', actuator, 'float[32]', []).
message_field('TIME_ESTIMATE_TO_TARGET', safe_return, int32_t, [units(s)]).
message_field('TIME_ESTIMATE_TO_TARGET', land, int32_t, [units(s)]).
message_field('TIME_ESTIMATE_TO_TARGET', mission_next_item, int32_t, [units(s), invalid('-1')]).
message_field('TIME_ESTIMATE_TO_TARGET', mission_end, int32_t, [units(s), invalid('-1')]).
message_field('TIME_ESTIMATE_TO_TARGET', commanded_action, int32_t, [units(s), invalid('-1')]).
message_field('TUNNEL', target_system, uint8_t, []).
message_field('TUNNEL', target_component, uint8_t, []).
message_field('TUNNEL', payload_type, uint16_t, [enum('MAV_TUNNEL_PAYLOAD_TYPE')]).
message_field('TUNNEL', payload_length, uint8_t, []).
message_field('TUNNEL', payload, 'uint8_t[128]', []).
message_field('CAN_FRAME', target_system, uint8_t, []).
message_field('CAN_FRAME', target_component, uint8_t, []).
message_field('CAN_FRAME', bus, uint8_t, []).
message_field('CAN_FRAME', len, uint8_t, []).
message_field('CAN_FRAME', id, uint32_t, []).
message_field('CAN_FRAME', data, 'uint8_t[8]', []).
message_field('ONBOARD_COMPUTER_STATUS', time_usec, uint64_t, [units(us)]).
message_field('ONBOARD_COMPUTER_STATUS', uptime, uint32_t, [units(ms)]).
message_field('ONBOARD_COMPUTER_STATUS', type, uint8_t, []).
message_field('ONBOARD_COMPUTER_STATUS', cpu_cores, 'uint8_t[8]', [invalid('[UINT8_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', cpu_combined, 'uint8_t[10]', [invalid('[UINT8_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', gpu_cores, 'uint8_t[4]', [invalid('[UINT8_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', gpu_combined, 'uint8_t[10]', [invalid('[UINT8_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', temperature_board, int8_t, [units(degC), invalid('INT8_MAX')]).
message_field('ONBOARD_COMPUTER_STATUS', temperature_core, 'int8_t[8]', [units(degC), invalid('[INT8_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', fan_speed, 'int16_t[4]', [units(rpm), invalid('[INT16_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', ram_usage, uint32_t, [units('MiB'), invalid('UINT32_MAX')]).
message_field('ONBOARD_COMPUTER_STATUS', ram_total, uint32_t, [units('MiB'), invalid('UINT32_MAX')]).
message_field('ONBOARD_COMPUTER_STATUS', storage_type, 'uint32_t[4]', [invalid('[UINT32_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', storage_usage, 'uint32_t[4]', [units('MiB'), invalid('[UINT32_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', storage_total, 'uint32_t[4]', [units('MiB'), invalid('[UINT32_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', link_type, 'uint32_t[6]', []).
message_field('ONBOARD_COMPUTER_STATUS', link_tx_rate, 'uint32_t[6]', [units('KiB/s'), invalid('[UINT32_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', link_rx_rate, 'uint32_t[6]', [units('KiB/s'), invalid('[UINT32_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', link_tx_max, 'uint32_t[6]', [units('KiB/s'), invalid('[UINT32_MAX]')]).
message_field('ONBOARD_COMPUTER_STATUS', link_rx_max, 'uint32_t[6]', [units('KiB/s'), invalid('[UINT32_MAX]')]).
message_field('COMPONENT_INFORMATION', time_boot_ms, uint32_t, [units(ms)]).
message_field('COMPONENT_INFORMATION', general_metadata_file_crc, uint32_t, []).
message_field('COMPONENT_INFORMATION', general_metadata_uri, 'char[100]', []).
message_field('COMPONENT_INFORMATION', peripherals_metadata_file_crc, uint32_t, []).
message_field('COMPONENT_INFORMATION', peripherals_metadata_uri, 'char[100]', []).
message_field('COMPONENT_METADATA', time_boot_ms, uint32_t, [units(ms)]).
message_field('COMPONENT_METADATA', file_crc, uint32_t, []).
message_field('COMPONENT_METADATA', uri, 'char[100]', []).
message_field('PLAY_TUNE_V2', target_system, uint8_t, []).
message_field('PLAY_TUNE_V2', target_component, uint8_t, []).
message_field('PLAY_TUNE_V2', format, uint32_t, [enum('TUNE_FORMAT'), display(bitmask)]).
message_field('PLAY_TUNE_V2', tune, 'char[248]', []).
message_field('SUPPORTED_TUNES', target_system, uint8_t, []).
message_field('SUPPORTED_TUNES', target_component, uint8_t, []).
message_field('SUPPORTED_TUNES', format, uint32_t, [enum('TUNE_FORMAT'), display(bitmask)]).
message_field('EVENT', destination_component, uint8_t, []).
message_field('EVENT', destination_system, uint8_t, []).
message_field('EVENT', id, uint32_t, []).
message_field('EVENT', event_time_boot_ms, uint32_t, [units(ms)]).
message_field('EVENT', sequence, uint16_t, []).
message_field('EVENT', log_levels, uint8_t, []).
message_field('EVENT', arguments, 'uint8_t[40]', []).
message_field('CURRENT_EVENT_SEQUENCE', sequence, uint16_t, []).
message_field('CURRENT_EVENT_SEQUENCE', flags, uint8_t, [enum('MAV_EVENT_CURRENT_SEQUENCE_FLAGS'), display(bitmask)]).
message_field('REQUEST_EVENT', target_system, uint8_t, []).
message_field('REQUEST_EVENT', target_component, uint8_t, []).
message_field('REQUEST_EVENT', first_sequence, uint16_t, []).
message_field('REQUEST_EVENT', last_sequence, uint16_t, []).
message_field('RESPONSE_EVENT_ERROR', target_system, uint8_t, []).
message_field('RESPONSE_EVENT_ERROR', target_component, uint8_t, []).
message_field('RESPONSE_EVENT_ERROR', sequence, uint16_t, []).
message_field('RESPONSE_EVENT_ERROR', sequence_oldest_available, uint16_t, []).
message_field('RESPONSE_EVENT_ERROR', reason, uint8_t, [enum('MAV_EVENT_ERROR_REASON')]).
message_field('CANFD_FRAME', target_system, uint8_t, []).
message_field('CANFD_FRAME', target_component, uint8_t, []).
message_field('CANFD_FRAME', bus, uint8_t, []).
message_field('CANFD_FRAME', len, uint8_t, []).
message_field('CANFD_FRAME', id, uint32_t, []).
message_field('CANFD_FRAME', data, 'uint8_t[64]', []).
message_field('CAN_FILTER_MODIFY', target_system, uint8_t, []).
message_field('CAN_FILTER_MODIFY', target_component, uint8_t, []).
message_field('CAN_FILTER_MODIFY', bus, uint8_t, []).
message_field('CAN_FILTER_MODIFY', operation, uint8_t, [enum('CAN_FILTER_OP')]).
message_field('CAN_FILTER_MODIFY', num_ids, uint8_t, []).
message_field('CAN_FILTER_MODIFY', ids, 'uint16_t[16]', []).
message_field('WHEEL_DISTANCE', time_usec, uint64_t, [units(us)]).
message_field('WHEEL_DISTANCE', count, uint8_t, []).
message_field('WHEEL_DISTANCE', distance, 'double[16]', [units(m)]).
message_field('WINCH_STATUS', time_usec, uint64_t, [units(us)]).
message_field('WINCH_STATUS', line_length, float, [units(m), invalid('NaN')]).
message_field('WINCH_STATUS', speed, float, [units('m/s'), invalid('NaN')]).
message_field('WINCH_STATUS', tension, float, [units(kg), invalid('NaN')]).
message_field('WINCH_STATUS', voltage, float, [units('V'), invalid('NaN')]).
message_field('WINCH_STATUS', current, float, [units('A'), invalid('NaN')]).
message_field('WINCH_STATUS', temperature, int16_t, [units(degC), invalid('INT16_MAX')]).
message_field('WINCH_STATUS', status, uint32_t, [display(bitmask), enum('MAV_WINCH_STATUS_FLAG')]).
message_field('OPEN_DRONE_ID_BASIC_ID', target_system, uint8_t, []).
message_field('OPEN_DRONE_ID_BASIC_ID', target_component, uint8_t, []).
message_field('OPEN_DRONE_ID_BASIC_ID', id_or_mac, 'uint8_t[20]', []).
message_field('OPEN_DRONE_ID_BASIC_ID', id_type, uint8_t, [enum('MAV_ODID_ID_TYPE')]).
message_field('OPEN_DRONE_ID_BASIC_ID', ua_type, uint8_t, [enum('MAV_ODID_UA_TYPE')]).
message_field('OPEN_DRONE_ID_BASIC_ID', uas_id, 'uint8_t[20]', []).
message_field('OPEN_DRONE_ID_LOCATION', target_system, uint8_t, []).
message_field('OPEN_DRONE_ID_LOCATION', target_component, uint8_t, []).
message_field('OPEN_DRONE_ID_LOCATION', id_or_mac, 'uint8_t[20]', []).
message_field('OPEN_DRONE_ID_LOCATION', status, uint8_t, [enum('MAV_ODID_STATUS')]).
message_field('OPEN_DRONE_ID_LOCATION', direction, uint16_t, [units(cdeg), invalid('36100')]).
message_field('OPEN_DRONE_ID_LOCATION', speed_horizontal, uint16_t, [units('cm/s')]).
message_field('OPEN_DRONE_ID_LOCATION', speed_vertical, int16_t, [units('cm/s')]).
message_field('OPEN_DRONE_ID_LOCATION', latitude, int32_t, [units(degE7), invalid('0')]).
message_field('OPEN_DRONE_ID_LOCATION', longitude, int32_t, [units(degE7), invalid('0')]).
message_field('OPEN_DRONE_ID_LOCATION', altitude_barometric, float, [units(m), invalid('-1000')]).
message_field('OPEN_DRONE_ID_LOCATION', altitude_geodetic, float, [units(m), invalid('-1000')]).
message_field('OPEN_DRONE_ID_LOCATION', height_reference, uint8_t, [enum('MAV_ODID_HEIGHT_REF')]).
message_field('OPEN_DRONE_ID_LOCATION', height, float, [units(m), invalid('-1000')]).
message_field('OPEN_DRONE_ID_LOCATION', horizontal_accuracy, uint8_t, [enum('MAV_ODID_HOR_ACC')]).
message_field('OPEN_DRONE_ID_LOCATION', vertical_accuracy, uint8_t, [enum('MAV_ODID_VER_ACC')]).
message_field('OPEN_DRONE_ID_LOCATION', barometer_accuracy, uint8_t, [enum('MAV_ODID_VER_ACC')]).
message_field('OPEN_DRONE_ID_LOCATION', speed_accuracy, uint8_t, [enum('MAV_ODID_SPEED_ACC')]).
message_field('OPEN_DRONE_ID_LOCATION', timestamp, float, [units(s), invalid('0xFFFF')]).
message_field('OPEN_DRONE_ID_LOCATION', timestamp_accuracy, uint8_t, [enum('MAV_ODID_TIME_ACC')]).
message_field('OPEN_DRONE_ID_AUTHENTICATION', target_system, uint8_t, []).
message_field('OPEN_DRONE_ID_AUTHENTICATION', target_component, uint8_t, []).
message_field('OPEN_DRONE_ID_AUTHENTICATION', id_or_mac, 'uint8_t[20]', []).
message_field('OPEN_DRONE_ID_AUTHENTICATION', authentication_type, uint8_t, [enum('MAV_ODID_AUTH_TYPE')]).
message_field('OPEN_DRONE_ID_AUTHENTICATION', data_page, uint8_t, []).
message_field('OPEN_DRONE_ID_AUTHENTICATION', last_page_index, uint8_t, []).
message_field('OPEN_DRONE_ID_AUTHENTICATION', length, uint8_t, [units(bytes)]).
message_field('OPEN_DRONE_ID_AUTHENTICATION', timestamp, uint32_t, [units(s)]).
message_field('OPEN_DRONE_ID_AUTHENTICATION', authentication_data, 'uint8_t[23]', []).
message_field('OPEN_DRONE_ID_SELF_ID', target_system, uint8_t, []).
message_field('OPEN_DRONE_ID_SELF_ID', target_component, uint8_t, []).
message_field('OPEN_DRONE_ID_SELF_ID', id_or_mac, 'uint8_t[20]', []).
message_field('OPEN_DRONE_ID_SELF_ID', description_type, uint8_t, [enum('MAV_ODID_DESC_TYPE')]).
message_field('OPEN_DRONE_ID_SELF_ID', description, 'char[23]', []).
message_field('OPEN_DRONE_ID_SYSTEM', target_system, uint8_t, []).
message_field('OPEN_DRONE_ID_SYSTEM', target_component, uint8_t, []).
message_field('OPEN_DRONE_ID_SYSTEM', id_or_mac, 'uint8_t[20]', []).
message_field('OPEN_DRONE_ID_SYSTEM', operator_location_type, uint8_t, [enum('MAV_ODID_OPERATOR_LOCATION_TYPE')]).
message_field('OPEN_DRONE_ID_SYSTEM', classification_type, uint8_t, [enum('MAV_ODID_CLASSIFICATION_TYPE')]).
message_field('OPEN_DRONE_ID_SYSTEM', operator_latitude, int32_t, [units(degE7), invalid('0')]).
message_field('OPEN_DRONE_ID_SYSTEM', operator_longitude, int32_t, [units(degE7), invalid('0')]).
message_field('OPEN_DRONE_ID_SYSTEM', area_count, uint16_t, []).
message_field('OPEN_DRONE_ID_SYSTEM', area_radius, uint16_t, [units(m)]).
message_field('OPEN_DRONE_ID_SYSTEM', area_ceiling, float, [units(m), invalid('-1000')]).
message_field('OPEN_DRONE_ID_SYSTEM', area_floor, float, [units(m), invalid('-1000')]).
message_field('OPEN_DRONE_ID_SYSTEM', category_eu, uint8_t, [enum('MAV_ODID_CATEGORY_EU')]).
message_field('OPEN_DRONE_ID_SYSTEM', class_eu, uint8_t, [enum('MAV_ODID_CLASS_EU')]).
message_field('OPEN_DRONE_ID_SYSTEM', operator_altitude_geo, float, [units(m), invalid('-1000')]).
message_field('OPEN_DRONE_ID_SYSTEM', timestamp, uint32_t, [units(s)]).
message_field('OPEN_DRONE_ID_OPERATOR_ID', target_system, uint8_t, []).
message_field('OPEN_DRONE_ID_OPERATOR_ID', target_component, uint8_t, []).
message_field('OPEN_DRONE_ID_OPERATOR_ID', id_or_mac, 'uint8_t[20]', []).
message_field('OPEN_DRONE_ID_OPERATOR_ID', operator_id_type, uint8_t, [enum('MAV_ODID_OPERATOR_ID_TYPE')]).
message_field('OPEN_DRONE_ID_OPERATOR_ID', operator_id, 'char[20]', []).
message_field('OPEN_DRONE_ID_MESSAGE_PACK', target_system, uint8_t, []).
message_field('OPEN_DRONE_ID_MESSAGE_PACK', target_component, uint8_t, []).
message_field('OPEN_DRONE_ID_MESSAGE_PACK', id_or_mac, 'uint8_t[20]', []).
message_field('OPEN_DRONE_ID_MESSAGE_PACK', single_message_size, uint8_t, [units(bytes)]).
message_field('OPEN_DRONE_ID_MESSAGE_PACK', msg_pack_size, uint8_t, []).
message_field('OPEN_DRONE_ID_MESSAGE_PACK', messages, 'uint8_t[225]', []).
message_field('OPEN_DRONE_ID_ARM_STATUS', status, uint8_t, [enum('MAV_ODID_ARM_STATUS')]).
message_field('OPEN_DRONE_ID_ARM_STATUS', error, 'char[50]', []).
message_field('OPEN_DRONE_ID_SYSTEM_UPDATE', target_system, uint8_t, []).
message_field('OPEN_DRONE_ID_SYSTEM_UPDATE', target_component, uint8_t, []).
message_field('OPEN_DRONE_ID_SYSTEM_UPDATE', operator_latitude, int32_t, [units(degE7), invalid('0')]).
message_field('OPEN_DRONE_ID_SYSTEM_UPDATE', operator_longitude, int32_t, [units(degE7), invalid('0')]).
message_field('OPEN_DRONE_ID_SYSTEM_UPDATE', operator_altitude_geo, float, [units(m), invalid('-1000')]).
message_field('OPEN_DRONE_ID_SYSTEM_UPDATE', timestamp, uint32_t, [units(s)]).
message_field('HYGROMETER_SENSOR', id, uint8_t, [instance(true)]).
message_field('HYGROMETER_SENSOR', temperature, int16_t, [units(cdegC)]).
message_field('HYGROMETER_SENSOR', humidity, uint16_t, [units('c%')]).
message_field('PARAM_ACK_TRANSACTION', target_system, uint8_t, []).
message_field('PARAM_ACK_TRANSACTION', target_component, uint8_t, []).
message_field('PARAM_ACK_TRANSACTION', param_id, 'char[16]', []).
message_field('PARAM_ACK_TRANSACTION', param_value, float, []).
message_field('PARAM_ACK_TRANSACTION', param_type, uint8_t, [enum('MAV_PARAM_TYPE')]).
message_field('PARAM_ACK_TRANSACTION', param_result, uint8_t, [enum('PARAM_ACK')]).
message_field('AIRSPEED', id, uint8_t, [instance(true)]).
message_field('AIRSPEED', airspeed, float, [units('m/s')]).
message_field('AIRSPEED', temperature, int16_t, [units(cdegC)]).
message_field('AIRSPEED', raw_press, float, [units(hPa)]).
message_field('AIRSPEED', flags, uint8_t, [enum('AIRSPEED_SENSOR_FLAGS')]).
message_field('WIFI_NETWORK_INFO', ssid, 'char[32]', []).
message_field('WIFI_NETWORK_INFO', channel_id, uint8_t, []).
message_field('WIFI_NETWORK_INFO', signal_quality, uint8_t, [units('%')]).
message_field('WIFI_NETWORK_INFO', data_rate, uint16_t, [units('MiB/s')]).
message_field('WIFI_NETWORK_INFO', security, uint8_t, [enum('WIFI_NETWORK_SECURITY')]).
message_field('FIGURE_EIGHT_EXECUTION_STATUS', time_usec, uint64_t, [units(us)]).
message_field('FIGURE_EIGHT_EXECUTION_STATUS', major_radius, float, [units(m)]).
message_field('FIGURE_EIGHT_EXECUTION_STATUS', minor_radius, float, [units(m)]).
message_field('FIGURE_EIGHT_EXECUTION_STATUS', orientation, float, [units(rad)]).
message_field('FIGURE_EIGHT_EXECUTION_STATUS', frame, uint8_t, [enum('MAV_FRAME')]).
message_field('FIGURE_EIGHT_EXECUTION_STATUS', x, int32_t, []).
message_field('FIGURE_EIGHT_EXECUTION_STATUS', y, int32_t, []).
message_field('FIGURE_EIGHT_EXECUTION_STATUS', z, float, [units(m)]).
message_field('BATTERY_STATUS_V2', id, uint8_t, [instance(true)]).
message_field('BATTERY_STATUS_V2', temperature, int16_t, [units(cdegC), invalid('INT16_MAX')]).
message_field('BATTERY_STATUS_V2', voltage, float, [units('V'), invalid('NaN')]).
message_field('BATTERY_STATUS_V2', current, float, [units('A'), invalid('NaN')]).
message_field('BATTERY_STATUS_V2', capacity_consumed, float, [units('Ah'), invalid('NaN')]).
message_field('BATTERY_STATUS_V2', capacity_remaining, float, [units('Ah'), invalid('NaN')]).
message_field('BATTERY_STATUS_V2', percent_remaining, uint8_t, [units('%'), invalid('UINT8_MAX')]).
message_field('BATTERY_STATUS_V2', status_flags, uint32_t, [display(bitmask), enum('MAV_BATTERY_STATUS_FLAGS')]).
message_field('COMPONENT_INFORMATION_BASIC', time_boot_ms, uint32_t, [units(ms)]).
message_field('COMPONENT_INFORMATION_BASIC', capabilities, uint64_t, [enum('MAV_PROTOCOL_CAPABILITY'), display(bitmask)]).
message_field('COMPONENT_INFORMATION_BASIC', vendor_name, 'char[32]', []).
message_field('COMPONENT_INFORMATION_BASIC', model_name, 'char[32]', []).
message_field('COMPONENT_INFORMATION_BASIC', software_version, 'char[24]', []).
message_field('COMPONENT_INFORMATION_BASIC', hardware_version, 'char[24]', []).
message_field('COMPONENT_INFORMATION_BASIC', serial_number, 'char[32]', []).
message_field('GROUP_START', group_id, uint32_t, []).
message_field('GROUP_START', mission_checksum, uint32_t, []).
message_field('GROUP_START', time_usec, uint64_t, [units(us)]).
message_field('GROUP_END', group_id, uint32_t, []).
message_field('GROUP_END', mission_checksum, uint32_t, []).
message_field('GROUP_END', time_usec, uint64_t, [units(us)]).
message_field('AVAILABLE_MODES', number_modes, uint8_t, []).
message_field('AVAILABLE_MODES', mode_index, uint8_t, []).
message_field('AVAILABLE_MODES', standard_mode, uint8_t, [enum('MAV_STANDARD_MODE')]).
message_field('AVAILABLE_MODES', custom_mode, uint32_t, []).
message_field('AVAILABLE_MODES', properties, uint32_t, [enum('MAV_MODE_PROPERTY')]).
message_field('AVAILABLE_MODES', mode_name, 'char[35]', []).
message_field('CURRENT_MODE', standard_mode, uint8_t, [enum('MAV_STANDARD_MODE')]).
message_field('CURRENT_MODE', custom_mode, uint32_t, []).
message_field('CURRENT_MODE', intended_custom_mode, uint32_t, [invalid('0')]).
message_field('AVAILABLE_MODES_MONITOR', seq, uint8_t, []).
message_field('TARGET_ABSOLUTE', timestamp, uint64_t, [units(us)]).
message_field('TARGET_ABSOLUTE', id, uint8_t, []).
message_field('TARGET_ABSOLUTE', sensor_capabilities, uint8_t, [enum('TARGET_ABSOLUTE_SENSOR_CAPABILITY_FLAGS'), display(bitmask)]).
message_field('TARGET_ABSOLUTE', lat, int32_t, [units(degE7)]).
message_field('TARGET_ABSOLUTE', lon, int32_t, [units(degE7)]).
message_field('TARGET_ABSOLUTE', alt, float, [units(m)]).
message_field('TARGET_ABSOLUTE', vel, 'float[3]', [units('m/s'), invalid('[0]')]).
message_field('TARGET_ABSOLUTE', acc, 'float[3]', [units('m/s/s'), invalid('[0]')]).
message_field('TARGET_ABSOLUTE', q_target, 'float[4]', [invalid('[0]')]).
message_field('TARGET_ABSOLUTE', rates, 'float[3]', [units('rad/s'), invalid('[0]')]).
message_field('TARGET_ABSOLUTE', position_std, 'float[2]', [units(m)]).
message_field('TARGET_ABSOLUTE', vel_std, 'float[3]', [units('m/s')]).
message_field('TARGET_ABSOLUTE', acc_std, 'float[3]', [units('m/s/s')]).
message_field('TARGET_RELATIVE', timestamp, uint64_t, [units(us)]).
message_field('TARGET_RELATIVE', id, uint8_t, [instance(true)]).
message_field('TARGET_RELATIVE', frame, uint8_t, [enum('TARGET_OBS_FRAME')]).
message_field('TARGET_RELATIVE', x, float, [units(m)]).
message_field('TARGET_RELATIVE', y, float, [units(m)]).
message_field('TARGET_RELATIVE', z, float, [units(m)]).
message_field('TARGET_RELATIVE', pos_std, 'float[3]', [units(m)]).
message_field('TARGET_RELATIVE', yaw_std, float, [units(rad)]).
message_field('TARGET_RELATIVE', q_target, 'float[4]', []).
message_field('TARGET_RELATIVE', q_sensor, 'float[4]', []).
message_field('TARGET_RELATIVE', type, uint8_t, [enum('LANDING_TARGET_TYPE')]).
message_field('ICAROUS_HEARTBEAT', status, uint8_t, [enum('ICAROUS_FMS_STATE')]).
message_field('ICAROUS_KINEMATIC_BANDS', numBands, int8_t, []).
message_field('ICAROUS_KINEMATIC_BANDS', type1, uint8_t, [enum('ICAROUS_TRACK_BAND_TYPES')]).
message_field('ICAROUS_KINEMATIC_BANDS', min1, float, [units(deg)]).
message_field('ICAROUS_KINEMATIC_BANDS', max1, float, [units(deg)]).
message_field('ICAROUS_KINEMATIC_BANDS', type2, uint8_t, [enum('ICAROUS_TRACK_BAND_TYPES')]).
message_field('ICAROUS_KINEMATIC_BANDS', min2, float, [units(deg)]).
message_field('ICAROUS_KINEMATIC_BANDS', max2, float, [units(deg)]).
message_field('ICAROUS_KINEMATIC_BANDS', type3, uint8_t, [enum('ICAROUS_TRACK_BAND_TYPES')]).
message_field('ICAROUS_KINEMATIC_BANDS', min3, float, [units(deg)]).
message_field('ICAROUS_KINEMATIC_BANDS', max3, float, [units(deg)]).
message_field('ICAROUS_KINEMATIC_BANDS', type4, uint8_t, [enum('ICAROUS_TRACK_BAND_TYPES')]).
message_field('ICAROUS_KINEMATIC_BANDS', min4, float, [units(deg)]).
message_field('ICAROUS_KINEMATIC_BANDS', max4, float, [units(deg)]).
message_field('ICAROUS_KINEMATIC_BANDS', type5, uint8_t, [enum('ICAROUS_TRACK_BAND_TYPES')]).
message_field('ICAROUS_KINEMATIC_BANDS', min5, float, [units(deg)]).
message_field('ICAROUS_KINEMATIC_BANDS', max5, float, [units(deg)]).
message_field('HEARTBEAT', type, uint8_t, [enum('MAV_TYPE')]).
message_field('HEARTBEAT', autopilot, uint8_t, [enum('MAV_AUTOPILOT')]).
message_field('HEARTBEAT', base_mode, uint8_t, [enum('MAV_MODE_FLAG'), display(bitmask)]).
message_field('HEARTBEAT', custom_mode, uint32_t, []).
message_field('HEARTBEAT', system_status, uint8_t, [enum('MAV_STATE')]).
message_field('HEARTBEAT', mavlink_version, uint8_t_mavlink_version, []).
message_field('PROTOCOL_VERSION', version, uint16_t, []).
message_field('PROTOCOL_VERSION', min_version, uint16_t, []).
message_field('PROTOCOL_VERSION', max_version, uint16_t, []).
message_field('PROTOCOL_VERSION', spec_version_hash, 'uint8_t[8]', []).
message_field('PROTOCOL_VERSION', library_version_hash, 'uint8_t[8]', []).
message_field('ARRAY_TEST_0', v1, uint8_t, []).
message_field('ARRAY_TEST_0', ar_i8, 'int8_t[4]', []).
message_field('ARRAY_TEST_0', ar_u8, 'uint8_t[4]', []).
message_field('ARRAY_TEST_0', ar_u16, 'uint16_t[4]', []).
message_field('ARRAY_TEST_0', ar_u32, 'uint32_t[4]', []).
message_field('ARRAY_TEST_1', ar_u32, 'uint32_t[4]', []).
message_field('ARRAY_TEST_3', v, uint8_t, []).
message_field('ARRAY_TEST_3', ar_u32, 'uint32_t[4]', []).
message_field('ARRAY_TEST_4', ar_u32, 'uint32_t[4]', []).
message_field('ARRAY_TEST_4', v, uint8_t, []).
message_field('ARRAY_TEST_5', c1, 'char[5]', []).
message_field('ARRAY_TEST_5', c2, 'char[5]', []).
message_field('ARRAY_TEST_6', v1, uint8_t, []).
message_field('ARRAY_TEST_6', v2, uint16_t, []).
message_field('ARRAY_TEST_6', v3, uint32_t, []).
message_field('ARRAY_TEST_6', ar_u32, 'uint32_t[2]', []).
message_field('ARRAY_TEST_6', ar_i32, 'int32_t[2]', []).
message_field('ARRAY_TEST_6', ar_u16, 'uint16_t[2]', []).
message_field('ARRAY_TEST_6', ar_i16, 'int16_t[2]', []).
message_field('ARRAY_TEST_6', ar_u8, 'uint8_t[2]', []).
message_field('ARRAY_TEST_6', ar_i8, 'int8_t[2]', []).
message_field('ARRAY_TEST_6', ar_c, 'char[32]', []).
message_field('ARRAY_TEST_6', ar_d, 'double[2]', []).
message_field('ARRAY_TEST_6', ar_f, 'float[2]', []).
message_field('ARRAY_TEST_7', ar_d, 'double[2]', []).
message_field('ARRAY_TEST_7', ar_f, 'float[2]', []).
message_field('ARRAY_TEST_7', ar_u32, 'uint32_t[2]', []).
message_field('ARRAY_TEST_7', ar_i32, 'int32_t[2]', []).
message_field('ARRAY_TEST_7', ar_u16, 'uint16_t[2]', []).
message_field('ARRAY_TEST_7', ar_i16, 'int16_t[2]', []).
message_field('ARRAY_TEST_7', ar_u8, 'uint8_t[2]', []).
message_field('ARRAY_TEST_7', ar_i8, 'int8_t[2]', []).
message_field('ARRAY_TEST_7', ar_c, 'char[32]', []).
message_field('ARRAY_TEST_8', v3, uint32_t, []).
message_field('ARRAY_TEST_8', ar_d, 'double[2]', []).
message_field('ARRAY_TEST_8', ar_u16, 'uint16_t[2]', []).
message_field('TEST_TYPES', c, char, []).
message_field('TEST_TYPES', s, 'char[10]', []).
message_field('TEST_TYPES', u8, uint8_t, []).
message_field('TEST_TYPES', u16, uint16_t, []).
message_field('TEST_TYPES', u32, uint32_t, [print_format('0x%08x')]).
message_field('TEST_TYPES', u64, uint64_t, []).
message_field('TEST_TYPES', s8, int8_t, []).
message_field('TEST_TYPES', s16, int16_t, []).
message_field('TEST_TYPES', s32, int32_t, []).
message_field('TEST_TYPES', s64, int64_t, []).
message_field('TEST_TYPES', f, float, []).
message_field('TEST_TYPES', d, double, []).
message_field('TEST_TYPES', u8_array, 'uint8_t[3]', []).
message_field('TEST_TYPES', u16_array, 'uint16_t[3]', []).
message_field('TEST_TYPES', u32_array, 'uint32_t[3]', []).
message_field('TEST_TYPES', u64_array, 'uint64_t[3]', []).
message_field('TEST_TYPES', s8_array, 'int8_t[3]', []).
message_field('TEST_TYPES', s16_array, 'int16_t[3]', []).
message_field('TEST_TYPES', s32_array, 'int32_t[3]', []).
message_field('TEST_TYPES', s64_array, 'int64_t[3]', []).
message_field('TEST_TYPES', f_array, 'float[3]', []).
message_field('TEST_TYPES', d_array, 'double[3]', []).
message_field('NAV_FILTER_BIAS', usec, uint64_t, []).
message_field('NAV_FILTER_BIAS', accel_0, float, []).
message_field('NAV_FILTER_BIAS', accel_1, float, []).
message_field('NAV_FILTER_BIAS', accel_2, float, []).
message_field('NAV_FILTER_BIAS', gyro_0, float, []).
message_field('NAV_FILTER_BIAS', gyro_1, float, []).
message_field('NAV_FILTER_BIAS', gyro_2, float, []).
message_field('RADIO_CALIBRATION', aileron, 'uint16_t[3]', []).
message_field('RADIO_CALIBRATION', elevator, 'uint16_t[3]', []).
message_field('RADIO_CALIBRATION', rudder, 'uint16_t[3]', []).
message_field('RADIO_CALIBRATION', gyro, 'uint16_t[2]', []).
message_field('RADIO_CALIBRATION', pitch, 'uint16_t[5]', []).
message_field('RADIO_CALIBRATION', throttle, 'uint16_t[5]', []).
message_field('UALBERTA_SYS_STATUS', mode, uint8_t, []).
message_field('UALBERTA_SYS_STATUS', nav_mode, uint8_t, []).
message_field('UALBERTA_SYS_STATUS', pilot, uint8_t, []).
message_field('UAVIONIX_ADSB_OUT_CFG', 'ICAO', uint32_t, []).
message_field('UAVIONIX_ADSB_OUT_CFG', callsign, 'char[9]', []).
message_field('UAVIONIX_ADSB_OUT_CFG', emitterType, uint8_t, [enum('ADSB_EMITTER_TYPE')]).
message_field('UAVIONIX_ADSB_OUT_CFG', aircraftSize, uint8_t, [enum('UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE')]).
message_field('UAVIONIX_ADSB_OUT_CFG', gpsOffsetLat, uint8_t, [enum('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT')]).
message_field('UAVIONIX_ADSB_OUT_CFG', gpsOffsetLon, uint8_t, [enum('UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON')]).
message_field('UAVIONIX_ADSB_OUT_CFG', stallSpeed, uint16_t, [units('cm/s')]).
message_field('UAVIONIX_ADSB_OUT_CFG', rfSelect, uint8_t, [enum('UAVIONIX_ADSB_OUT_RF_SELECT'), display(bitmask)]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', utcTime, uint32_t, [units(s)]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', gpsLat, int32_t, [units(degE7)]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', gpsLon, int32_t, [units(degE7)]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', gpsAlt, int32_t, [units(mm)]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', gpsFix, uint8_t, [enum('UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX')]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', numSats, uint8_t, []).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', baroAltMSL, int32_t, [units(mbar)]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', accuracyHor, uint32_t, [units(mm)]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', accuracyVert, uint16_t, [units(cm)]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', accuracyVel, uint16_t, [units('mm/s')]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', velVert, int16_t, [units('cm/s')]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', velNS, int16_t, [units('cm/s')]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', 'VelEW', int16_t, [units('cm/s')]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', emergencyStatus, uint8_t, [enum('UAVIONIX_ADSB_EMERGENCY_STATUS')]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', state, uint16_t, [enum('UAVIONIX_ADSB_OUT_DYNAMIC_STATE'), display(bitmask)]).
message_field('UAVIONIX_ADSB_OUT_DYNAMIC', squawk, uint16_t, []).
message_field('UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT', rfHealth, uint8_t, [enum('UAVIONIX_ADSB_RF_HEALTH'), display(bitmask)]).
message_field('STORM32_GIMBAL_MANAGER_INFORMATION', gimbal_id, uint8_t, [instance(true)]).
message_field('STORM32_GIMBAL_MANAGER_INFORMATION', device_cap_flags, uint32_t, [enum('GIMBAL_DEVICE_CAP_FLAGS'), display(bitmask)]).
message_field('STORM32_GIMBAL_MANAGER_INFORMATION', manager_cap_flags, uint32_t, [enum('MAV_STORM32_GIMBAL_MANAGER_CAP_FLAGS'), display(bitmask)]).
message_field('STORM32_GIMBAL_MANAGER_INFORMATION', roll_min, float, [units(rad), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_INFORMATION', roll_max, float, [units(rad), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_INFORMATION', pitch_min, float, [units(rad), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_INFORMATION', pitch_max, float, [units(rad), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_INFORMATION', yaw_min, float, [units(rad), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_INFORMATION', yaw_max, float, [units(rad), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_STATUS', gimbal_id, uint8_t, [instance(true)]).
message_field('STORM32_GIMBAL_MANAGER_STATUS', supervisor, uint8_t, [enum('MAV_STORM32_GIMBAL_MANAGER_CLIENT')]).
message_field('STORM32_GIMBAL_MANAGER_STATUS', device_flags, uint16_t, [enum('GIMBAL_DEVICE_FLAGS')]).
message_field('STORM32_GIMBAL_MANAGER_STATUS', manager_flags, uint16_t, [enum('MAV_STORM32_GIMBAL_MANAGER_FLAGS')]).
message_field('STORM32_GIMBAL_MANAGER_STATUS', profile, uint8_t, [enum('MAV_STORM32_GIMBAL_MANAGER_PROFILE')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL', target_system, uint8_t, []).
message_field('STORM32_GIMBAL_MANAGER_CONTROL', target_component, uint8_t, []).
message_field('STORM32_GIMBAL_MANAGER_CONTROL', gimbal_id, uint8_t, [instance(true)]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL', client, uint8_t, [enum('MAV_STORM32_GIMBAL_MANAGER_CLIENT')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL', device_flags, uint16_t, [enum('GIMBAL_DEVICE_FLAGS'), invalid('UINT16_MAX')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL', manager_flags, uint16_t, [enum('MAV_STORM32_GIMBAL_MANAGER_FLAGS'), invalid('0')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL', q, 'float[4]', [invalid('[NaN:]')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL', angular_velocity_x, float, [units('rad/s'), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL', angular_velocity_y, float, [units('rad/s'), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL', angular_velocity_z, float, [units('rad/s'), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', target_system, uint8_t, []).
message_field('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', target_component, uint8_t, []).
message_field('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', gimbal_id, uint8_t, [instance(true)]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', client, uint8_t, [enum('MAV_STORM32_GIMBAL_MANAGER_CLIENT')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', device_flags, uint16_t, [enum('GIMBAL_DEVICE_FLAGS'), invalid('UINT16_MAX')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', manager_flags, uint16_t, [enum('MAV_STORM32_GIMBAL_MANAGER_FLAGS'), invalid('0')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', pitch, float, [units(rad), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', yaw, float, [units(rad), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', pitch_rate, float, [units('rad/s'), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', yaw_rate, float, [units('rad/s'), invalid('NaN')]).
message_field('STORM32_GIMBAL_MANAGER_CORRECT_ROLL', target_system, uint8_t, []).
message_field('STORM32_GIMBAL_MANAGER_CORRECT_ROLL', target_component, uint8_t, []).
message_field('STORM32_GIMBAL_MANAGER_CORRECT_ROLL', gimbal_id, uint8_t, [instance(true)]).
message_field('STORM32_GIMBAL_MANAGER_CORRECT_ROLL', client, uint8_t, [enum('MAV_STORM32_GIMBAL_MANAGER_CLIENT')]).
message_field('STORM32_GIMBAL_MANAGER_CORRECT_ROLL', roll, float, [units(rad)]).
message_field('QSHOT_STATUS', mode, uint16_t, [enum('MAV_QSHOT_MODE')]).
message_field('QSHOT_STATUS', shot_state, uint16_t, []).
message_field('RADIO_RC_CHANNELS', count, uint8_t, []).
message_field('RADIO_RC_CHANNELS', flags, uint8_t, [enum('RADIO_RC_CHANNELS_FLAGS'), display(bitmask)]).
message_field('RADIO_RC_CHANNELS', channels, 'int16_t[24]', []).
message_field('RADIO_LINK_STATS', flags, uint8_t, [enum('RADIO_LINK_STATS_FLAGS'), display(bitmask)]).
message_field('RADIO_LINK_STATS', rx_LQ, uint8_t, [units('c%'), invalid('UINT8_MAX')]).
message_field('RADIO_LINK_STATS', rx_rssi1, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_LINK_STATS', rx_snr1, int8_t, [invalid('INT8_MAX')]).
message_field('RADIO_LINK_STATS', rx_rssi2, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_LINK_STATS', rx_snr2, int8_t, [invalid('INT8_MAX')]).
message_field('RADIO_LINK_STATS', rx_receive_antenna, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_LINK_STATS', rx_transmit_antenna, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_LINK_STATS', tx_LQ, uint8_t, [units('c%'), invalid('UINT8_MAX')]).
message_field('RADIO_LINK_STATS', tx_rssi1, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_LINK_STATS', tx_snr1, int8_t, [invalid('INT8_MAX')]).
message_field('RADIO_LINK_STATS', tx_rssi2, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_LINK_STATS', tx_snr2, int8_t, [invalid('INT8_MAX')]).
message_field('RADIO_LINK_STATS', tx_receive_antenna, uint8_t, [invalid('UINT8_MAX')]).
message_field('RADIO_LINK_STATS', tx_transmit_antenna, uint8_t, [invalid('UINT8_MAX')]).
message_field('FRSKY_PASSTHROUGH_ARRAY', time_boot_ms, uint32_t, [units(ms)]).
message_field('FRSKY_PASSTHROUGH_ARRAY', count, uint8_t, []).
message_field('FRSKY_PASSTHROUGH_ARRAY', packet_buf, 'uint8_t[240]', []).
message_field('PARAM_VALUE_ARRAY', param_count, uint16_t, []).
message_field('PARAM_VALUE_ARRAY', param_index_first, uint16_t, []).
message_field('PARAM_VALUE_ARRAY', param_array_len, uint8_t, []).
message_field('PARAM_VALUE_ARRAY', flags, uint16_t, []).
message_field('PARAM_VALUE_ARRAY', packet_buf, 'uint8_t[248]', []).
message_field('AVSS_PRS_SYS_STATUS', time_boot_ms, uint32_t, [units(ms)]).
message_field('AVSS_PRS_SYS_STATUS', error_status, uint32_t, []).
message_field('AVSS_PRS_SYS_STATUS', battery_status, uint32_t, []).
message_field('AVSS_PRS_SYS_STATUS', arm_status, uint8_t, []).
message_field('AVSS_PRS_SYS_STATUS', charge_status, uint8_t, []).
message_field('AVSS_DRONE_POSITION', time_boot_ms, uint32_t, [units(ms)]).
message_field('AVSS_DRONE_POSITION', lat, int32_t, [units(degE7)]).
message_field('AVSS_DRONE_POSITION', lon, int32_t, [units(degE7)]).
message_field('AVSS_DRONE_POSITION', alt, int32_t, [units(mm)]).
message_field('AVSS_DRONE_POSITION', ground_alt, float, [units(m)]).
message_field('AVSS_DRONE_POSITION', barometer_alt, float, [units(m)]).
message_field('AVSS_DRONE_IMU', time_boot_ms, uint32_t, [units(ms)]).
message_field('AVSS_DRONE_IMU', q1, float, []).
message_field('AVSS_DRONE_IMU', q2, float, []).
message_field('AVSS_DRONE_IMU', q3, float, []).
message_field('AVSS_DRONE_IMU', q4, float, []).
message_field('AVSS_DRONE_IMU', xacc, float, [units('m/s/s')]).
message_field('AVSS_DRONE_IMU', yacc, float, [units('m/s/s')]).
message_field('AVSS_DRONE_IMU', zacc, float, [units('m/s/s')]).
message_field('AVSS_DRONE_IMU', xgyro, float, [units('rad/s')]).
message_field('AVSS_DRONE_IMU', ygyro, float, [units('rad/s')]).
message_field('AVSS_DRONE_IMU', zgyro, float, [units('rad/s')]).
message_field('AVSS_DRONE_OPERATION_MODE', time_boot_ms, uint32_t, [units(ms)]).
message_field('AVSS_DRONE_OPERATION_MODE', 'M300_operation_mode', uint8_t, []).
message_field('AVSS_DRONE_OPERATION_MODE', horsefly_operation_mode, uint8_t, []).
message_field('CUBEPILOT_RAW_RC', rc_raw, 'uint8_t[32]', []).
message_field('HERELINK_VIDEO_STREAM_INFORMATION', camera_id, uint8_t, []).
message_field('HERELINK_VIDEO_STREAM_INFORMATION', status, uint8_t, []).
message_field('HERELINK_VIDEO_STREAM_INFORMATION', framerate, float, [units('Hz')]).
message_field('HERELINK_VIDEO_STREAM_INFORMATION', resolution_h, uint16_t, [units(pix)]).
message_field('HERELINK_VIDEO_STREAM_INFORMATION', resolution_v, uint16_t, [units(pix)]).
message_field('HERELINK_VIDEO_STREAM_INFORMATION', bitrate, uint32_t, [units('bits/s')]).
message_field('HERELINK_VIDEO_STREAM_INFORMATION', rotation, uint16_t, [units(deg)]).
message_field('HERELINK_VIDEO_STREAM_INFORMATION', uri, 'char[230]', []).
message_field('HERELINK_TELEM', rssi, uint8_t, []).
message_field('HERELINK_TELEM', snr, int16_t, []).
message_field('HERELINK_TELEM', rf_freq, uint32_t, []).
message_field('HERELINK_TELEM', link_bw, uint32_t, []).
message_field('HERELINK_TELEM', link_rate, uint32_t, []).
message_field('HERELINK_TELEM', cpu_temp, int16_t, []).
message_field('HERELINK_TELEM', board_temp, int16_t, []).
message_field('CUBEPILOT_FIRMWARE_UPDATE_START', target_system, uint8_t, []).
message_field('CUBEPILOT_FIRMWARE_UPDATE_START', target_component, uint8_t, []).
message_field('CUBEPILOT_FIRMWARE_UPDATE_START', size, uint32_t, [units(bytes)]).
message_field('CUBEPILOT_FIRMWARE_UPDATE_START', crc, uint32_t, []).
message_field('CUBEPILOT_FIRMWARE_UPDATE_RESP', target_system, uint8_t, []).
message_field('CUBEPILOT_FIRMWARE_UPDATE_RESP', target_component, uint8_t, []).
message_field('CUBEPILOT_FIRMWARE_UPDATE_RESP', offset, uint32_t, [units(bytes)]).
message_field('AIRLINK_AUTH', login, 'char[50]', []).
message_field('AIRLINK_AUTH', password, 'char[50]', []).
message_field('AIRLINK_AUTH_RESPONSE', resp_type, uint8_t, [enum('AIRLINK_AUTH_RESPONSE_TYPE')]).

:- dynamic message/3.

message('SENSOR_OFFSETS', 150, []).
message('SET_MAG_OFFSETS', 151, []).
message('MEMINFO', 152, []).
message('AP_ADC', 153, []).
message('DIGICAM_CONFIGURE', 154, []).
message('DIGICAM_CONTROL', 155, []).
message('MOUNT_CONFIGURE', 156, []).
message('MOUNT_CONTROL', 157, []).
message('MOUNT_STATUS', 158, []).
message('FENCE_POINT', 160, []).
message('FENCE_FETCH_POINT', 161, []).
message('AHRS', 163, []).
message('SIMSTATE', 164, []).
message('HWSTATUS', 165, []).
message('RADIO', 166, []).
message('LIMITS_STATUS', 167, []).
message('WIND', 168, []).
message('DATA16', 169, []).
message('DATA32', 170, []).
message('DATA64', 171, []).
message('DATA96', 172, []).
message('RANGEFINDER', 173, []).
message('AIRSPEED_AUTOCAL', 174, []).
message('RALLY_POINT', 175, []).
message('RALLY_FETCH_POINT', 176, []).
message('COMPASSMOT_STATUS', 177, []).
message('AHRS2', 178, []).
message('CAMERA_STATUS', 179, []).
message('CAMERA_FEEDBACK', 180, []).
message('BATTERY2', 181, []).
message('AHRS3', 182, []).
message('AUTOPILOT_VERSION_REQUEST', 183, []).
message('REMOTE_LOG_DATA_BLOCK', 184, []).
message('REMOTE_LOG_BLOCK_STATUS', 185, []).
message('LED_CONTROL', 186, []).
message('MAG_CAL_PROGRESS', 191, []).
message('EKF_STATUS_REPORT', 193, []).
message('PID_TUNING', 194, []).
message('DEEPSTALL', 195, []).
message('GIMBAL_REPORT', 200, []).
message('GIMBAL_CONTROL', 201, []).
message('GIMBAL_TORQUE_CMD_REPORT', 214, []).
message('GOPRO_HEARTBEAT', 215, []).
message('GOPRO_GET_REQUEST', 216, []).
message('GOPRO_GET_RESPONSE', 217, []).
message('GOPRO_SET_REQUEST', 218, []).
message('GOPRO_SET_RESPONSE', 219, []).
message('RPM', 226, []).
message('DEVICE_OP_READ', 11000, []).
message('DEVICE_OP_READ_REPLY', 11001, []).
message('DEVICE_OP_WRITE', 11002, []).
message('DEVICE_OP_WRITE_REPLY', 11003, []).
message('ADAP_TUNING', 11010, []).
message('VISION_POSITION_DELTA', 11011, []).
message('AOA_SSA', 11020, []).
message('ESC_TELEMETRY_1_TO_4', 11030, []).
message('ESC_TELEMETRY_5_TO_8', 11031, []).
message('ESC_TELEMETRY_9_TO_12', 11032, []).
message('OSD_PARAM_CONFIG', 11033, []).
message('OSD_PARAM_CONFIG_REPLY', 11034, []).
message('OSD_PARAM_SHOW_CONFIG', 11035, []).
message('OSD_PARAM_SHOW_CONFIG_REPLY', 11036, []).
message('OBSTACLE_DISTANCE_3D', 11037, []).
message('WATER_DEPTH', 11038, []).
message('MCU_STATUS', 11039, []).
message('COMMAND_INT_STAMPED', 223, []).
message('COMMAND_LONG_STAMPED', 224, []).
message('SENS_POWER', 8002, []).
message('SENS_MPPT', 8003, []).
message('ASLCTRL_DATA', 8004, []).
message('ASLCTRL_DEBUG', 8005, []).
message('ASLUAV_STATUS', 8006, []).
message('EKF_EXT', 8007, []).
message('ASL_OBCTRL', 8008, []).
message('SENS_ATMOS', 8009, []).
message('SENS_BATMON', 8010, []).
message('FW_SOARING_DATA', 8011, []).
message('SENSORPOD_STATUS', 8012, []).
message('SENS_POWER_BOARD', 8013, []).
message('GSM_LINK_STATUS', 8014, []).
message('SATCOM_LINK_STATUS', 8015, []).
message('SENSOR_AIRFLOW_ANGLES', 8016, []).
message('SYS_STATUS', 1, []).
message('SYSTEM_TIME', 2, []).
message('PING', 4, []).
message('CHANGE_OPERATOR_CONTROL', 5, []).
message('CHANGE_OPERATOR_CONTROL_ACK', 6, []).
message('AUTH_KEY', 7, []).
message('LINK_NODE_STATUS', 8, []).
message('SET_MODE', 11, []).
message('PARAM_REQUEST_READ', 20, []).
message('PARAM_REQUEST_LIST', 21, []).
message('PARAM_VALUE', 22, []).
message('PARAM_SET', 23, []).
message('GPS_RAW_INT', 24, []).
message('GPS_STATUS', 25, []).
message('SCALED_IMU', 26, []).
message('RAW_IMU', 27, []).
message('RAW_PRESSURE', 28, []).
message('SCALED_PRESSURE', 29, []).
message('ATTITUDE', 30, []).
message('ATTITUDE_QUATERNION', 31, []).
message('LOCAL_POSITION_NED', 32, []).
message('GLOBAL_POSITION_INT', 33, []).
message('RC_CHANNELS_SCALED', 34, []).
message('RC_CHANNELS_RAW', 35, []).
message('SERVO_OUTPUT_RAW', 36, []).
message('MISSION_REQUEST_PARTIAL_LIST', 37, []).
message('MISSION_WRITE_PARTIAL_LIST', 38, []).
message('MISSION_ITEM', 39, []).
message('MISSION_REQUEST', 40, []).
message('MISSION_SET_CURRENT', 41, []).
message('MISSION_CURRENT', 42, []).
message('MISSION_REQUEST_LIST', 43, []).
message('MISSION_COUNT', 44, []).
message('MISSION_CLEAR_ALL', 45, []).
message('MISSION_ITEM_REACHED', 46, []).
message('MISSION_ACK', 47, []).
message('SET_GPS_GLOBAL_ORIGIN', 48, []).
message('GPS_GLOBAL_ORIGIN', 49, []).
message('PARAM_MAP_RC', 50, []).
message('MISSION_REQUEST_INT', 51, []).
message('SAFETY_SET_ALLOWED_AREA', 54, []).
message('SAFETY_ALLOWED_AREA', 55, []).
message('ATTITUDE_QUATERNION_COV', 61, []).
message('NAV_CONTROLLER_OUTPUT', 62, []).
message('GLOBAL_POSITION_INT_COV', 63, []).
message('LOCAL_POSITION_NED_COV', 64, []).
message('RC_CHANNELS', 65, []).
message('REQUEST_DATA_STREAM', 66, []).
message('DATA_STREAM', 67, []).
message('MANUAL_CONTROL', 69, []).
message('RC_CHANNELS_OVERRIDE', 70, []).
message('MISSION_ITEM_INT', 73, []).
message('VFR_HUD', 74, []).
message('COMMAND_INT', 75, []).
message('COMMAND_LONG', 76, []).
message('COMMAND_ACK', 77, []).
message('COMMAND_CANCEL', 80, []).
message('MANUAL_SETPOINT', 81, []).
message('SET_ATTITUDE_TARGET', 82, []).
message('ATTITUDE_TARGET', 83, []).
message('SET_POSITION_TARGET_LOCAL_NED', 84, []).
message('POSITION_TARGET_LOCAL_NED', 85, []).
message('SET_POSITION_TARGET_GLOBAL_INT', 86, []).
message('POSITION_TARGET_GLOBAL_INT', 87, []).
message('LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET', 89, []).
message('HIL_STATE', 90, []).
message('HIL_CONTROLS', 91, []).
message('HIL_RC_INPUTS_RAW', 92, []).
message('HIL_ACTUATOR_CONTROLS', 93, []).
message('OPTICAL_FLOW', 100, []).
message('GLOBAL_VISION_POSITION_ESTIMATE', 101, []).
message('VISION_POSITION_ESTIMATE', 102, []).
message('VISION_SPEED_ESTIMATE', 103, []).
message('VICON_POSITION_ESTIMATE', 104, []).
message('HIGHRES_IMU', 105, []).
message('OPTICAL_FLOW_RAD', 106, []).
message('HIL_SENSOR', 107, []).
message('SIM_STATE', 108, []).
message('RADIO_STATUS', 109, []).
message('FILE_TRANSFER_PROTOCOL', 110, []).
message('TIMESYNC', 111, []).
message('CAMERA_TRIGGER', 112, []).
message('HIL_GPS', 113, []).
message('HIL_OPTICAL_FLOW', 114, []).
message('HIL_STATE_QUATERNION', 115, []).
message('SCALED_IMU2', 116, []).
message('LOG_REQUEST_LIST', 117, []).
message('LOG_ENTRY', 118, []).
message('LOG_REQUEST_DATA', 119, []).
message('LOG_DATA', 120, []).
message('LOG_ERASE', 121, []).
message('LOG_REQUEST_END', 122, []).
message('GPS_INJECT_DATA', 123, []).
message('GPS2_RAW', 124, []).
message('POWER_STATUS', 125, []).
message('SERIAL_CONTROL', 126, []).
message('GPS_RTK', 127, []).
message('GPS2_RTK', 128, []).
message('SCALED_IMU3', 129, []).
message('DATA_TRANSMISSION_HANDSHAKE', 130, []).
message('ENCAPSULATED_DATA', 131, []).
message('DISTANCE_SENSOR', 132, []).
message('TERRAIN_REQUEST', 133, []).
message('TERRAIN_DATA', 134, []).
message('TERRAIN_CHECK', 135, []).
message('TERRAIN_REPORT', 136, []).
message('SCALED_PRESSURE2', 137, []).
message('ATT_POS_MOCAP', 138, []).
message('SET_ACTUATOR_CONTROL_TARGET', 139, []).
message('ACTUATOR_CONTROL_TARGET', 140, []).
message('ALTITUDE', 141, []).
message('RESOURCE_REQUEST', 142, []).
message('SCALED_PRESSURE3', 143, []).
message('FOLLOW_TARGET', 144, []).
message('CONTROL_SYSTEM_STATE', 146, []).
message('BATTERY_STATUS', 147, []).
message('AUTOPILOT_VERSION', 148, []).
message('LANDING_TARGET', 149, []).
message('FENCE_STATUS', 162, []).
message('MAG_CAL_REPORT', 192, []).
message('EFI_STATUS', 225, []).
message('ESTIMATOR_STATUS', 230, []).
message('WIND_COV', 231, []).
message('GPS_INPUT', 232, []).
message('GPS_RTCM_DATA', 233, []).
message('HIGH_LATENCY', 234, []).
message('HIGH_LATENCY2', 235, []).
message('VIBRATION', 241, []).
message('HOME_POSITION', 242, []).
message('SET_HOME_POSITION', 243, []).
message('MESSAGE_INTERVAL', 244, []).
message('EXTENDED_SYS_STATE', 245, []).
message('ADSB_VEHICLE', 246, []).
message('COLLISION', 247, []).
message('V2_EXTENSION', 248, []).
message('MEMORY_VECT', 249, []).
message('DEBUG_VECT', 250, []).
message('NAMED_VALUE_FLOAT', 251, []).
message('NAMED_VALUE_INT', 252, []).
message('STATUSTEXT', 253, []).
message('DEBUG', 254, []).
message('SETUP_SIGNING', 256, []).
message('BUTTON_CHANGE', 257, []).
message('PLAY_TUNE', 258, []).
message('CAMERA_INFORMATION', 259, []).
message('CAMERA_SETTINGS', 260, []).
message('STORAGE_INFORMATION', 261, []).
message('CAMERA_CAPTURE_STATUS', 262, []).
message('CAMERA_IMAGE_CAPTURED', 263, []).
message('FLIGHT_INFORMATION', 264, []).
message('MOUNT_ORIENTATION', 265, []).
message('LOGGING_DATA', 266, []).
message('LOGGING_DATA_ACKED', 267, []).
message('LOGGING_ACK', 268, []).
message('VIDEO_STREAM_INFORMATION', 269, []).
message('VIDEO_STREAM_STATUS', 270, []).
message('CAMERA_FOV_STATUS', 271, []).
message('CAMERA_TRACKING_IMAGE_STATUS', 275, []).
message('CAMERA_TRACKING_GEO_STATUS', 276, []).
message('GIMBAL_MANAGER_INFORMATION', 280, []).
message('GIMBAL_MANAGER_STATUS', 281, []).
message('GIMBAL_MANAGER_SET_ATTITUDE', 282, []).
message('GIMBAL_DEVICE_INFORMATION', 283, []).
message('GIMBAL_DEVICE_SET_ATTITUDE', 284, []).
message('GIMBAL_DEVICE_ATTITUDE_STATUS', 285, []).
message('AUTOPILOT_STATE_FOR_GIMBAL_DEVICE', 286, []).
message('GIMBAL_MANAGER_SET_PITCHYAW', 287, []).
message('GIMBAL_MANAGER_SET_MANUAL_CONTROL', 288, []).
message('ESC_INFO', 290, []).
message('ESC_STATUS', 291, []).
message('WIFI_CONFIG_AP', 299, []).
message('AIS_VESSEL', 301, []).
message('UAVCAN_NODE_STATUS', 310, []).
message('UAVCAN_NODE_INFO', 311, []).
message('PARAM_EXT_REQUEST_READ', 320, []).
message('PARAM_EXT_REQUEST_LIST', 321, []).
message('PARAM_EXT_VALUE', 322, []).
message('PARAM_EXT_SET', 323, []).
message('PARAM_EXT_ACK', 324, []).
message('OBSTACLE_DISTANCE', 330, []).
message('ODOMETRY', 331, []).
message('TRAJECTORY_REPRESENTATION_WAYPOINTS', 332, []).
message('TRAJECTORY_REPRESENTATION_BEZIER', 333, []).
message('CELLULAR_STATUS', 334, []).
message('ISBD_LINK_STATUS', 335, []).
message('CELLULAR_CONFIG', 336, []).
message('RAW_RPM', 339, []).
message('UTM_GLOBAL_POSITION', 340, []).
message('DEBUG_FLOAT_ARRAY', 350, []).
message('ORBIT_EXECUTION_STATUS', 360, []).
message('SMART_BATTERY_INFO', 370, []).
message('GENERATOR_STATUS', 373, []).
message('ACTUATOR_OUTPUT_STATUS', 375, []).
message('TIME_ESTIMATE_TO_TARGET', 380, []).
message('TUNNEL', 385, []).
message('CAN_FRAME', 386, []).
message('ONBOARD_COMPUTER_STATUS', 390, []).
message('COMPONENT_INFORMATION', 395, []).
message('COMPONENT_METADATA', 397, []).
message('PLAY_TUNE_V2', 400, []).
message('SUPPORTED_TUNES', 401, []).
message('EVENT', 410, []).
message('CURRENT_EVENT_SEQUENCE', 411, []).
message('REQUEST_EVENT', 412, []).
message('RESPONSE_EVENT_ERROR', 413, []).
message('CANFD_FRAME', 387, []).
message('CAN_FILTER_MODIFY', 388, []).
message('WHEEL_DISTANCE', 9000, []).
message('WINCH_STATUS', 9005, []).
message('OPEN_DRONE_ID_BASIC_ID', 12900, []).
message('OPEN_DRONE_ID_LOCATION', 12901, []).
message('OPEN_DRONE_ID_AUTHENTICATION', 12902, []).
message('OPEN_DRONE_ID_SELF_ID', 12903, []).
message('OPEN_DRONE_ID_SYSTEM', 12904, []).
message('OPEN_DRONE_ID_OPERATOR_ID', 12905, []).
message('OPEN_DRONE_ID_MESSAGE_PACK', 12915, []).
message('OPEN_DRONE_ID_ARM_STATUS', 12918, []).
message('OPEN_DRONE_ID_SYSTEM_UPDATE', 12919, []).
message('HYGROMETER_SENSOR', 12920, []).
message('PARAM_ACK_TRANSACTION', 19, []).
message('AIRSPEED', 295, []).
message('WIFI_NETWORK_INFO', 298, []).
message('FIGURE_EIGHT_EXECUTION_STATUS', 361, []).
message('BATTERY_STATUS_V2', 369, []).
message('COMPONENT_INFORMATION_BASIC', 396, []).
message('GROUP_START', 414, []).
message('GROUP_END', 415, []).
message('AVAILABLE_MODES', 435, []).
message('CURRENT_MODE', 436, []).
message('AVAILABLE_MODES_MONITOR', 437, []).
message('TARGET_ABSOLUTE', 510, []).
message('TARGET_RELATIVE', 511, []).
message('ICAROUS_HEARTBEAT', 42000, []).
message('ICAROUS_KINEMATIC_BANDS', 42001, []).
message('HEARTBEAT', 0, []).
message('PROTOCOL_VERSION', 300, []).
message('ARRAY_TEST_0', 17150, []).
message('ARRAY_TEST_1', 17151, []).
message('ARRAY_TEST_3', 17153, []).
message('ARRAY_TEST_4', 17154, []).
message('ARRAY_TEST_5', 17155, []).
message('ARRAY_TEST_6', 17156, []).
message('ARRAY_TEST_7', 17157, []).
message('ARRAY_TEST_8', 17158, []).
message('TEST_TYPES', 17000, []).
message('NAV_FILTER_BIAS', 220, []).
message('RADIO_CALIBRATION', 221, []).
message('UALBERTA_SYS_STATUS', 222, []).
message('UAVIONIX_ADSB_OUT_CFG', 10001, []).
message('UAVIONIX_ADSB_OUT_DYNAMIC', 10002, []).
message('UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT', 10003, []).
message('STORM32_GIMBAL_MANAGER_INFORMATION', 60010, []).
message('STORM32_GIMBAL_MANAGER_STATUS', 60011, []).
message('STORM32_GIMBAL_MANAGER_CONTROL', 60012, []).
message('STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW', 60013, []).
message('STORM32_GIMBAL_MANAGER_CORRECT_ROLL', 60014, []).
message('QSHOT_STATUS', 60020, []).
message('RADIO_RC_CHANNELS', 60045, []).
message('RADIO_LINK_STATS', 60046, []).
message('FRSKY_PASSTHROUGH_ARRAY', 60040, []).
message('PARAM_VALUE_ARRAY', 60041, []).
message('AVSS_PRS_SYS_STATUS', 60050, []).
message('AVSS_DRONE_POSITION', 60051, []).
message('AVSS_DRONE_IMU', 60052, []).
message('AVSS_DRONE_OPERATION_MODE', 60053, []).
message('CUBEPILOT_RAW_RC', 50001, []).
message('HERELINK_VIDEO_STREAM_INFORMATION', 50002, []).
message('HERELINK_TELEM', 50003, []).
message('CUBEPILOT_FIRMWARE_UPDATE_START', 50004, []).
message('CUBEPILOT_FIRMWARE_UPDATE_RESP', 50005, []).
message('AIRLINK_AUTH', 52000, []).
message('AIRLINK_AUTH_RESPONSE', 52001, []).
